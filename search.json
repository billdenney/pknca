[{"path":[]},{"path":"http://billdenney.github.io/pknca/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"http://billdenney.github.io/pknca/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"http://billdenney.github.io/pknca/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"http://billdenney.github.io/pknca/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"http://billdenney.github.io/pknca/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team wdenney@humanpredictions.com. complaints reviewed investigated result response deemed necessary appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"http://billdenney.github.io/pknca/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq","code":""},{"path":"http://billdenney.github.io/pknca/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Pull request process","title":"Pull request process","text":"recommend create Git branch pull request (PR). New code follow tidyverse style guide except readily conflicts existing code. PKNCA moving (slowly) toward tidyverse-like styling. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"gnu-affero-general-public-license","dir":"","previous_headings":"","what":"GNU AFFERO GENERAL PUBLIC LICENSE","title":"NA","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"NA","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"NA","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"NA","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"NA","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"NA","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"NA","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"NA","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"NA","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"NA","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"NA","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"NA","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"NA","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"NA","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"NA","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"NA","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"NA","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"NA","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"NA","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"NA","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"http://billdenney.github.io/pknca/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"NA","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"http://billdenney.github.io/pknca/articles/v01-introduction-and-usage.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick Start","title":"Introduction to PKNCA and Usage Instructions","text":"simplest analysis requires concentration dosing data, five function calls can provide summarized results. (Please note examples document intended show typical workflow, intended run directly. example run directly, please see theophylline example.)","code":"library(PKNCA) library(dplyr, quietly=TRUE) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union ## Load the PK concentration data d_conc <-   as.data.frame(datasets::Theoph) %>%   mutate(Subject=as.numeric(as.character(Subject))) ## Generate the dosing data d_dose <- d_conc[d_conc$Time == 0,] d_dose$Time <- 0  ## Create a concentration object specifying the concentration, time, and ## subject columns.  (Note that any number of grouping levels is ## supported; you are not restricted to just grouping by subject.) conc_obj <-   PKNCAconc(     d_conc,     conc~Time|Subject   ) ## Create a dosing object specifying the dose, time, and subject ## columns.  (Note that the grouping factors should be the same as or a ## subset of the grouping factors for concentration, and the grouping ## columns must have the same names between concentration and dose ## objects.) dose_obj <-   PKNCAdose(     d_dose,     Dose~Time|Subject   ) ## Combine the concentration and dosing information both to ## automatically define the intervals for NCA calculation and provide ## doses for calculations requiring dose. data_obj <- PKNCAdata(conc_obj, dose_obj)  ## Calculate the NCA parameters results_obj <- pk.nca(data_obj)  ## Summarize the results summary(results_obj) ##  start end  N     auclast        cmax               tmax   half.life aucinf.obs ##      0  24 12 74.6 [24.3]           .                  .           .          . ##      0 Inf 12           . 8.65 [17.0] 1.14 [0.630, 3.55] 8.18 [2.12] 115 [28.4] ##  ## Caption: auclast, cmax, aucinf.obs: geometric mean and geometric coefficient of variation; tmax: median and range; half.life: arithmetic mean and standard deviation; N: number of subjects"},{"path":"http://billdenney.github.io/pknca/articles/v01-introduction-and-usage.html","id":"data-handling","dir":"Articles","previous_headings":"","what":"Data Handling","title":"Introduction to PKNCA and Usage Instructions","text":"loading data, must right form. minimum requirements concentration, dose, time must numeric (factors). Grouping variables specific requirements; can mode. Values limit quantification coded zeros (0), missing values coded NA.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v01-introduction-and-usage.html","id":"calculation-options-the-pknca-options-function","dir":"Articles","previous_headings":"Options: Make PKNCA Work Your Way","what":"Calculation Options: the PKNCA.options Function","title":"Introduction to PKNCA and Usage Instructions","text":"Different organizations different requirements computation summarization NCA. Options perform calculations summaries handled PKNCA.options command. Default options set commonly-used standard parameters. current value options can found running command arguments: , reset current values library defaults, run function default argument set TRUE. options documented used; example, first.tmax option documented pk.calc.tmax function.","code":"PKNCA.options() ## $adj.r.squared.factor ## [1] 1e-04 ##  ## $max.missing ## [1] 0.5 ##  ## $auc.method ## [1] \"lin up/log down\" ##  ## $conc.na ## [1] \"drop\" ##  ## $conc.blq ## $conc.blq$first ## [1] \"keep\" ##  ## $conc.blq$middle ## [1] \"drop\" ##  ## $conc.blq$last ## [1] \"keep\" ##  ##  ## $first.tmax ## [1] TRUE ##  ## $allow.tmax.in.half.life ## [1] FALSE ##  ## $keep_interval_cols ## NULL ##  ## $min.hl.points ## [1] 3 ##  ## $min.span.ratio ## [1] 2 ##  ## $max.aucinf.pext ## [1] 20 ##  ## $min.hl.r.squared ## [1] 0.9 ##  ## $progress ## [1] TRUE ##  ## $tau.choices ## [1] NA ##  ## $single.dose.aucs ##   start end auclast aucall aumclast aumcall aucint.last aucint.last.dose ## 1     0  24    TRUE  FALSE    FALSE   FALSE       FALSE            FALSE ## 2     0 Inf   FALSE  FALSE    FALSE   FALSE       FALSE            FALSE ##   aucint.all aucint.all.dose    c0  cmax  cmin  tmax tlast tfirst clast.obs ## 1      FALSE           FALSE FALSE FALSE FALSE FALSE FALSE  FALSE     FALSE ## 2      FALSE           FALSE FALSE  TRUE FALSE  TRUE FALSE  FALSE     FALSE ##   cl.last cl.all     f mrt.last mrt.iv.last vss.last vss.iv.last   cav ## 1   FALSE  FALSE FALSE    FALSE       FALSE    FALSE       FALSE FALSE ## 2   FALSE  FALSE FALSE    FALSE       FALSE    FALSE       FALSE FALSE ##   cav.int.last cav.int.all ctrough cstart   ptr  tlag deg.fluc swing  ceoi ## 1        FALSE       FALSE   FALSE  FALSE FALSE FALSE    FALSE FALSE FALSE ## 2        FALSE       FALSE   FALSE  FALSE FALSE FALSE    FALSE FALSE FALSE ##   aucabove.predose.all aucabove.trough.all count_conc totdose    ae clr.last ## 1                FALSE               FALSE      FALSE   FALSE FALSE    FALSE ## 2                FALSE               FALSE      FALSE   FALSE FALSE    FALSE ##   clr.obs clr.pred    fe sparse_auclast sparse_auc_se sparse_auc_df time_above ## 1   FALSE    FALSE FALSE          FALSE         FALSE         FALSE      FALSE ## 2   FALSE    FALSE FALSE          FALSE         FALSE         FALSE      FALSE ##   aucivlast aucivall aucivint.last aucivint.all aucivpbextlast aucivpbextall ## 1     FALSE    FALSE         FALSE        FALSE          FALSE         FALSE ## 2     FALSE    FALSE         FALSE        FALSE          FALSE         FALSE ##   aucivpbextint.last aucivpbextint.all half.life r.squared adj.r.squared ## 1              FALSE             FALSE     FALSE     FALSE         FALSE ## 2              FALSE             FALSE      TRUE     FALSE         FALSE ##   lambda.z lambda.z.time.first lambda.z.n.points clast.pred span.ratio ## 1    FALSE               FALSE             FALSE      FALSE      FALSE ## 2    FALSE               FALSE             FALSE      FALSE      FALSE ##   thalf.eff.last thalf.eff.iv.last kel.last kel.iv.last aucinf.obs aucinf.pred ## 1          FALSE             FALSE    FALSE       FALSE      FALSE       FALSE ## 2          FALSE             FALSE    FALSE       FALSE       TRUE       FALSE ##   aumcinf.obs aumcinf.pred aucint.inf.obs aucint.inf.obs.dose aucint.inf.pred ## 1       FALSE        FALSE          FALSE               FALSE           FALSE ## 2       FALSE        FALSE          FALSE               FALSE           FALSE ##   aucint.inf.pred.dose aucivinf.obs aucivinf.pred aucivpbextinf.obs ## 1                FALSE        FALSE         FALSE             FALSE ## 2                FALSE        FALSE         FALSE             FALSE ##   aucivpbextinf.pred aucpext.obs aucpext.pred cl.obs cl.pred mrt.obs mrt.pred ## 1              FALSE       FALSE        FALSE  FALSE   FALSE   FALSE    FALSE ## 2              FALSE       FALSE        FALSE  FALSE   FALSE   FALSE    FALSE ##   mrt.iv.obs mrt.iv.pred mrt.md.obs mrt.md.pred vz.obs vz.pred vss.obs vss.pred ## 1      FALSE       FALSE      FALSE       FALSE  FALSE   FALSE   FALSE    FALSE ## 2      FALSE       FALSE      FALSE       FALSE  FALSE   FALSE   FALSE    FALSE ##   vss.iv.obs vss.iv.pred vss.md.obs vss.md.pred cav.int.inf.obs ## 1      FALSE       FALSE      FALSE       FALSE           FALSE ## 2      FALSE       FALSE      FALSE       FALSE           FALSE ##   cav.int.inf.pred thalf.eff.obs thalf.eff.pred thalf.eff.iv.obs ## 1            FALSE         FALSE          FALSE            FALSE ## 2            FALSE         FALSE          FALSE            FALSE ##   thalf.eff.iv.pred kel.obs kel.pred kel.iv.obs kel.iv.pred auclast.dn ## 1             FALSE   FALSE    FALSE      FALSE       FALSE      FALSE ## 2             FALSE   FALSE    FALSE      FALSE       FALSE      FALSE ##   aucall.dn aucinf.obs.dn aucinf.pred.dn aumclast.dn aumcall.dn aumcinf.obs.dn ## 1     FALSE         FALSE          FALSE       FALSE      FALSE          FALSE ## 2     FALSE         FALSE          FALSE       FALSE      FALSE          FALSE ##   aumcinf.pred.dn cmax.dn cmin.dn clast.obs.dn clast.pred.dn cav.dn ctrough.dn ## 1           FALSE   FALSE   FALSE        FALSE         FALSE  FALSE      FALSE ## 2           FALSE   FALSE   FALSE        FALSE         FALSE  FALSE      FALSE PKNCA.options(default=TRUE)"},{"path":"http://billdenney.github.io/pknca/articles/v01-introduction-and-usage.html","id":"summarization-options-the-pknca-set-summary-function","dir":"Articles","previous_headings":"Options: Make PKNCA Work Your Way","what":"Summarization Options: the PKNCA.set.summary Function","title":"Introduction to PKNCA and Usage Instructions","text":"top methods calculation, summarization method preferences differ. Typical summarization preferences include selection measurement central tendency dispersion, handling missing values, handling values limit quantification, . Beyond method summarization, presentation managed user preferences. Presentation typically controlled rounding either defined number decimal places significant figures. example Cmax may summarized geometric mean geometric CV using three significant figures, summary result requires least half available values present (missing). code set example. Another example Tmax usually summarized median range, measurements often taken minute resolution recorded hours, reporting usually second decimal place. functions default rounding options provided library meet summarization needs, user-supplied function can used rounding. cases multiple parameters may need summary functions (often occurs simulated data). Many parameters can set simultaneously specifying vector names.","code":"PKNCA.set.summary(   name = \"cmax\",   description = \"geometric mean and geometric coefficient of variation\",   point = business.geomean,   spread = business.geocv,   rounding = list(signif=3) ) PKNCA.set.summary(   name = \"tmax\",   description = \"median and range\",   point = business.median,   spread = business.range,   rounding = list(round=2) ) median_na <- function(x) {   median(x, na.rm = TRUE) } quantprob_na <- function(x) {   quantile(x, probs = c(0.05, 0.95), na.rm=TRUE) } PKNCA.set.summary(   name=\"auclast\",   description = \"median and 5th to 95th percentile\",   point=median_na,   spread=quantprob_na,   rounding=list(signif=3) ) median_na <- function(x) {   median(x, na.rm=TRUE) } quantprob_na <- function(x) {   quantile(x, probs=c(0.05, 0.95), na.rm=TRUE) } PKNCA.set.summary(   name=c(\"auclast\", \"cmax\", \"tmax\", \"half.life\", \"aucinf.pred\"),   description = \"median and 5th to 95th percentile\",   point=median_na,   spread=quantprob_na,   rounding=list(signif=3) )"},{"path":"http://billdenney.github.io/pknca/articles/v01-introduction-and-usage.html","id":"grouping-nca-data","dir":"Articles","previous_headings":"","what":"Grouping NCA Data","title":"Introduction to PKNCA and Usage Instructions","text":"described quick start, concentration dose data generally grouped identify separate data. Typical groups concentration data include study, treatment, subject, analyte. Typical groups dose data include study, treatment, subject. default, summaries produced based concentration groups dropping subject (averages taken across subjects within parameters). quick start example can extended include multiple analytes follows. difference /analyte formula element concentration data. reason slash instead plus last element slash assumed subject, noted , subject (default) excluded summary grouping (summaries grouped study, treatment, etc., subject).","code":"## Generate a faux multi-study, multi-analyte dataset. d_conc_parent <- d_conc d_conc_parent$Subject <- as.numeric(as.character(d_conc_parent$Subject)) d_conc_parent$Study <- d_conc_parent$Subject <= 6 d_conc_parent$Analyte <- \"Parent\" d_conc_metabolite <- d_conc_parent d_conc_metabolite$conc <- d_conc_metabolite$conc/2 d_conc_metabolite$Analyte <- \"Metabolite\" d_conc_both <- rbind(d_conc_parent, d_conc_metabolite) d_conc_both <- d_conc_both[with(d_conc_both, order(Study, Subject, Time, Analyte)),] d_dose_both <- d_conc_both[d_conc_both$Time == 0 & d_conc_both$Analyte %in% \"Parent\",                            c(\"Study\", \"Subject\", \"Dose\", \"Time\")]  ## Create a concentration object specifying the concentration, time, ## study, and subject columns.  (Note that any number of grouping ## levels is supporting; you are not restricted to this list.) conc_obj <- PKNCAconc(d_conc_both,                       conc~Time|Study+Subject/Analyte) ## Create a dosing object specifying the dose, time, study, and ## subject columns.  (Note that the grouping factors should be a ## subset of the grouping factors for concentration, and the columns ## must have the same names between concentration and dose objects.) dose_obj <- PKNCAdose(d_dose_both,                      Dose~Time|Study+Subject)  # Perform and summarize the PK data as previously described data_obj <- PKNCAdata(conc_obj, dose_obj) results_obj <- pk.nca(data_obj) summary(results_obj)"},{"path":"http://billdenney.github.io/pknca/articles/v01-introduction-and-usage.html","id":"selecting-calculation-intervals","dir":"Articles","previous_headings":"","what":"Selecting Calculation Intervals","title":"Introduction to PKNCA and Usage Instructions","text":"NCA calculations require interval calculated. concentration dosing information combined PKNCAdata object, intervals automatically determined. exception automatic determination user provides intervals. selected either automatically manually, intervals define minimum start time, end time, parameters calculated. parameter list available get.interval.cols function. parameters requested specified setting entry data.frame requested. Intervals like sufficient designs single type treatment– like single doses. complex treatments single analysis, like combination single multiple doses, include treatment column matching treatment column name concentration data set. See Manual Interval Specification section details.","code":"intervals <-   data.frame(     start=0, end=c(24, Inf),     cmax=c(FALSE, TRUE),     tmax=c(FALSE, TRUE),     auclast=TRUE,     aucinf.obs=c(FALSE, TRUE)   )"},{"path":"http://billdenney.github.io/pknca/articles/v01-introduction-and-usage.html","id":"selection-of-data-used-for-calculation","dir":"Articles","previous_headings":"Selecting Calculation Intervals","what":"Selection of Data Used for Calculation","title":"Introduction to PKNCA and Usage Instructions","text":"choosing data used calculation, PKNCA never look beyond data specified group interval. Groups defined call PKNCAconc function, typically define measurement single analyte single individual receiving single treatment. Intervals subsets within group start end time. PKNCA never examines data outside group interval standard NCA calculations. example, data 0 48 hours interval set start 0 end 24 calculation aucinf.obs, data 24 hours used half-life AUCinf calculations. functions look data outside single interval, functions look data outside single group, functions typically used preparation NCA calculations calculations . Functions look group whole include choose.auc.intervals, find.tau, pk.tss.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v01-introduction-and-usage.html","id":"automatic-interval-determination","dir":"Articles","previous_headings":"Selecting Calculation Intervals","what":"Automatic Interval Determination","title":"Introduction to PKNCA and Usage Instructions","text":"intervals specified combining concentration dosing data, automatically found concentration dosing data. Single dose data simple interval selection: option single.dose.aucs used PKNCA.options. multiple-dose studies, PKNCA selects one group time compares concentration dosing times. concentration measurement doses, interval row added. dosing interval (\\(\\tau\\)) determined looking pattern repeats within dosing data using find.tau function. finding \\(\\tau\\), PKNCA also look last dose (beginning last dosing interval), two additional intervals may added: one interval dosing interval beginning last dosing interval (concentrations measured interval) one interval half-life last dosing interval (concentration \\(\\tau\\) beginning last interval). One consequence automatic interval selection many rows generated intervals; one row generated per interval per subject. benefit method producing large number rows fully flexible actual study results. subject different schedule others treatment (e.g. measurements nominally scheduled day 14 occurred day 13), differences found.","code":"## find.tau can work when all doses have the same interval... dose_times <- seq(0, 168, by=24) print(dose_times) ## [1]   0  24  48  72  96 120 144 168 PKNCA::find.tau(dose_times) ## [1] 24 ## or when the doses have mixed intervals (10 and 24 hours). dose_times <- sort(c(seq(0, 168, by=24),                      seq(10, 178, by=24))) print(dose_times) ##  [1]   0  10  24  34  48  58  72  82  96 106 120 130 144 154 168 178 PKNCA::find.tau(dose_times) ## [1] 24"},{"path":"http://billdenney.github.io/pknca/articles/v01-introduction-and-usage.html","id":"manual-interval-specification","dir":"Articles","previous_headings":"Selecting Calculation Intervals","what":"Manual Interval Specification","title":"Introduction to PKNCA and Usage Instructions","text":"Intervals can also specified manually. Two use cases common manual specification: fully manual (never requesting automatic intervals) updating automatic intervals. Fully manual intervals can specified providing PKNCAdata call. update automatically-selected intervals, extract intervals, modify , put back.","code":"intervals_manual <-   data.frame(     start=0, end=c(24, Inf),     cmax=c(FALSE, TRUE),     tmax=c(FALSE, TRUE),     auclast=TRUE,     aucinf.obs=c(FALSE, TRUE)   ) data_obj <-   PKNCAdata(     conc_obj, dose_obj,      intervals=intervals_manual   ) data_obj <- PKNCAdata(conc_obj, dose_obj) intervals_manual <- data_obj$intervals intervals_manual$aucinf.obs[1] <- TRUE data_obj$intervals <- intervals_manual"},{"path":"http://billdenney.github.io/pknca/articles/v01-introduction-and-usage.html","id":"keeping-a-column-from-intervals","dir":"Articles","previous_headings":"Selecting Calculation Intervals","what":"Keeping a column from intervals","title":"Introduction to PKNCA and Usage Instructions","text":"computing NCA using actual times, grouping start end time summaries (see layer) less helpful everyone different start end times. , may keep interval columns using option \"keep_interval_cols\" follows (“dosetype” must column name intervals):","code":"data_obj <- PKNCAdata(conc_obj, dose_obj, options = list(keep_interval_cols = \"dosetype\"))"},{"path":"http://billdenney.github.io/pknca/articles/v01-introduction-and-usage.html","id":"summarizing-results","dir":"Articles","previous_headings":"","what":"Summarizing results","title":"Introduction to PKNCA and Usage Instructions","text":"NCA calculated, can summarize results summary() function. default, count number unique subjects (N) summary, number subjects differs number measurements included summary (n), summarize n given parameters. Note counting “n” includes non-missing values excluded summarization; included zeros e.g. excluded geometric statistics. Edge cases like two unique subjects one excluded value one duplicated values (N = 2 n = 2 even though measurements come single subject) handled user.","code":"summary(o_nca)"},{"path":"http://billdenney.github.io/pknca/articles/v02-example-theophylline.html","id":"load-the-data","dir":"Articles","previous_headings":"","what":"Load the data","title":"Computing NCA Parameters for Theophylline","text":"columns interested analysis conc, Time, Subject concentration data set Dose, Time, Subject dosing data set. Example dosing data extracted theophylline data set","code":"## It is always a good idea to look at the data knitr::kable(head(datasets::Theoph)) ## By default it is groupedData; convert it to a data frame for use conc_obj <- PKNCAconc(as.data.frame(datasets::Theoph), conc~Time|Subject)  ## Dosing data needs to only have one row per dose, so subset for ## that first. d_dose <- unique(datasets::Theoph[datasets::Theoph$Time == 0,                                   c(\"Dose\", \"Time\", \"Subject\")]) knitr::kable(d_dose,              caption=\"Example dosing data extracted from theophylline data set\") dose_obj <- PKNCAdose(d_dose, Dose~Time|Subject)"},{"path":"http://billdenney.github.io/pknca/articles/v02-example-theophylline.html","id":"merge-the-concentration-and-dose","dir":"Articles","previous_headings":"","what":"Merge the Concentration and Dose","title":"Computing NCA Parameters for Theophylline","text":"loading data, must combined prepare parameter calculation. Intervals calculation automatically selected based single.dose.aucs setting PKNCA.options Intervals calculation can also specified manually. Manual specification requires least columns start time, end time, parameters requested. manual specification can also include grouping factors concentration data set. Column order intervals important. intervals manually specified, expanded full interval set added PKNCAdata object (words, column created parameter. Also, PKNCA automatically calculates parameters required NCA, lambda.z required calculating AUC0-\\(\\infty\\), specify parameters requested.","code":"data_obj_automatic <- PKNCAdata(conc_obj, dose_obj) knitr::kable(PKNCA.options(\"single.dose.aucs\")) knitr::kable(data_obj_automatic$intervals) intervals_manual <- data.frame(start=0,                                end=Inf,                                cmax=TRUE,                                tmax=TRUE,                                aucinf.obs=TRUE,                                auclast=TRUE) data_obj_manual <- PKNCAdata(conc_obj, dose_obj,                              intervals=intervals_manual) knitr::kable(data_obj_manual$intervals)"},{"path":"http://billdenney.github.io/pknca/articles/v02-example-theophylline.html","id":"compute-the-parameters","dir":"Articles","previous_headings":"","what":"Compute the parameters","title":"Computing NCA Parameters for Theophylline","text":"Parameter calculation automatically split data grouping factor(s), subset interval, calculate required parameters, record options used calculations, include data provenance show calculation performed described. , just call pk.nca function PKNCAdata object.","code":"results_obj_automatic <- pk.nca(data_obj_automatic) knitr::kable(head(as.data.frame(results_obj_automatic))) summary(results_obj_automatic) results_obj_manual <- pk.nca(data_obj_manual) knitr::kable(head(as.data.frame(results_obj_manual))) summary(results_obj_manual)"},{"path":"http://billdenney.github.io/pknca/articles/v02-example-theophylline.html","id":"multiple-dose-example","dir":"Articles","previous_headings":"","what":"Multiple Dose Example","title":"Computing NCA Parameters for Theophylline","text":"Assessing multiple dose pharmacokinetics conceptually single-dose PKNCA. assess multiple dose PK, theophylline data extended single multiple doses using superposition (see superposition vignette information). superposition-simulated scenario especially realistic includes dense sampling every day. scenario, intervals automatically selected interval every subject every day. realistic scenario, dense PK sampling occurs every subject first last days. select intervals manually, specify intervals interest intervals argument PKNCAdata function call. intervals automatically expanded calculate anything requested. data ready, calculations summary can progress.","code":"d_conc <- PKNCAconc(as.data.frame(Theoph), conc~Time|Subject) conc_obj_multi <-   PKNCAconc(     superposition(d_conc,                   tau=168,                   dose.times=seq(0, 144, by=24),                   n.tau=1,                   check.blq=FALSE),     conc~time|Subject) conc_obj_multi ## Formula for concentration: ##  conc ~ time | Subject ## Data are dense PK. ## With 12 subjects defined in the 'Subject' column. ## Nominal time column is not specified. ##  ## First 6 rows of concentration data: ##  Subject     conc time exclude volume duration ##        1  0.74000 0.00    <NA>     NA        0 ##        1  2.84000 0.25    <NA>     NA        0 ##        1  4.23875 0.37    <NA>     NA        0 ##        1  6.57000 0.57    <NA>     NA        0 ##        1 10.50000 1.12    <NA>     NA        0 ##        1  9.66000 2.02    <NA>     NA        0 dose_obj_multi <- PKNCAdose(expand.grid(Subject=unique(as.data.frame(conc_obj_multi)$Subject),                                       time=seq(0, 144, by=24)),                           ~time|Subject) dose_obj_multi ## Formula for dosing: ##  ~time | Subject ## Nominal time column is not specified. ##  ## First 6 rows of dosing data: ##  Subject time exclude         route duration ##        1    0    <NA> extravascular        0 ##        2    0    <NA> extravascular        0 ##        3    0    <NA> extravascular        0 ##        4    0    <NA> extravascular        0 ##        5    0    <NA> extravascular        0 ##        6    0    <NA> extravascular        0 data_obj <- PKNCAdata(conc_obj_multi, dose_obj_multi) data_obj$intervals[,c(\"Subject\", \"start\", \"end\")] ## # A tibble: 84 × 3 ##    Subject start   end ##    <ord>   <dbl> <dbl> ##  1 1           0    24 ##  2 1          24    48 ##  3 1          48    72 ##  4 1          72    96 ##  5 1          96   120 ##  6 1         120   144 ##  7 1         144   168 ##  8 2           0    24 ##  9 2          24    48 ## 10 2          48    72 ## # ℹ 74 more rows intervals_manual <- data.frame(start=c(0, 144),                                end=c(24, 168),                                cmax=TRUE,                                auclast=TRUE) data_obj <- PKNCAdata(conc_obj_multi, dose_obj_multi,                       intervals=intervals_manual) data_obj$intervals ##   start end auclast aucall aumclast aumcall aucint.last aucint.last.dose ## 1     0  24    TRUE  FALSE    FALSE   FALSE       FALSE            FALSE ## 2   144 168    TRUE  FALSE    FALSE   FALSE       FALSE            FALSE ##   aucint.all aucint.all.dose    c0 cmax  cmin  tmax tlast tfirst clast.obs ## 1      FALSE           FALSE FALSE TRUE FALSE FALSE FALSE  FALSE     FALSE ## 2      FALSE           FALSE FALSE TRUE FALSE FALSE FALSE  FALSE     FALSE ##   cl.last cl.all     f mrt.last mrt.iv.last vss.last vss.iv.last   cav ## 1   FALSE  FALSE FALSE    FALSE       FALSE    FALSE       FALSE FALSE ## 2   FALSE  FALSE FALSE    FALSE       FALSE    FALSE       FALSE FALSE ##   cav.int.last cav.int.all ctrough cstart   ptr  tlag deg.fluc swing  ceoi ## 1        FALSE       FALSE   FALSE  FALSE FALSE FALSE    FALSE FALSE FALSE ## 2        FALSE       FALSE   FALSE  FALSE FALSE FALSE    FALSE FALSE FALSE ##   aucabove.predose.all aucabove.trough.all count_conc totdose    ae clr.last ## 1                FALSE               FALSE      FALSE   FALSE FALSE    FALSE ## 2                FALSE               FALSE      FALSE   FALSE FALSE    FALSE ##   clr.obs clr.pred    fe sparse_auclast sparse_auc_se sparse_auc_df time_above ## 1   FALSE    FALSE FALSE          FALSE         FALSE         FALSE      FALSE ## 2   FALSE    FALSE FALSE          FALSE         FALSE         FALSE      FALSE ##   aucivlast aucivall aucivint.last aucivint.all aucivpbextlast aucivpbextall ## 1     FALSE    FALSE         FALSE        FALSE          FALSE         FALSE ## 2     FALSE    FALSE         FALSE        FALSE          FALSE         FALSE ##   aucivpbextint.last aucivpbextint.all half.life r.squared adj.r.squared ## 1              FALSE             FALSE     FALSE     FALSE         FALSE ## 2              FALSE             FALSE     FALSE     FALSE         FALSE ##   lambda.z lambda.z.time.first lambda.z.n.points clast.pred span.ratio ## 1    FALSE               FALSE             FALSE      FALSE      FALSE ## 2    FALSE               FALSE             FALSE      FALSE      FALSE ##   thalf.eff.last thalf.eff.iv.last kel.last kel.iv.last aucinf.obs aucinf.pred ## 1          FALSE             FALSE    FALSE       FALSE      FALSE       FALSE ## 2          FALSE             FALSE    FALSE       FALSE      FALSE       FALSE ##   aumcinf.obs aumcinf.pred aucint.inf.obs aucint.inf.obs.dose aucint.inf.pred ## 1       FALSE        FALSE          FALSE               FALSE           FALSE ## 2       FALSE        FALSE          FALSE               FALSE           FALSE ##   aucint.inf.pred.dose aucivinf.obs aucivinf.pred aucivpbextinf.obs ## 1                FALSE        FALSE         FALSE             FALSE ## 2                FALSE        FALSE         FALSE             FALSE ##   aucivpbextinf.pred aucpext.obs aucpext.pred cl.obs cl.pred mrt.obs mrt.pred ## 1              FALSE       FALSE        FALSE  FALSE   FALSE   FALSE    FALSE ## 2              FALSE       FALSE        FALSE  FALSE   FALSE   FALSE    FALSE ##   mrt.iv.obs mrt.iv.pred mrt.md.obs mrt.md.pred vz.obs vz.pred vss.obs vss.pred ## 1      FALSE       FALSE      FALSE       FALSE  FALSE   FALSE   FALSE    FALSE ## 2      FALSE       FALSE      FALSE       FALSE  FALSE   FALSE   FALSE    FALSE ##   vss.iv.obs vss.iv.pred vss.md.obs vss.md.pred cav.int.inf.obs ## 1      FALSE       FALSE      FALSE       FALSE           FALSE ## 2      FALSE       FALSE      FALSE       FALSE           FALSE ##   cav.int.inf.pred thalf.eff.obs thalf.eff.pred thalf.eff.iv.obs ## 1            FALSE         FALSE          FALSE            FALSE ## 2            FALSE         FALSE          FALSE            FALSE ##   thalf.eff.iv.pred kel.obs kel.pred kel.iv.obs kel.iv.pred auclast.dn ## 1             FALSE   FALSE    FALSE      FALSE       FALSE      FALSE ## 2             FALSE   FALSE    FALSE      FALSE       FALSE      FALSE ##   aucall.dn aucinf.obs.dn aucinf.pred.dn aumclast.dn aumcall.dn aumcinf.obs.dn ## 1     FALSE         FALSE          FALSE       FALSE      FALSE          FALSE ## 2     FALSE         FALSE          FALSE       FALSE      FALSE          FALSE ##   aumcinf.pred.dn cmax.dn cmin.dn clast.obs.dn clast.pred.dn cav.dn ctrough.dn ## 1           FALSE   FALSE   FALSE        FALSE         FALSE  FALSE      FALSE ## 2           FALSE   FALSE   FALSE        FALSE         FALSE  FALSE      FALSE results_obj <- pk.nca(data_obj) print(results_obj) ## $result ## # A tibble: 48 × 6 ##    Subject start   end PPTESTCD PPORRES exclude ##    <ord>   <dbl> <dbl> <chr>      <dbl> <chr>   ##  1 6           0    24 auclast    71.8  NA      ##  2 6           0    24 cmax        6.44 NA      ##  3 6         144   168 auclast    82.2  NA      ##  4 6         144   168 cmax        7.37 NA      ##  5 7           0    24 auclast    89.0  NA      ##  6 7           0    24 cmax        7.09 NA      ##  7 7         144   168 auclast   101.   NA      ##  8 7         144   168 cmax        8.07 NA      ##  9 8           0    24 auclast    86.7  NA      ## 10 8           0    24 cmax        7.56 NA      ## # ℹ 38 more rows ##  ## $data ## Formula for concentration: ##  conc ~ time | Subject ## Data are dense PK. ## With 12 subjects defined in the 'Subject' column. ## Nominal time column is not specified. ##  ## First 6 rows of concentration data: ##  Subject     conc time exclude volume duration ##        1  0.74000 0.00    <NA>     NA        0 ##        1  2.84000 0.25    <NA>     NA        0 ##        1  4.23875 0.37    <NA>     NA        0 ##        1  6.57000 0.57    <NA>     NA        0 ##        1 10.50000 1.12    <NA>     NA        0 ##        1  9.66000 2.02    <NA>     NA        0 ## Formula for dosing: ##  ~time | Subject ## Nominal time column is not specified. ##  ## First 6 rows of dosing data: ##  Subject time exclude         route duration ##        1    0    <NA> extravascular        0 ##        2    0    <NA> extravascular        0 ##        3    0    <NA> extravascular        0 ##        4    0    <NA> extravascular        0 ##        5    0    <NA> extravascular        0 ##        6    0    <NA> extravascular        0 ##  ## With 2 rows of interval specifications. ## With imputation: NA ## Options changed from default are: ## $adj.r.squared.factor ## [1] 1e-04 ##  ## $max.missing ## [1] 0.5 ##  ## $auc.method ## [1] \"lin up/log down\" ##  ## $conc.na ## [1] \"drop\" ##  ## $conc.blq ## $conc.blq$first ## [1] \"keep\" ##  ## $conc.blq$middle ## [1] \"drop\" ##  ## $conc.blq$last ## [1] \"keep\" ##  ##  ## $first.tmax ## [1] TRUE ##  ## $allow.tmax.in.half.life ## [1] FALSE ##  ## $keep_interval_cols ## NULL ##  ## $min.hl.points ## [1] 3 ##  ## $min.span.ratio ## [1] 2 ##  ## $max.aucinf.pext ## [1] 20 ##  ## $min.hl.r.squared ## [1] 0.9 ##  ## $progress ## [1] TRUE ##  ## $tau.choices ## [1] NA ##  ## $single.dose.aucs ##   start end auclast aucall aumclast aumcall aucint.last aucint.last.dose ## 1     0  24    TRUE  FALSE    FALSE   FALSE       FALSE            FALSE ## 2     0 Inf   FALSE  FALSE    FALSE   FALSE       FALSE            FALSE ##   aucint.all aucint.all.dose    c0  cmax  cmin  tmax tlast tfirst clast.obs ## 1      FALSE           FALSE FALSE FALSE FALSE FALSE FALSE  FALSE     FALSE ## 2      FALSE           FALSE FALSE  TRUE FALSE  TRUE FALSE  FALSE     FALSE ##   cl.last cl.all     f mrt.last mrt.iv.last vss.last vss.iv.last   cav ## 1   FALSE  FALSE FALSE    FALSE       FALSE    FALSE       FALSE FALSE ## 2   FALSE  FALSE FALSE    FALSE       FALSE    FALSE       FALSE FALSE ##   cav.int.last cav.int.all ctrough cstart   ptr  tlag deg.fluc swing  ceoi ## 1        FALSE       FALSE   FALSE  FALSE FALSE FALSE    FALSE FALSE FALSE ## 2        FALSE       FALSE   FALSE  FALSE FALSE FALSE    FALSE FALSE FALSE ##   aucabove.predose.all aucabove.trough.all count_conc totdose    ae clr.last ## 1                FALSE               FALSE      FALSE   FALSE FALSE    FALSE ## 2                FALSE               FALSE      FALSE   FALSE FALSE    FALSE ##   clr.obs clr.pred    fe sparse_auclast sparse_auc_se sparse_auc_df time_above ## 1   FALSE    FALSE FALSE          FALSE         FALSE         FALSE      FALSE ## 2   FALSE    FALSE FALSE          FALSE         FALSE         FALSE      FALSE ##   aucivlast aucivall aucivint.last aucivint.all aucivpbextlast aucivpbextall ## 1     FALSE    FALSE         FALSE        FALSE          FALSE         FALSE ## 2     FALSE    FALSE         FALSE        FALSE          FALSE         FALSE ##   aucivpbextint.last aucivpbextint.all half.life r.squared adj.r.squared ## 1              FALSE             FALSE     FALSE     FALSE         FALSE ## 2              FALSE             FALSE      TRUE     FALSE         FALSE ##   lambda.z lambda.z.time.first lambda.z.n.points clast.pred span.ratio ## 1    FALSE               FALSE             FALSE      FALSE      FALSE ## 2    FALSE               FALSE             FALSE      FALSE      FALSE ##   thalf.eff.last thalf.eff.iv.last kel.last kel.iv.last aucinf.obs aucinf.pred ## 1          FALSE             FALSE    FALSE       FALSE      FALSE       FALSE ## 2          FALSE             FALSE    FALSE       FALSE       TRUE       FALSE ##   aumcinf.obs aumcinf.pred aucint.inf.obs aucint.inf.obs.dose aucint.inf.pred ## 1       FALSE        FALSE          FALSE               FALSE           FALSE ## 2       FALSE        FALSE          FALSE               FALSE           FALSE ##   aucint.inf.pred.dose aucivinf.obs aucivinf.pred aucivpbextinf.obs ## 1                FALSE        FALSE         FALSE             FALSE ## 2                FALSE        FALSE         FALSE             FALSE ##   aucivpbextinf.pred aucpext.obs aucpext.pred cl.obs cl.pred mrt.obs mrt.pred ## 1              FALSE       FALSE        FALSE  FALSE   FALSE   FALSE    FALSE ## 2              FALSE       FALSE        FALSE  FALSE   FALSE   FALSE    FALSE ##   mrt.iv.obs mrt.iv.pred mrt.md.obs mrt.md.pred vz.obs vz.pred vss.obs vss.pred ## 1      FALSE       FALSE      FALSE       FALSE  FALSE   FALSE   FALSE    FALSE ## 2      FALSE       FALSE      FALSE       FALSE  FALSE   FALSE   FALSE    FALSE ##   vss.iv.obs vss.iv.pred vss.md.obs vss.md.pred cav.int.inf.obs ## 1      FALSE       FALSE      FALSE       FALSE           FALSE ## 2      FALSE       FALSE      FALSE       FALSE           FALSE ##   cav.int.inf.pred thalf.eff.obs thalf.eff.pred thalf.eff.iv.obs ## 1            FALSE         FALSE          FALSE            FALSE ## 2            FALSE         FALSE          FALSE            FALSE ##   thalf.eff.iv.pred kel.obs kel.pred kel.iv.obs kel.iv.pred auclast.dn ## 1             FALSE   FALSE    FALSE      FALSE       FALSE      FALSE ## 2             FALSE   FALSE    FALSE      FALSE       FALSE      FALSE ##   aucall.dn aucinf.obs.dn aucinf.pred.dn aumclast.dn aumcall.dn aumcinf.obs.dn ## 1     FALSE         FALSE          FALSE       FALSE      FALSE          FALSE ## 2     FALSE         FALSE          FALSE       FALSE      FALSE          FALSE ##   aumcinf.pred.dn cmax.dn cmin.dn clast.obs.dn clast.pred.dn cav.dn ctrough.dn ## 1           FALSE   FALSE   FALSE        FALSE         FALSE  FALSE      FALSE ## 2           FALSE   FALSE   FALSE        FALSE         FALSE  FALSE      FALSE ##  ##  ## $columns ## $columns$exclude ## [1] \"exclude\" ##  ##  ## attr(,\"class\") ## [1] \"PKNCAresults\" \"list\"         ## attr(,\"provenance\") ## Provenance hash ee687a520af821aa354fef62aa53cba0 generated on 2024-06-28 12:08:01.681429 with R version 4.4.1 (2024-06-14). summary(results_obj) ##  start end  N     auclast        cmax ##      0  24 12 98.8 [23.0] 8.65 [17.0] ##    144 168 12  115 [28.4] 10.0 [21.0] ##  ## Caption: auclast, cmax: geometric mean and geometric coefficient of variation; N: number of subjects"},{"path":"http://billdenney.github.io/pknca/articles/v03-selection-of-calculation-intervals.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Selection of Calculation Intervals","text":"PKNCA considers two types data grouping within data sets: group interval. group typically identifies single subject given single intervention type (“treatment”) single analyte. interval subsets group times within group, primary noncompartmental analysis (NCA) calculations performed within interval. concrete example, consider figure shows concentration-time profile study subject multiple-dose study. group points figure, interval last day (144 168 hr) area blue shading.","code":"## Formula for concentration: ##  conc ~ time | treatment + ID ## Data are dense PK. ## With 1 subjects defined in the 'ID' column. ## Nominal time column is not specified. ##  ## First 6 rows of concentration data: ##    study treatment ID time      conc   analyte exclude volume duration ##  Study 1     Trt 1  1    0 0.0000000 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    1 0.6140526 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    2 0.8100022 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    4 0.8425422 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    6 0.7771994 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    8 0.7052469 Analyte 1    <NA>     NA        0 # Plot the concentration-time data and the interval ggplot(d_conc_multi, aes(x=time, y=conc)) +   geom_ribbon(data=d_conc_multi[d_conc_multi$time >= 144,],               aes(ymax=conc, ymin=0),               fill=\"skyblue\") +   geom_point() + geom_line() +   scale_x_continuous(breaks=seq(0, 168, by=12)) +   scale_y_continuous(limits=c(0, NA)) +   labs(x=\"Time Since First Dose (hr)\",        y=\"Concentration\\n(arbitrary units)\") intervals_manual <- data.frame(start=144, end=168, auclast=TRUE) knitr::kable(intervals_manual) PKNCAdata(d_conc, intervals=intervals_manual) ## Formula for concentration: ##  conc ~ time | treatment + ID ## Data are dense PK. ## With 1 subjects defined in the 'ID' column. ## Nominal time column is not specified. ##  ## First 6 rows of concentration data: ##    study treatment ID time      conc   analyte exclude volume duration ##  Study 1     Trt 1  1    0 0.0000000 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    1 0.6140526 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    2 0.8100022 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    4 0.8425422 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    6 0.7771994 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    8 0.7052469 Analyte 1    <NA>     NA        0 ## No dosing information. ##  ## With 1 rows of interval specifications. ## With imputation: NA ## No options are set differently than default."},{"path":"http://billdenney.github.io/pknca/articles/v03-selection-of-calculation-intervals.html","id":"group-matching","dir":"Articles","previous_headings":"","what":"Group Matching","title":"Selection of Calculation Intervals","text":"Group matching occurs matching overlapping column names groups interval data.frame. (Note grouping columns word start, end, share name NCA parameter.)","code":""},{"path":"http://billdenney.github.io/pknca/articles/v03-selection-of-calculation-intervals.html","id":"selecting-the-subjects-for-an-interval","dir":"Articles","previous_headings":"Group Matching","what":"Selecting the Subjects for an Interval","title":"Selection of Calculation Intervals","text":"groups interval prepare summarization. Typically groups take structure similar preferred summarization structure groups nested logical method summary. example, group structure may : study, treatment, day, analyte, subject. grouping names interval must subset grouping names used concentration data. matching occurs available columns, grouping columns names required level specificity calculations desired. example, want AUCinf,obs subjects received single doses AUClast days 1 (0 24 hours) 10 (216 240 hours) subjects received multiple doses, treatment defined “Drug 1 Single” “Drug 1 Multiple”, intervals defined .","code":"intervals_manual <-   data.frame(     treatment=c(\"Drug 1 Single\", \"Drug 1 Multiple\", \"Drug 1 Multiple\"),     start=c(0, 0, 216),     end=c(Inf, 24, 240),     aucinf.obs=c(TRUE, FALSE, FALSE),     auclast=c(FALSE, TRUE, TRUE)   ) knitr::kable(intervals_manual)"},{"path":"http://billdenney.github.io/pknca/articles/v03-selection-of-calculation-intervals.html","id":"intervals","dir":"Articles","previous_headings":"","what":"Intervals","title":"Selection of Calculation Intervals","text":"Intervals defined data.frames one row per interval, zero columns match groups PKNCAdata object, one NCA parameters calculate. Selection points within interval occurs choosing point start end.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v03-selection-of-calculation-intervals.html","id":"to-infinity","dir":"Articles","previous_headings":"Intervals","what":"To Infinity","title":"Selection of Calculation Intervals","text":"end interval may infinity. interval infinity works interval points selected start end interval. Selecting Inf value maximum time yields difference effect, Inf simpler scripting ensure points selected.","code":"## Formula for concentration: ##  conc ~ time | treatment + ID ## Data are dense PK. ## With 1 subjects defined in the 'ID' column. ## Nominal time column is not specified. ##  ## First 6 rows of concentration data: ##    study treatment ID time      conc   analyte exclude volume duration ##  Study 1     Trt 1  1    0 0.0000000 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    1 0.6140526 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    2 0.8100022 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    4 0.8425422 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    6 0.7771994 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    8 0.7052469 Analyte 1    <NA>     NA        0 # Use superposition to simulate multiple doses ggplot(as.data.frame(d_conc)[as.data.frame(d_conc)$time <= 48,], aes(x=time, y=conc)) +   geom_ribbon(data=as.data.frame(d_conc),               aes(ymax=conc, ymin=0),               fill=\"skyblue\") +   geom_point() + geom_line() +   scale_x_continuous(breaks=seq(0, 72, by=12)) +   scale_y_continuous(limits=c(0, NA)) +   labs(x=\"Time Since First Dose (hr)\",        y=\"Concentration\\n(arbitrary units)\") intervals_manual <-   data.frame(     start=0,     end=Inf,     auclast=TRUE,     aucinf.obs=TRUE   ) print(intervals_manual) ##   start end auclast aucinf.obs ## 1     0 Inf    TRUE       TRUE my.data <- PKNCAdata(d_conc, intervals=intervals_manual)"},{"path":"http://billdenney.github.io/pknca/articles/v03-selection-of-calculation-intervals.html","id":"multiple-intervals","dir":"Articles","previous_headings":"Intervals","what":"Multiple Intervals","title":"Selection of Calculation Intervals","text":"one interval may specified subject group subjects providing one row interval specifications. figure , blue green shaded regions indicate first second rows intervals, respectively.","code":"## Formula for concentration: ##  conc ~ time | treatment + ID ## Data are dense PK. ## With 1 subjects defined in the 'ID' column. ## Nominal time column is not specified. ##  ## First 6 rows of concentration data: ##    study treatment ID time      conc   analyte exclude volume duration ##  Study 1     Trt 1  1    0 0.0000000 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    1 0.6140526 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    2 0.8100022 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    4 0.8425422 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    6 0.7771994 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    8 0.7052469 Analyte 1    <NA>     NA        0 # Plot the concentration-time data and the interval ggplot(d_conc_multi, aes(x=time, y=conc)) +   geom_ribbon(data=d_conc_multi[d_conc_multi$time <= 24,],               aes(ymax=conc, ymin=0),               fill=\"skyblue\") +   geom_ribbon(data=d_conc_multi[d_conc_multi$time >= 144,],               aes(ymax=conc, ymin=0),               fill=\"lightgreen\") +   geom_point() + geom_line() +   scale_x_continuous(breaks=seq(0, 168, by=12)) +   scale_y_continuous(limits=c(0, NA)) +   labs(x=\"Time Since First Dose (hr)\",        y=\"Concentration\\n(arbitrary units)\") intervals_manual <-   data.frame(     start=c(0, 144),     end=c(24, 168),     auclast=TRUE   ) knitr::kable(intervals_manual) my.data <- PKNCAdata(d_conc, intervals=intervals_manual)"},{"path":"http://billdenney.github.io/pknca/articles/v03-selection-of-calculation-intervals.html","id":"overlapping-intervals-and-different-calculations-by-interval","dir":"Articles","previous_headings":"","what":"Overlapping Intervals and Different Calculations by Interval","title":"Selection of Calculation Intervals","text":"scenarios, multiple intervals may needed intervals overlap. issue interval specification two rows overlapping times; rows considered separately. example , 0-24 interval shared first second (shaded blue-green). example overlapping intervals also illustrates different calculations can performed different intervals. case, auclast calculated intervals aucinf.obs calculated 0-Inf interval.","code":"## Formula for concentration: ##  conc ~ time | treatment + ID ## Data are dense PK. ## With 1 subjects defined in the 'ID' column. ## Nominal time column is not specified. ##  ## First 6 rows of concentration data: ##    study treatment ID time      conc   analyte exclude volume duration ##  Study 1     Trt 1  1    0 0.0000000 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    1 0.6140526 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    2 0.8100022 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    4 0.8425422 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    6 0.7771994 Analyte 1    <NA>     NA        0 ##  Study 1     Trt 1  1    8 0.7052469 Analyte 1    <NA>     NA        0 # Use superposition to simulate multiple doses ggplot(as.data.frame(d_conc), aes(x=time, y=conc)) +   geom_ribbon(data=as.data.frame(d_conc),               aes(ymax=conc, ymin=0),               fill=\"lightgreen\",               alpha=0.5) +   geom_ribbon(data=as.data.frame(d_conc)[as.data.frame(d_conc)$time <= 24,],               aes(ymax=conc, ymin=0),               fill=\"skyblue\",               alpha=0.5) +   geom_point() + geom_line() +   scale_x_continuous(breaks=seq(0, 168, by=12)) +   scale_y_continuous(limits=c(0, NA)) +   labs(x=\"Time Since First Dose (hr)\",        y=\"Concentration\\n(arbitrary units)\") intervals_manual <-   data.frame(     start=0,     end=c(24, Inf),     auclast=TRUE,     aucinf.obs=c(FALSE, TRUE)   ) knitr::kable(intervals_manual) my.data <- PKNCAdata(d_conc, intervals=intervals_manual)"},{"path":"http://billdenney.github.io/pknca/articles/v03-selection-of-calculation-intervals.html","id":"intervals-with-duration","dir":"Articles","previous_headings":"","what":"Intervals with Duration","title":"Selection of Calculation Intervals","text":"events durations times rather instants time associated . Two typical examples duration data NCA intravenous infusions urine fecal sample collections. Inform PKNCA durations duration argument PKNCAdose PKNCAconc functions. Durations data selected based beginning ending duration existing within interval.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v03-selection-of-calculation-intervals.html","id":"parameters-available-for-calculation-in-an-interval","dir":"Articles","previous_headings":"","what":"Parameters Available for Calculation in an Interval","title":"Selection of Calculation Intervals","text":"following parameters available interval. information parameter, see documentation function.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v04-sparse.html","id":"sparse-nca-calculations","dir":"Articles","previous_headings":"","what":"Sparse NCA Calculations","title":"Sparse NCA Calculations","text":"Sparse noncompartmental analysis (NCA) performed multiple individuals contribute single concentration-time profile due fact one subset full profile samples taken per animal. typical example three mice PK drawn per time point, animals one sample drawn. Another typical example animals may two three samples interval, animal full profile.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v04-sparse.html","id":"sparse-nca-setup","dir":"Articles","previous_headings":"Sparse NCA Calculations","what":"Sparse NCA Setup","title":"Sparse NCA Calculations","text":"Sparse NCA setup similarly normal, dense PK sampling setup PKNCA. difference give sparse option PKNCAconc(), interval calculations, request sparse variants parameters. writing vignette, sparse parameter calculation sparse_auclast. non-sparse parameters calculated based mean profile animals group. example uses data extracted Holder D. J., Hsuan F., Dixit R. Soper K. (1999). method estimating testing area curve serial sacrifice, batch, complete data designs. Journal Biopharmaceutical Statistics, 9(3):451-464. Look data. (technically required step, ’s good practice.)","code":"# Setup the data d_sparse <-     data.frame(       id = c(1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 4L, 5L, 6L, 4L, 5L, 6L, 7L, 8L, 9L, 7L, 8L, 9L),       conc = c(0, 0, 0,  1.75, 2.2, 1.58, 4.63, 2.99, 1.52, 3.03, 1.98, 2.22, 3.34, 1.3, 1.22, 3.54, 2.84, 2.55, 0.3, 0.0421, 0.231),       time = c(0, 0, 0, 1, 1, 1, 6, 6, 6, 2, 2, 2, 10, 10, 10, 4, 4, 4, 24, 24, 24),       dose = c(100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100)     ) library(ggplot2) ggplot(d_sparse, aes(x=time, y=conc, group=id)) +   geom_point() +   geom_line() +   scale_x_continuous(breaks=seq(0, 24, by=6))"},{"path":"http://billdenney.github.io/pknca/articles/v04-sparse.html","id":"data-setup-note","dir":"Articles","previous_headings":"Sparse NCA Calculations","what":"Data Setup Note","title":"Sparse NCA Calculations","text":"Sparse NCA requires subject numbers (animal numbers) given, even subject contributes single sample. reason requirement subject contributes time point changes standard error calculation. individuals contribute single sample, simple way handle setting column sequential numbers giving subject identifier:","code":"d_sparse$id <- 1:nrow(d_sparse)"},{"path":"http://billdenney.github.io/pknca/articles/v04-sparse.html","id":"calculate","dir":"Articles","previous_headings":"","what":"Calculate!","title":"Sparse NCA Calculations","text":"Setup PKNCA calculations calculate!","code":"library(PKNCA) ##  ## Attaching package: 'PKNCA' ## The following object is masked from 'package:stats': ##  ##     filter o_conc_sparse <- PKNCAconc(d_sparse, conc~time|id, sparse=TRUE) d_intervals <-   data.frame(     start=0,     end=24,     aucinf.obs=TRUE,     cmax=TRUE,     sparse_auclast=TRUE   ) o_data_sparse <- PKNCAdata(o_conc_sparse, intervals=d_intervals) o_nca <- pk.nca(o_data_sparse) ## No dose information provided, calculations requiring dose will return NA. ## Warning: Too few points for half-life calculation (min.hl.points=3 with only 2 ## points) ## Warning: Cannot yet calculate sparse degrees of freedom for multiple samples ## per subject"},{"path":"http://billdenney.github.io/pknca/articles/v04-sparse.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"Sparse NCA Calculations","text":"PKNCA result, data available summary() function: individual results available .data.frame() function:","code":"summary(o_nca) ##  start end cmax sparse_auclast aucinf.obs ##      0  24 3.05           39.5         NC ##  ## Caption: cmax, sparse_auclast, aucinf.obs: geometric mean and geometric coefficient of variation as.data.frame(o_nca) ## # A tibble: 16 × 5 ##    start   end PPTESTCD            PPORRES exclude                               ##    <dbl> <dbl> <chr>                 <dbl> <chr>                                 ##  1     0    24 cmax                  3.05  NA                                    ##  2     0    24 tmax                  6     NA                                    ##  3     0    24 tlast                24     NA                                    ##  4     0    24 clast.obs             0.191 NA                                    ##  5     0    24 lambda.z             NA     Too few points for half-life calcula… ##  6     0    24 r.squared            NA     Too few points for half-life calcula… ##  7     0    24 adj.r.squared        NA     Too few points for half-life calcula… ##  8     0    24 lambda.z.time.first  NA     Too few points for half-life calcula… ##  9     0    24 lambda.z.n.points    NA     Too few points for half-life calcula… ## 10     0    24 clast.pred           NA     Too few points for half-life calcula… ## 11     0    24 half.life            NA     Too few points for half-life calcula… ## 12     0    24 span.ratio           NA     Too few points for half-life calcula… ## 13     0    24 aucinf.obs           NA     Too few points for half-life calcula… ## 14     0    24 sparse_auclast       39.5   NA                                    ## 15     0    24 sparse_auc_se         7.31  NA                                    ## 16     0    24 sparse_auc_df        NA     NA"},{"path":"http://billdenney.github.io/pknca/articles/v05-auc-calculation-with-PKNCA.html","id":"preparation","dir":"Articles","previous_headings":"","what":"Preparation","title":"AUC Calculation with PKNCA","text":"examples, following data used.  purpose illustration, NCA parameters also calculated AUC types . Note results, parameters returned requested. additional parameters set parameters required calculate requested parameters.","code":"suppressPackageStartupMessages({   library(PKNCA)   library(dplyr)   library(cowplot)   library(knitr)   library(ggplot2) }) scale_colour_discrete <- scale_colour_hue scale_fill_discrete <- scale_fill_hue  my_conc <- data.frame(conc=c(0, 2.5, 3, 2, 1.5, 1.2, 1.1, 0, 0),                       time=c(0:5, 8, 12, 24),                       subject=1) my_conc$BLQ <- my_conc$conc == 0 my_conc$measured <- TRUE ggplot(my_conc,        aes(x=time,            y=conc,            shape=BLQ,            group=subject)) +   geom_line() +   geom_point(size=4) +   scale_x_continuous(breaks=my_conc$time) +   theme(legend.position=c(0.8, 0.8)) ## Warning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2 ## 3.5.0. ## ℹ Please use the `legend.position.inside` argument of `theme()` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. conc_obj <- PKNCAconc(my_conc, conc~time|subject) data_obj <- PKNCAdata(data.conc=conc_obj,                       intervals=data.frame(start=0,                                            end=24,                                            aucall=TRUE,                                            auclast=TRUE,                                            aucinf.pred=TRUE,                                            aucinf.obs=TRUE)) results_obj <- pk.nca(data_obj) ## No dose information provided, calculations requiring dose will return NA. kable(as.data.frame(results_obj))"},{"path":"http://billdenney.github.io/pknca/articles/v05-auc-calculation-with-PKNCA.html","id":"auc-to-the-last-value-above-the-limit-of-quantification-auclast","dir":"Articles","previous_headings":"","what":"AUC to the Last Value Above the Limit of Quantification (AUClast)","title":"AUC Calculation with PKNCA","text":"AUC0-last calculates AUC time 0 last value limit quantification, tlast (within PKNCA, last value 0). figure , AUC0-last integrate shaded region. Integration tlast 0.","code":"tlast <- pk.calc.tlast(conc=my_conc$conc,                        time=my_conc$time) tlast ## [1] 8 my_conc$include_auclast <- my_conc$time <= tlast ggplot(my_conc,        aes(x=time,            y=conc,            shape=BLQ,            group=subject)) +   geom_ribbon(data=my_conc[my_conc$include_auclast,],               aes(ymin=0, ymax=conc),               fill=\"lightblue\") +   geom_line() +   geom_point(size=4) +   scale_x_continuous(breaks=my_conc$time) +   theme(legend.position=c(0.8, 0.8))"},{"path":"http://billdenney.github.io/pknca/articles/v05-auc-calculation-with-PKNCA.html","id":"aucall","dir":"Articles","previous_headings":"","what":"AUCall","title":"AUC Calculation with PKNCA","text":"AUCall starts AUC0-last integrates tlast first point tlast linear interpolation zero. second point tlast \\(\\infty\\) considered zero.","code":"first_after_tlast <- my_conc$time[my_conc$time > tlast][1] first_after_tlast ## [1] 12 my_conc$include_aucall <- my_conc$time <= first_after_tlast ggplot(my_conc,        aes(x=time,            y=conc,            shape=BLQ,            group=subject)) +   geom_ribbon(data=my_conc[my_conc$include_aucall,],               aes(ymin=0, ymax=conc),               fill=\"lightblue\") +   geom_line() +   geom_point(size=4) +   scale_x_continuous(breaks=my_conc$time) +   theme(legend.position=c(0.8, 0.8))"},{"path":"http://billdenney.github.io/pknca/articles/v05-auc-calculation-with-PKNCA.html","id":"auc-to-infinity-aucinfty","dir":"Articles","previous_headings":"","what":"AUC to Infinity (AUC\\(\\infty\\))","title":"AUC Calculation with PKNCA","text":"AUC0-\\(\\infty\\) commonly used single-dose data. calculates AUC0-last extrapolates \\(\\infty\\) using estimated half-life. Two starting points used estimate tlast \\(\\infty\\), observed half-life predicted concentration tlast (clast.obs clast.pred). two figures illustrate integration AUC0-\\(\\infty\\),obs AUC~0-\\(\\infty\\),pred$. difference tow figures evident time=8 discontinuity integration tlast due using clast.pred point clast.obs point. (illustrate integration differences, BLQ indicator shapes removed. BLQ handled identically previous figures.)","code":"# Add one row to illustrate extrapolation beyond observed data my_conc <-   rbind(my_conc,         data.frame(conc=NA,                    time=36,                    subject=1,                    BLQ=NA,                    measured=FALSE,                    include_auclast=FALSE,                    include_aucall=FALSE)) # Extrapolate concentrations for aucinf.obs my_conc$conc_aucinf.obs <- my_conc$conc my_conc$conc_aucinf.obs[my_conc$BLQ | is.na(my_conc$BLQ)] <-   interp.extrap.conc(conc=my_conc$conc,                      time=my_conc$time,                      time.out=my_conc$time[my_conc$BLQ | is.na(my_conc$BLQ)],                      lambda.z=as.data.frame(results_obj)$PPORRES[as.data.frame(results_obj)$PPTESTCD %in% \"lambda.z\"])  # Extrapolate concentrations for aucinf.pred my_conc$conc_aucinf.pred <- my_conc$conc my_conc$conc_aucinf.pred[my_conc$BLQ | is.na(my_conc$BLQ)] <-   interp.extrap.conc(conc=my_conc$conc,                      time=my_conc$time,                      time.out=my_conc$time[my_conc$BLQ | is.na(my_conc$BLQ)],                      lambda.z=as.data.frame(results_obj)$PPORRES[as.data.frame(results_obj)$PPTESTCD %in% \"lambda.z\"],                      clast=as.data.frame(results_obj)$PPORRES[as.data.frame(results_obj)$PPTESTCD %in% \"clast.pred\"]) my_conc$conc_aucinf.pred[my_conc$time == tlast] <-   as.data.frame(results_obj)$PPORRES[as.data.frame(results_obj)$PPTESTCD %in% \"clast.pred\"] ggplot(my_conc[!is.na(my_conc$conc),],        aes(x=time,            y=conc,            #shape=BLQ,            group=subject)) +   geom_ribbon(data=my_conc,               aes(ymin=0, ymax=conc_aucinf.obs),               fill=\"lightblue\") +   geom_line() +   #geom_point(size=2) +   scale_x_continuous(breaks=my_conc$time) +   theme(legend.position=c(0.8, 0.8)) +   labs(title=\"Extrapolation using AUCinf,obs\") ggplot(my_conc[!is.na(my_conc$conc),],        aes(x=time,            y=conc,            #shape=BLQ,            group=subject)) +   geom_ribbon(     data=arrange(       bind_rows(mutate(my_conc,                        before=FALSE),                 mutate(filter(my_conc, time == tlast),                        conc_aucinf.pred=conc,                        before=TRUE)),       time, desc(before)),     aes(ymin=0,         ymax=conc_aucinf.pred),     fill=\"lightblue\") +   geom_line() +   #geom_point(size=2) +   scale_x_continuous(breaks=my_conc$time) +   theme(legend.position=c(0.8, 0.8)) +   labs(title=\"Extrapolation using AUCinf,pred\")"},{"path":"http://billdenney.github.io/pknca/articles/v05-auc-calculation-with-PKNCA.html","id":"partial-aucs","dir":"Articles","previous_headings":"","what":"Partial AUCs","title":"AUC Calculation with PKNCA","text":"Partial AUCs integrate part area within time range interest. Partial AUCs often interest assess bioequivalence detail AUC0-\\(\\infty\\) AUC0-last may indicate. Within PKNCA, partial AUCs treated like AUClast start end times separately selected. (future version PKNCA, simply calculated using AUCinterval.) starting ending times observed within data, partial AUCs can calculated using parameter auclast illustrated . starting ending times observed within data samples limit quantification, concentrations must interpolated added dataset calculation illustrated .","code":"# Interpolation not required data_obs_obj <- PKNCAdata(conc_obj, intervals=data.frame(start=0, end=2, auclast=TRUE)) results_obs_obj <- pk.nca(data_obs_obj) ## No dose information provided, calculations requiring dose will return NA. kable(as.data.frame(results_obs_obj)) # Interpolation required my_conc_interp <-   arrange(     bind_rows(       my_conc,       data.frame(conc=interp.extrap.conc(conc=my_conc$conc, time=my_conc$time, time.out=1.5),                  time=1.5,                  subject=1)),     time) kable(my_conc_interp) conc_interp_obj <- PKNCAconc(my_conc_interp, conc~time|subject) data_interp_obj <- PKNCAdata(conc_interp_obj, intervals=data.frame(start=0, end=1.5, auclast=TRUE)) results_interp <- pk.nca(data_interp_obj) ## No dose information provided, calculations requiring dose will return NA. as.data.frame(results_interp) ## # A tibble: 1 × 6 ##   subject start   end PPTESTCD PPORRES exclude ##     <dbl> <dbl> <dbl> <chr>      <dbl> <chr>   ## 1       1     0   1.5 auclast     2.56 NA"},{"path":"http://billdenney.github.io/pknca/articles/v06-half-life-calculation-tobit.html","id":"half-life-calculation-with-tobit-regression","dir":"Articles","previous_headings":"","what":"Half-life calculation with Tobit regression","title":"Half-life calculation with Tobit regression","text":"Half-life calculation Tobit regression allows inclusion concentrations lower limit quantification half-life estimate.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v06-half-life-calculation-tobit.html","id":"comparison-to-semi-log-regression","dir":"Articles","previous_headings":"Half-life calculation with Tobit regression","what":"Comparison to semi-log regression","title":"Half-life calculation with Tobit regression","text":"Typical half-life calculation uses curve-stripping semi-log regression natural logarithm concentration time. Based use logarithm concentration, concentrations lower limit quantification (LLOQ) set zero ignored. Tobit regression allows inclusion concentrations LLOQ half-life calculation. Tobit regression half-life equivalent using Beal’s M3 method population pharmacokinetic (PK) models. Tobit regression, line fit using maximum likelihood. points LLOQ, likelihood based probability density observed concentration. points LLOQ, likelihood based cumulative probability distribution function negative infinity limit quantification.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v06-half-life-calculation-tobit.html","id":"automatic-point-selection-with-semi-log-regression","dir":"Articles","previous_headings":"Half-life calculation with Tobit regression","what":"Automatic point selection with semi-log regression","title":"Half-life calculation with Tobit regression","text":"semi-log regression, typical method used automatically select concentrations inclusion half-life estimate : Omit concentrations missing. Omit concentrations LLOQ. Estimate half-life set points first concentration measure Tmax third measure Tlast. adjusted r-squared must within tolerance factor (typically 0.0001) largest adjusted r-squared. \\(\\lambda_z\\) value (slope half-life line) must positive; words, half-life slope must decreasing. multiple choices points fit criteria, choose one concentration measurements included. comparison PKNCA, note Phoenix WinNonlin switches order selection 4.1 4.2 . , best adjusted r-squared increasing slope another adjusted r-squared decreasing slope, Phoenix report half-life.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v06-half-life-calculation-tobit.html","id":"automatic-point-selection-with-tobit-regression","dir":"Articles","previous_headings":"Half-life calculation with Tobit regression","what":"Automatic point selection with Tobit regression","title":"Half-life calculation with Tobit regression","text":"Tobit regression, method generally similar semi-log regression two changes. first change concentrations LLOQ retained estimate. second change adjusted r-squared possible calculate including points LLOQ, minimum standard deviation estimate used. selection method results effectively estimates half-life points LLOQ improved estimates half-life points LLOQ. Future research may investigate optimization method. steps Tobit regression : Omit concentrations missing. Estimate half-life set points first concentration measure Tmax third measure Tlast including points LLOQ Tlast. estimated standard deviation slope minimized. \\(\\lambda_z\\) value (slope half-life line) must positive; words, half-life slope must decreasing.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v06-half-life-calculation-tobit.html","id":"comparison-of-tobit-and-semi-log-regression","dir":"Articles","previous_headings":"","what":"Comparison of Tobit and semi-log regression","title":"Half-life calculation with Tobit regression","text":"almost scenarios, Tobit regression using algorithm improves half-life estimate compared semi-log regression. figure , concentration-time profiles simulated 1-, 2-, 3-compartment linear PK models intravenous extravascular administration variety compartmental model parameters. true half-life calculated based compartmental model parameters. , ratio estimated true half-life calculated. Values closer 1 indicate better fit values farther 1 indicate poorer fit. Tobit regression performs universally better least-squares estimated theoretical half-life, better >2-fold theoretical half-life least-squares performs slightly better theoretical 2-fold . fact Tobit regression cumulative distribution function closer 1 across range simulations indicates Tobit regression provides better half-life estimate across broad range data.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v06-half-life-calculation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Half-Life Calculation","text":"Half-life calculated fitting natural logarithm concentration time. default calculation method curve stripping (described detail ). Manual half-life points automated half-life selection can performed, specific points can excluded still performing curve stripping.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v06-half-life-calculation.html","id":"curve-stripping-method","dir":"Articles","previous_headings":"","what":"Curve Stripping Method","title":"Half-Life Calculation","text":"automatic point selection performed curve stripping, algorithm described used.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v06-half-life-calculation.html","id":"select-the-points","dir":"Articles","previous_headings":"Curve Stripping Method","what":"Select the Points","title":"Half-Life Calculation","text":"sets points applicable according current options selected. Drop BLQ values, least 3 points (customizable PKNCA.options(\"min.hl.points\")) including \\(T_{max}\\) (customizable PKNCA.options(\"allow.tmax..half.life\")) specific example, measurements 0, 1, 2, 3, 4, 6, 8, 12, 24 hours; \\(T_{last}\\) 12 hours; \\(T_{max}\\) 1 hour default point sets fit : 6, 8, 12 hours; 4, 6, 8, 12 hours; 3, 4, 6, 8, 12 hours; 2, 3, 4, 6, 8, 12 hours. PKNCA.options(\"min.hl.points\") set 4, 6, 8, 12 hour set fit. PKNCA.options(\"allow.tmax..half.life\") set TRUE, 1, 2, 3, 4, 6, 8, 12 hours fit.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v06-half-life-calculation.html","id":"select-the-best-fit","dir":"Articles","previous_headings":"Curve Stripping Method","what":"Select the Best Fit","title":"Half-Life Calculation","text":"fitting points, best fit among set possible fit selected following rules: adjusted \\(r^2\\) factor controlled PKNCA.options(\"adj.r.squared.factor\") defaults 10^{-4}. rules must met simultaneously, maximum adjusted \\(r^2\\) line \\(\\lambda_z \\leq 0\\), half-life may end unreportable. fitting log-linear concentration-time line fails, best line. one fit still meets criteria , choose fit points included.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v06-half-life-calculation.html","id":"example","dir":"Articles","previous_headings":"Curve Stripping Method","what":"Example","title":"Half-Life Calculation","text":"","code":"# Perform calculations for subject 1, only data_conc <- as.data.frame(datasets::Theoph)[datasets::Theoph$Subject == 1, ]  # Keep all points conc_obj <-   PKNCAconc(     data_conc,     conc~Time|Subject   )  # Only calculate half-life and parameters required for half-life current_intervals <- data.frame(start=0, end=Inf, half.life=TRUE) data_obj <- PKNCAdata(conc_obj, intervals=current_intervals) result_obj <- pk.nca(data_obj) ## No dose information provided, calculations requiring dose will return NA. # Extract the results for subject 1  as.data.frame(result_obj) ## # A tibble: 10 × 6 ##    Subject start   end PPTESTCD            PPORRES exclude ##    <ord>   <dbl> <dbl> <chr>                 <dbl> <chr>   ##  1 1           0   Inf tmax                 1.12   NA      ##  2 1           0   Inf tlast               24.4    NA      ##  3 1           0   Inf lambda.z             0.0485 NA      ##  4 1           0   Inf r.squared            1.00   NA      ##  5 1           0   Inf adj.r.squared        1.00   NA      ##  6 1           0   Inf lambda.z.time.first  9.05   NA      ##  7 1           0   Inf lambda.z.n.points    3      NA      ##  8 1           0   Inf clast.pred           3.28   NA      ##  9 1           0   Inf half.life           14.3    NA      ## 10 1           0   Inf span.ratio           1.07   NA"},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v06-half-life-calculation.html","id":"exclusion-of-specific-points-with-curve-stripping","dir":"Articles","previous_headings":"Manual Point Selection","what":"Exclusion of Specific Points with Curve Stripping","title":"Half-Life Calculation","text":"cases, specific points known outliers, may another reason exclude specific points. , points excluded, half-life calculated using normal curve stripping methods described . exclude specific points otherwise use curve stripping, use exclude_half.life option column name concentration dataset PKNCAconc() illustrated .","code":"data_conc$exclude_hl <- data_conc$Time == 12.12 # Confirm that we will be excluding exactly one point stopifnot(sum(data_conc$exclude_hl) == 1)  # Drop one point conc_obj_exclude1 <-   PKNCAconc(     data_conc,     conc~Time|Subject,     exclude_half.life=\"exclude_hl\"   )  data_obj_exclude1 <- PKNCAdata(conc_obj_exclude1, intervals=current_intervals)  # Perform the calculations result_obj_exclude1 <- pk.nca(data_obj_exclude1) ## No dose information provided, calculations requiring dose will return NA. # Results differ when excluding the 12-hour point for subject 1 (compare to # example in the previous section) as.data.frame(result_obj_exclude1) ## # A tibble: 10 × 6 ##    Subject start   end PPTESTCD            PPORRES exclude ##    <ord>   <dbl> <dbl> <chr>                 <dbl> <chr>   ##  1 1           0   Inf tmax                 1.12   NA      ##  2 1           0   Inf tlast               24.4    NA      ##  3 1           0   Inf lambda.z             0.0482 NA      ##  4 1           0   Inf r.squared            1.00   NA      ##  5 1           0   Inf adj.r.squared        0.999  NA      ##  6 1           0   Inf lambda.z.time.first  5.1    NA      ##  7 1           0   Inf lambda.z.n.points    4      NA      ##  8 1           0   Inf clast.pred           3.28   NA      ##  9 1           0   Inf half.life           14.4    NA      ## 10 1           0   Inf span.ratio           1.34   NA"},{"path":"http://billdenney.github.io/pknca/articles/v06-half-life-calculation.html","id":"specification-of-the-exact-points-for-analysis","dir":"Articles","previous_headings":"Manual Point Selection","what":"Specification of the Exact Points for Analysis","title":"Half-Life Calculation","text":"cases, exact points use half-life calculation known, automatic point selection curve stripping performed. exclude specific points otherwise use curve stripping, use include_half.life option column name concentration dataset PKNCAconc() illustrated .","code":"data_conc$include_hl <- data_conc$Time > 3 # Confirm that we will be excluding exactly one point stopifnot(sum(data_conc$include_hl) == 6)  # Drop one point conc_obj_include6 <-   PKNCAconc(     data_conc,     conc~Time|Subject,     include_half.life=\"include_hl\"   )  data_obj_include6 <- PKNCAdata(conc_obj_include6, intervals=current_intervals)  # Perform the calculations result_obj_include6 <- pk.nca(data_obj_include6) ## No dose information provided, calculations requiring dose will return NA. # Results differ when including 6 points (compare to example in the previous # section) as.data.frame(result_obj_include6) ## # A tibble: 10 × 6 ##    Subject start   end PPTESTCD            PPORRES exclude ##    <ord>   <dbl> <dbl> <chr>                 <dbl> <chr>   ##  1 1           0   Inf tmax                 1.12   NA      ##  2 1           0   Inf tlast               24.4    NA      ##  3 1           0   Inf lambda.z             0.0475 NA      ##  4 1           0   Inf r.squared            0.999  NA      ##  5 1           0   Inf adj.r.squared        0.998  NA      ##  6 1           0   Inf lambda.z.time.first  3.82   NA      ##  7 1           0   Inf lambda.z.n.points    6      NA      ##  8 1           0   Inf clast.pred           3.30   NA      ##  9 1           0   Inf half.life           14.6    NA      ## 10 1           0   Inf span.ratio           1.41   NA"},{"path":"http://billdenney.github.io/pknca/articles/v07-post-processing.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Post-Processing","text":"calculation complete, steps extract desired results results object described .","code":""},{"path":"http://billdenney.github.io/pknca/articles/v07-post-processing.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Post-Processing","text":"extract results, first results must available. example comes Introduction Usage vignette reproduced simply results available. See vignette details running PKNCA.","code":"library(PKNCA) suppressPackageStartupMessages(library(dplyr))  d_conc <-   as.data.frame(datasets::Theoph) %>%   mutate(Subject=as.numeric(as.character(Subject))) ## Generate the dosing data d_dose <- d_conc[d_conc$Time == 0,] d_dose$Time <- 0  conc_obj <-   PKNCAconc(     d_conc,     conc~Time|Subject   ) dose_obj <-   PKNCAdose(     d_dose,     Dose~Time|Subject   ) data_obj <- PKNCAdata(conc_obj, dose_obj) results_obj <- pk.nca(data_obj)"},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v07-post-processing.html","id":"exclusion-of-select-results","dir":"Articles","previous_headings":"Modifying Results","what":"Exclusion of Select Results","title":"Post-Processing","text":"many scenarios, individual results may need excluded summaries. exclude results, use exclude() function.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v07-post-processing.html","id":"exclusion-functions","dir":"Articles","previous_headings":"Modifying Results > Exclusion of Select Results","what":"Exclusion Functions","title":"Post-Processing","text":"Several exclusion functions built PKNCA. built-functions exclude results either apply current value dependencies current value. example, \\(AUC_\\infty\\) depends \\(\\lambda_z\\), excluding based span ratio exclude parameters depend \\(\\lambda_z\\), including \\(AUC_\\infty\\). see built-functions, type ?exclude_nca R command line review help page. use , provide function FUN argument exclude() illustrated . may also write exclusion function. exclusion functions built-PKNCA bit complex required handle options manage general functionality may apply user-specific need. write exclusion function, follow description write exclusion function described details section ?exclude.","code":"results_excl_span <- exclude(results_obj, FUN=exclude_nca_span.ratio())  # Without any exclusions applied, the 'exclude' column is all NA. as.data.frame(results_obj) %>%   filter(Subject == 1) ## # A tibble: 14 × 6 ##    Subject start   end PPTESTCD             PPORRES exclude ##      <dbl> <dbl> <dbl> <chr>                  <dbl> <chr>   ##  1       1     0    24 auclast              92.4    NA      ##  2       1     0   Inf cmax                 10.5    NA      ##  3       1     0   Inf tmax                  1.12   NA      ##  4       1     0   Inf tlast                24.4    NA      ##  5       1     0   Inf clast.obs             3.28   NA      ##  6       1     0   Inf lambda.z              0.0485 NA      ##  7       1     0   Inf r.squared             1.00   NA      ##  8       1     0   Inf adj.r.squared         1.00   NA      ##  9       1     0   Inf lambda.z.time.first   9.05   NA      ## 10       1     0   Inf lambda.z.n.points     3      NA      ## 11       1     0   Inf clast.pred            3.28   NA      ## 12       1     0   Inf half.life            14.3    NA      ## 13       1     0   Inf span.ratio            1.07   NA      ## 14       1     0   Inf aucinf.obs          215.     NA # With exclusions applied, the 'exclude' column has the reason for exclusion. as.data.frame(results_excl_span) %>%   filter(Subject == 1) ## # A tibble: 14 × 6 ##    Subject start   end PPTESTCD             PPORRES exclude        ##      <dbl> <dbl> <dbl> <chr>                  <dbl> <chr>          ##  1       1     0    24 auclast              92.4    NA             ##  2       1     0   Inf cmax                 10.5    NA             ##  3       1     0   Inf tmax                  1.12   NA             ##  4       1     0   Inf tlast                24.4    NA             ##  5       1     0   Inf clast.obs             3.28   NA             ##  6       1     0   Inf lambda.z              0.0485 Span ratio < 2 ##  7       1     0   Inf r.squared             1.00   Span ratio < 2 ##  8       1     0   Inf adj.r.squared         1.00   Span ratio < 2 ##  9       1     0   Inf lambda.z.time.first   9.05   Span ratio < 2 ## 10       1     0   Inf lambda.z.n.points     3      Span ratio < 2 ## 11       1     0   Inf clast.pred            3.28   Span ratio < 2 ## 12       1     0   Inf half.life            14.3    Span ratio < 2 ## 13       1     0   Inf span.ratio            1.07   Span ratio < 2 ## 14       1     0   Inf aucinf.obs          215.     Span ratio < 2"},{"path":"http://billdenney.github.io/pknca/articles/v07-post-processing.html","id":"excluding-specific-results","dir":"Articles","previous_headings":"Modifying Results > Exclusion of Select Results","what":"Excluding Specific Results","title":"Post-Processing","text":"Excluding specific results benefit full control provided. , excluding specific points allows errors also enter analysis parameters depend excluded parameter excluded.","code":"mask_exclude_cmax <-   results_obj %>%   as.data.frame() %>%   dplyr::mutate(     mask_exclude=Subject == 1 & PPTESTCD == \"cmax\"   ) %>%   \"[[\"(\"mask_exclude\") results_excl_specific <-   exclude(     results_obj,     mask=mask_exclude_cmax,     reason=\"Cmax was actually above the ULOQ\"   )  # Without any exclusions applied, the 'exclude' column is all NA. results_obj %>%   as.data.frame() %>%   filter(Subject == 1) ## # A tibble: 14 × 6 ##    Subject start   end PPTESTCD             PPORRES exclude ##      <dbl> <dbl> <dbl> <chr>                  <dbl> <chr>   ##  1       1     0    24 auclast              92.4    NA      ##  2       1     0   Inf cmax                 10.5    NA      ##  3       1     0   Inf tmax                  1.12   NA      ##  4       1     0   Inf tlast                24.4    NA      ##  5       1     0   Inf clast.obs             3.28   NA      ##  6       1     0   Inf lambda.z              0.0485 NA      ##  7       1     0   Inf r.squared             1.00   NA      ##  8       1     0   Inf adj.r.squared         1.00   NA      ##  9       1     0   Inf lambda.z.time.first   9.05   NA      ## 10       1     0   Inf lambda.z.n.points     3      NA      ## 11       1     0   Inf clast.pred            3.28   NA      ## 12       1     0   Inf half.life            14.3    NA      ## 13       1     0   Inf span.ratio            1.07   NA      ## 14       1     0   Inf aucinf.obs          215.     NA # With exclusions applied, the 'exclude' column has the reason for exclusion. results_excl_specific %>%   as.data.frame() %>%   filter(Subject == 1) ## # A tibble: 14 × 6 ##    Subject start   end PPTESTCD             PPORRES exclude                      ##      <dbl> <dbl> <dbl> <chr>                  <dbl> <chr>                        ##  1       1     0    24 auclast              92.4    NA                           ##  2       1     0   Inf cmax                 10.5    Cmax was actually above the… ##  3       1     0   Inf tmax                  1.12   NA                           ##  4       1     0   Inf tlast                24.4    NA                           ##  5       1     0   Inf clast.obs             3.28   NA                           ##  6       1     0   Inf lambda.z              0.0485 NA                           ##  7       1     0   Inf r.squared             1.00   NA                           ##  8       1     0   Inf adj.r.squared         1.00   NA                           ##  9       1     0   Inf lambda.z.time.first   9.05   NA                           ## 10       1     0   Inf lambda.z.n.points     3      NA                           ## 11       1     0   Inf clast.pred            3.28   NA                           ## 12       1     0   Inf half.life            14.3    NA                           ## 13       1     0   Inf span.ratio            1.07   NA                           ## 14       1     0   Inf aucinf.obs          215.     NA"},{"path":"http://billdenney.github.io/pknca/articles/v07-post-processing.html","id":"multiple-exclusions","dir":"Articles","previous_headings":"Modifying Results > Exclusion of Select Results","what":"Multiple Exclusions","title":"Post-Processing","text":"one exclusion can applied sequentially results example .","code":"mask_exclude_lz <-   results_obj %>%   as.data.frame() %>%   dplyr::mutate(     mask_exclude=Subject == 1 & PPTESTCD == \"lambda.z\"   ) %>%   \"[[\"(\"mask_exclude\")  # Starting from the exclusion example above where short span ratios were # excluded, exclude Cmax for Subject 1, too. results_excl_multi <-   exclude(     results_excl_span,     mask=mask_exclude_cmax,     reason=\"Cmax was actually above the ULOQ\"   ) results_excl_multi <-   exclude(     results_excl_multi,     mask=mask_exclude_lz,     reason=\"Issue with lambda.z fit\"   )  # With exclusions applied, the 'exclude' column has the reason for exclusion. # More than one reason may appear if more than one exclusion is applied. results_excl_multi %>%   as.data.frame() %>%   filter(Subject == 1) ## # A tibble: 14 × 6 ##    Subject start   end PPTESTCD             PPORRES exclude                      ##      <dbl> <dbl> <dbl> <chr>                  <dbl> <chr>                        ##  1       1     0    24 auclast              92.4    NA                           ##  2       1     0   Inf cmax                 10.5    Cmax was actually above the… ##  3       1     0   Inf tmax                  1.12   NA                           ##  4       1     0   Inf tlast                24.4    NA                           ##  5       1     0   Inf clast.obs             3.28   NA                           ##  6       1     0   Inf lambda.z              0.0485 Span ratio < 2; Issue with … ##  7       1     0   Inf r.squared             1.00   Span ratio < 2               ##  8       1     0   Inf adj.r.squared         1.00   Span ratio < 2               ##  9       1     0   Inf lambda.z.time.first   9.05   Span ratio < 2               ## 10       1     0   Inf lambda.z.n.points     3      Span ratio < 2               ## 11       1     0   Inf clast.pred            3.28   Span ratio < 2               ## 12       1     0   Inf half.life            14.3    Span ratio < 2               ## 13       1     0   Inf span.ratio            1.07   Span ratio < 2               ## 14       1     0   Inf aucinf.obs          215.     Span ratio < 2"},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v07-post-processing.html","id":"summary-results","dir":"Articles","previous_headings":"Extracting Results","what":"Summary Results","title":"Post-Processing","text":"Summary results obtained using aptly named summary() function. output summary_PKNCAresults object simply data.frame attribute caption. summary generated evaluating summary statistics requested parameter. summary statistics calculated parameter set PKNCA.set.summary(), described caption. parameter requested given interval, illustrated period (.), default (customizable .requested.string argument summary()). parameter required calculate another parameter, specifically requested, shown summary. summary one column grouping variable subject grouping variable; one column start end time; one column per parameter calculated. values excluded described , excluded values included summary (note half.life aucinf.obs differ).","code":"summary(results_obj) ##  start end  N     auclast        cmax               tmax   half.life aucinf.obs ##      0  24 12 74.6 [24.3]           .                  .           .          . ##      0 Inf 12           . 8.65 [17.0] 1.14 [0.630, 3.55] 8.18 [2.12] 115 [28.4] ##  ## Caption: auclast, cmax, aucinf.obs: geometric mean and geometric coefficient of variation; tmax: median and range; half.life: arithmetic mean and standard deviation; N: number of subjects summary(results_excl_span) ##  start end  N     auclast        cmax               tmax         half.life ##      0  24 12 74.6 [24.3]           .                  .                 . ##      0 Inf 12           . 8.65 [17.0] 1.14 [0.630, 3.55] 7.36 [0.742], n=9 ##       aucinf.obs ##                . ##  105 [16.4], n=9 ##  ## Caption: auclast, cmax, aucinf.obs: geometric mean and geometric coefficient of variation; tmax: median and range; half.life: arithmetic mean and standard deviation; N: number of subjects; n: number of measurements included in summary"},{"path":"http://billdenney.github.io/pknca/articles/v07-post-processing.html","id":"listing-of-results","dir":"Articles","previous_headings":"Extracting Results","what":"Listing of Results","title":"Post-Processing","text":"listing calculated values available using .data.frame(). Excluded values remain listing.","code":"as.data.frame(results_obj) %>%   head(20) ## # A tibble: 20 × 6 ##    Subject start   end PPTESTCD             PPORRES exclude ##      <dbl> <dbl> <dbl> <chr>                  <dbl> <chr>   ##  1       1     0    24 auclast              92.4    NA      ##  2       1     0   Inf cmax                 10.5    NA      ##  3       1     0   Inf tmax                  1.12   NA      ##  4       1     0   Inf tlast                24.4    NA      ##  5       1     0   Inf clast.obs             3.28   NA      ##  6       1     0   Inf lambda.z              0.0485 NA      ##  7       1     0   Inf r.squared             1.00   NA      ##  8       1     0   Inf adj.r.squared         1.00   NA      ##  9       1     0   Inf lambda.z.time.first   9.05   NA      ## 10       1     0   Inf lambda.z.n.points     3      NA      ## 11       1     0   Inf clast.pred            3.28   NA      ## 12       1     0   Inf half.life            14.3    NA      ## 13       1     0   Inf span.ratio            1.07   NA      ## 14       1     0   Inf aucinf.obs          215.     NA      ## 15       2     0    24 auclast              67.2    NA      ## 16       2     0   Inf cmax                  8.33   NA      ## 17       2     0   Inf tmax                  1.92   NA      ## 18       2     0   Inf tlast                24.3    NA      ## 19       2     0   Inf clast.obs             0.9    NA      ## 20       2     0   Inf lambda.z              0.104  NA as.data.frame(results_excl_span) %>%   head(20) ## # A tibble: 20 × 6 ##    Subject start   end PPTESTCD             PPORRES exclude        ##      <dbl> <dbl> <dbl> <chr>                  <dbl> <chr>          ##  1       1     0    24 auclast              92.4    NA             ##  2       1     0   Inf cmax                 10.5    NA             ##  3       1     0   Inf tmax                  1.12   NA             ##  4       1     0   Inf tlast                24.4    NA             ##  5       1     0   Inf clast.obs             3.28   NA             ##  6       1     0   Inf lambda.z              0.0485 Span ratio < 2 ##  7       1     0   Inf r.squared             1.00   Span ratio < 2 ##  8       1     0   Inf adj.r.squared         1.00   Span ratio < 2 ##  9       1     0   Inf lambda.z.time.first   9.05   Span ratio < 2 ## 10       1     0   Inf lambda.z.n.points     3      Span ratio < 2 ## 11       1     0   Inf clast.pred            3.28   Span ratio < 2 ## 12       1     0   Inf half.life            14.3    Span ratio < 2 ## 13       1     0   Inf span.ratio            1.07   Span ratio < 2 ## 14       1     0   Inf aucinf.obs          215.     Span ratio < 2 ## 15       2     0    24 auclast              67.2    NA             ## 16       2     0   Inf cmax                  8.33   NA             ## 17       2     0   Inf tmax                  1.92   NA             ## 18       2     0   Inf tlast                24.3    NA             ## 19       2     0   Inf clast.obs             0.9    NA             ## 20       2     0   Inf lambda.z              0.104  NA"},{"path":"http://billdenney.github.io/pknca/articles/v07-unit-conversion.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Unit Assignment and Conversion with PKNCA","text":"PKNCA can assign convert units reporting.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v07-unit-conversion.html","id":"prepare-a-unit-assignment-and-conversion-table","dir":"Articles","previous_headings":"","what":"Prepare a Unit Assignment and Conversion Table","title":"Unit Assignment and Conversion with PKNCA","text":"unit assignment conversion table can generated data.frame use pknca_units_table() function manually. simplest method types units inputs automatically generates units NCA parameter. see , default units table column PPTESTCD indicating parameter. , column PPORRESU indicates default units . Without unit conversion, units parameters (notably clearances volumes) useful. can add conversion table make units desired units. automatic conversion work, units must always convertible (units library). Notably automatic conversion, go mass molar units since unique conversion mass moles. Now, units much cleaner look . conversion possible directly units library, can add conversion factor manually adding conversion_factor column. can mix--match manual automatic modification setting conversion_factor column NA want automatic conversion. example , convert concentration units molar. Note AUC units set molar specify conversion; conversions must specified.","code":"d_units_auto <- pknca_units_table(concu=\"ng/mL\", doseu=\"mg\", amountu=\"mg\", timeu=\"hr\") # Show a selection of the units generated d_units_auto[d_units_auto$PPTESTCD %in% c(\"cmax\", \"tmax\", \"auclast\", \"cl.obs\", \"vd.obs\"), ] #>          PPORRESU PPTESTCD #> 22             hr     tmax #> 51          ng/mL     cmax #> 81       hr*ng/mL  auclast #> 117 mg/(hr*ng/mL)   cl.obs d_units_clean <-   pknca_units_table(     concu=\"ng/mL\", doseu=\"mg\", amountu=\"mg\", timeu=\"hr\",     conversions=       data.frame(         PPORRESU=c(\"mg/(hr*ng/mL)\", \"mg/(ng/mL)\", \"hr\"),         PPSTRESU=c(\"L/hr\", \"L\", \"day\")       )   ) # Show a selection of the units generated d_units_clean[d_units_clean$PPTESTCD %in% c(\"cmax\", \"tmax\", \"auclast\", \"cl.obs\", \"vd.obs\"), ] #>          PPORRESU PPTESTCD PPSTRESU conversion_factor #> 22             hr     tmax      day      4.166667e-02 #> 51          ng/mL     cmax    ng/mL      1.000000e+00 #> 81       hr*ng/mL  auclast hr*ng/mL      1.000000e+00 #> 117 mg/(hr*ng/mL)   cl.obs     L/hr      1.000000e+03 d_units_clean_manual <-   pknca_units_table(     concu=\"ng/mL\", doseu=\"mg\", amountu=\"mg\", timeu=\"hr\",     conversions=       data.frame(         PPORRESU=c(\"mg/(hr*ng/mL)\", \"mg/(ng/mL)\", \"hr\", \"ng/mL\"),         PPSTRESU=c(\"L/hr\", \"L\", \"day\", \"nmol/L\"),         conversion_factor=c(NA, NA, NA, 1000/123)       )   ) # Show a selection of the units generated d_units_clean_manual[d_units_clean_manual$PPTESTCD %in% c(\"cmax\", \"tmax\", \"auclast\", \"cl.obs\", \"vd.obs\"), ] #>          PPORRESU PPTESTCD PPSTRESU conversion_factor #> 22             hr     tmax      day      4.166667e-02 #> 51          ng/mL     cmax   nmol/L      8.130081e+00 #> 81       hr*ng/mL  auclast hr*ng/mL      1.000000e+00 #> 117 mg/(hr*ng/mL)   cl.obs     L/hr      1.000000e+03"},{"path":"http://billdenney.github.io/pknca/articles/v07-unit-conversion.html","id":"the-basic-steps-to-add-units-to-an-nca-analysis","dir":"Articles","previous_headings":"","what":"The Basic Steps to Add Units to an NCA Analysis","title":"Unit Assignment and Conversion with PKNCA","text":"details parts NCA calculation example unrelated units, see theophylline example vignette. difference calculation without units comes setting PKNCAdata object. add units units argument. Since urine similar collection performed, amountu argument omitted pknca_units_table().","code":"conc_obj <- PKNCAconc(as.data.frame(datasets::Theoph), conc~Time|Subject) d_dose <- unique(datasets::Theoph[datasets::Theoph$Time == 0,                                   c(\"Dose\", \"Time\", \"Subject\")]) dose_obj <- PKNCAdose(d_dose, Dose~Time|Subject) d_units <-   pknca_units_table(     concu=\"mg/L\", doseu=\"mg/kg\", timeu=\"hr\",     # use molar units for concentrations and AUCs     conversions=       data.frame(         PPORRESU=c(\"(mg/kg)/(hr*mg/L)\", \"(mg/kg)/(mg/L)\", \"mg/L\", \"hr*mg/L\"),         PPSTRESU=c(\"L/hr/kg\", \"L/kg\", \"mmol/L\", \"hr*mmol/L\"),         conversion_factor=c(NA, NA, 1/180.164, 1/180.164)       )   )  data_obj <- PKNCAdata(conc_obj, dose_obj, units=d_units) result_obj <- pk.nca(data_obj) summary(result_obj) #>  Interval Start Interval End  N AUClast (hr*mmol/L) Cmax (mmol/L) #>               0           24 12        0.414 [24.3]             . #>               0          Inf 12                   . 0.0480 [17.0] #>           Tmax (hr) Half-life (hr) AUCinf,obs (hr*mmol/L) #>                   .              .                      . #>  1.14 [0.630, 3.55]    8.18 [2.12]           0.637 [28.4] #>  #> Caption: AUClast, Cmax, AUCinf,obs: geometric mean and geometric coefficient of variation; Tmax: median and range; Half-life: arithmetic mean and standard deviation; N: number of subjects"},{"path":"http://billdenney.github.io/pknca/articles/v07-unit-conversion.html","id":"how-do-i-add-different-unit-conversions-for-different-analytes","dir":"Articles","previous_headings":"","what":"How do I add different unit conversions for different analytes?","title":"Unit Assignment and Conversion with PKNCA","text":"Sometimes, multiple analytes used , example, molar outputs desired inputs mass units. Different unit conversions may required different inputs. Different unit conversions can used adding grouping column units specification. Start setting concentration dataset two analytes. Since dosing doesn’t “Analyte” column, matched concentration measures subject. Setup units “Analyte” column separate units used. Now, calculate adding different units per analyte data object.","code":"d_conc_theoph <- as.data.frame(datasets::Theoph) d_conc_theoph$Analyte <- \"Theophylline\" # Approximately 6% of theophylline is metabolized to caffeine # (https://www.pharmgkb.org/pathway/PA165958541).  Let's pretend that means it # has 6% of the theophylline concentration at all times. d_conc_caffeine <- as.data.frame(datasets::Theoph) d_conc_caffeine$conc <- 0.06*d_conc_caffeine$conc d_conc_caffeine$Analyte <- \"Caffeine\" d_conc <- rbind(d_conc_theoph, d_conc_caffeine)  d_dose <- unique(datasets::Theoph[datasets::Theoph$Time == 0,                                   c(\"Dose\", \"Time\", \"Subject\")]) d_units_theoph <-   pknca_units_table(     concu=\"mg/L\", doseu=\"mg/kg\", timeu=\"hr\",     # use molar units for concentrations and AUCs     conversions=       data.frame(         PPORRESU=c(\"(mg/kg)/(hr*mg/L)\", \"(mg/kg)/(mg/L)\", \"mg/L\", \"hr*mg/L\"),         PPSTRESU=c(\"L/hr/kg\", \"L/kg\", \"mmol/L\", \"hr*mmol/L\"),         conversion_factor=c(NA, NA, 1/180.164, 1/180.164)       )   ) d_units_theoph$Analyte <- \"Theophylline\" d_units_caffeine <-   pknca_units_table(     concu=\"mg/L\", doseu=\"mg/kg\", timeu=\"hr\",     # use molar units for concentrations and AUCs     conversions=       data.frame(         PPORRESU=c(\"(mg/kg)/(hr*mg/L)\", \"(mg/kg)/(mg/L)\", \"mg/L\", \"hr*mg/L\"),         PPSTRESU=c(\"L/hr/kg\", \"L/kg\", \"mmol/L\", \"hr*mmol/L\"),         conversion_factor=c(NA, NA, 1/194.19, 1/194.19)       )   ) d_units_caffeine$Analyte <- \"Caffeine\" d_units <- rbind(d_units_theoph, d_units_caffeine) conc_obj <- PKNCAconc(d_conc, conc~Time|Subject/Analyte) dose_obj <- PKNCAdose(d_dose, Dose~Time|Subject) data_obj <- PKNCAdata(conc_obj, dose_obj, units=d_units) result_obj <- pk.nca(data_obj) summary(result_obj) #>  Interval Start Interval End      Analyte  N AUClast (hr*mmol/L)  Cmax (mmol/L) #>               0           24 Theophylline 12        0.414 [24.3]              . #>               0          Inf Theophylline 12                   .  0.0480 [17.0] #>               0           24     Caffeine 12       0.0231 [24.3]              . #>               0          Inf     Caffeine 12                   . 0.00267 [17.0] #>           Tmax (hr) Half-life (hr) AUCinf,obs (hr*mmol/L) #>                   .              .                      . #>  1.14 [0.630, 3.55]    8.18 [2.12]           0.637 [28.4] #>                   .              .                      . #>  1.14 [0.630, 3.55]    8.18 [2.12]          0.0355 [28.4] #>  #> Caption: AUClast, Cmax, AUCinf,obs: geometric mean and geometric coefficient of variation; Tmax: median and range; Half-life: arithmetic mean and standard deviation; N: number of subjects"},{"path":"http://billdenney.github.io/pknca/articles/v08-data-imputation.html","id":"how-does-imputation-occur","dir":"Articles","previous_headings":"","what":"How does imputation occur?","title":"Data Imputation","text":"(can skip section don’t desire details methods imputation.) Imputation occurs just calculations performed within PKNCA. Imputation occurs single interval definition time, group (usually meaning subject analyte) time range can different imputations different parameter calculations. reason done ensure unintentional modifications data. example, AUC0-24 calculated Day 1 Day 2 study actual times, nominal 24 hour sample may collected 23.5 hours. may preferable keep 23.5 hour sample 23.5 hours Day 1 calculation, time, may preferred shift 23.5 hr sample 24 hours (time 0 Day 2) Day 2 calculation.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v08-data-imputation.html","id":"how-to-select-imputation-methods-to-use","dir":"Articles","previous_headings":"","what":"How to select imputation methods to use","title":"Data Imputation","text":"selection imputation methods uses string text commas spaces () separating imputation methods use. imputation performed imputation method requested NA \"\". select imputation (default), indicate imputation NA \"\". set imputation full dataset, use impute argument PKNCAdata() specify methods use. set imputation interval, use impute argument PKNCAdata() specify column intervals dataset use imputation. specify imputation full dataset interval time. , column name dataset matches impute argument PKNCAdata(), used. Imputation method functions named PKNCA_impute_method_[method name]. example, method impute concentration 0 time 0 named PKNCA_impute_method_start_conc0. specifying imputation method use, give [method name] part function name. example , use \"start_conc0\". specify one, give methods order comma space separating . example, first move predose concentration time dosing set time 0 concentration 0, use \"start_predose,start_conc0\", two methods applied order.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v08-data-imputation.html","id":"imputation-for-the-full-dataset","dir":"Articles","previous_headings":"","what":"Imputation for the full dataset","title":"Data Imputation","text":"imputation applies full dataset, can provided impute argument PKNCAdata():","code":"library(PKNCA) # Remove time 0 to illustrate that imputation works d_conc <- as.data.frame(datasets::Theoph)[!datasets::Theoph$Time == 0, ] conc_obj <- PKNCAconc(d_conc, conc~Time|Subject) d_dose <- unique(datasets::Theoph[datasets::Theoph$Time == 0,                                   c(\"Dose\", \"Time\", \"Subject\")]) dose_obj <- PKNCAdose(d_dose, Dose~Time|Subject) data_obj <- PKNCAdata(conc_obj, dose_obj, impute = \"start_predose,start_conc0\") nca_obj <- pk.nca(data_obj) summary(nca_obj) #>  start end  N     auclast        cmax               tmax   half.life aucinf.obs #>      0  24 12 74.6 [24.2]           .                  .           .          . #>      0 Inf 12           . 8.65 [17.0] 1.14 [0.630, 3.55] 8.18 [2.12] 115 [28.4] #>  #> Caption: auclast, cmax, aucinf.obs: geometric mean and geometric coefficient of variation; tmax: median and range; half.life: arithmetic mean and standard deviation; N: number of subjects"},{"path":"http://billdenney.github.io/pknca/articles/v08-data-imputation.html","id":"imputation-by-calculation-interval","dir":"Articles","previous_headings":"","what":"Imputation by calculation interval","title":"Data Imputation","text":"imputation applies specific intervals, column interval data.frame can provided impute argument PKNCAdata():","code":"library(PKNCA) # Remove time 0 to illustrate that imputation works d_conc <- as.data.frame(datasets::Theoph)[!datasets::Theoph$Time == 0, ] conc_obj <- PKNCAconc(d_conc, conc~Time|Subject) d_dose <- unique(datasets::Theoph[datasets::Theoph$Time == 0,                                   c(\"Dose\", \"Time\", \"Subject\")]) dose_obj <- PKNCAdose(d_dose, Dose~Time|Subject)  d_intervals <-   data.frame(     start=0, end=c(24, 24.1),     auclast=TRUE,     impute=c(NA, \"start_conc0\")   )  data_obj <- PKNCAdata(conc_obj, dose_obj, intervals = d_intervals, impute = \"impute\") nca_obj <- pk.nca(data_obj) #> Warning: Requesting an AUC range starting (0) before the first measurement #> (0.27) is not allowed #> Warning: Requesting an AUC range starting (0) before the first measurement (0.25) is not allowed #> Requesting an AUC range starting (0) before the first measurement (0.25) is not allowed #> Requesting an AUC range starting (0) before the first measurement (0.25) is not allowed #> Warning: Requesting an AUC range starting (0) before the first measurement (0.27) is not allowed #> Requesting an AUC range starting (0) before the first measurement (0.27) is not allowed #> Warning: Requesting an AUC range starting (0) before the first measurement #> (0.35) is not allowed #> Warning: Requesting an AUC range starting (0) before the first measurement #> (0.3) is not allowed #> Warning: Requesting an AUC range starting (0) before the first measurement #> (0.25) is not allowed #> Warning: Requesting an AUC range starting (0) before the first measurement #> (0.37) is not allowed #> Warning: Requesting an AUC range starting (0) before the first measurement #> (0.25) is not allowed #> Warning: Requesting an AUC range starting (0) before the first measurement #> (0.3) is not allowed # PKNCA does not impute time 0 by default, so AUClast in the 0-24 interval is # not calculated summary(nca_obj) #>  start  end  N     auclast #>      0 24.0 12          NC #>      0 24.1 12 76.4 [23.0] #>  #> Caption: auclast: geometric mean and geometric coefficient of variation; N: number of subjects"},{"path":"http://billdenney.github.io/pknca/articles/v08-data-imputation.html","id":"advanced-writing-your-own-imputation-functions","dir":"Articles","previous_headings":"","what":"Advanced: Writing your own imputation functions","title":"Data Imputation","text":"Writing imputation function intended simple process. create imputation function requires following steps: Write function name starts PKNCA_impute_method_ remainder function name brief description method. (PKNCA_impute_method_start_conc0.) function 4 arguments: conc, time, ..., options. function return single data.frame two columns named conc time. rows data.frame must sorted time. addition , function may take named arguments : start end indicate start end time interval, conc.group time.group indicate concentrations times filtered interval.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v20-superposition.html","id":"load-the-data","dir":"Articles","previous_headings":"","what":"Load the data","title":"Superposition of Pharmacokinetic Data","text":"columns interested analysis conc, Time, Subject concentration data.","code":"## It is always a good idea to look at the data knitr::kable(head(datasets::Theoph)) ## By default it is groupedData; convert it to a data frame for use conc_obj <- PKNCAconc(as.data.frame(datasets::Theoph), conc~Time|Subject)"},{"path":"http://billdenney.github.io/pknca/articles/v20-superposition.html","id":"compute-the-superposition-from-single-dose-data-to-steady-state","dir":"Articles","previous_headings":"","what":"Compute the Superposition from Single-Dose Data to Steady-State","title":"Superposition of Pharmacokinetic Data","text":"simple call, can estimated steady-state concentration subject. minimum, time dosing (tau) must provided. error noting first concentration must zero due fact superposition usually occurs single-dose data. first concentration nonzero, data likely single-dose (data error fixed). Let’s find offending data. Nonzero predose measurements example, assume errors, correct zero, recalculate. Superposition steady-state output tbl_df, tbl, data.frame including grouping factors columns, column concentration, column time. Time point selection ensures beginning end interval included every measured time contributes interval included. points beginning end interval similar; within tolerance 0.001 defined steady.state.tol argument superposition.","code":"steady_state <- superposition(conc_obj, tau=24) ## Warning in parallel::mclapply(X = seq_len(nrow(nested_data)), FUN = ## function(idx) {: all scheduled cores encountered errors in user code knitr::kable(subset(datasets::Theoph, Time == 0 & conc > 0),              caption=\"Nonzero predose measurements\",              row.names=FALSE) ## Correct nonzero concentrations at time 0 to be BLQ. theoph_corrected <- as.data.frame(datasets::Theoph) theoph_corrected$conc[theoph_corrected$Time == 0] <- 0 conc_obj_corrected <- PKNCAconc(theoph_corrected, conc~Time|Subject)  ## Calculate the new steady-state concentrations with 24 hour dosing steady_state <- superposition(conc_obj_corrected, tau=24) knitr::kable(head(steady_state, n=14),              caption=\"Superposition at steady-state\")"},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v20-superposition.html","id":"compute-the-superposition-from-single-dose-data-to-a-specific-dose","dir":"Articles","previous_headings":"Nonstandard Superposition Computations","what":"Compute the Superposition from Single-Dose Data to a Specific Dose","title":"Superposition of Pharmacokinetic Data","text":"simulation specific dose needed, number dosing intervals (n.tau) can specified. Superposition steady-state","code":"## Calculate the unsteady-state concentrations with 24 hour dosing unsteady_state <- superposition(conc_obj_corrected, tau=24, n.tau=2) knitr::kable(head(unsteady_state, n=14),              caption=\"Superposition before steady-state\")"},{"path":"http://billdenney.github.io/pknca/articles/v20-superposition.html","id":"compute-the-superposition-from-single-dose-data-with-1-dose-per-interval","dir":"Articles","previous_headings":"Nonstandard Superposition Computations","what":"Compute the Superposition from Single-Dose Data with >1 Dose Per Interval","title":"Superposition of Pharmacokinetic Data","text":"dosing intervals complex per X hours (days weeks …). predict complex dosing superposition, give dose times within interval. dose.times must less tau (otherwise interval). Superposition steady-state complex dosing  complex dosing interval, number time points estimated increases. next section describes selection time points.","code":"## Calculate the new steady-state concentrations with 24 hour dosing complex_interval_steady_state <- superposition(conc_obj_corrected, tau=24, dose.times=c(0, 2, 4)) knitr::kable(head(complex_interval_steady_state, n=10),              caption=\"Superposition at steady-state with complex dosing\") ggplot(complex_interval_steady_state,        aes(y=conc, x=time, colour=Subject)) +   geom_line()"},{"path":"http://billdenney.github.io/pknca/articles/v20-superposition.html","id":"show-the-curve-to-steady-state","dir":"Articles","previous_headings":"Nonstandard Superposition Computations > Compute the Superposition from Single-Dose Data with >1 Dose Per Interval","what":"Show the Curve to Steady-State","title":"Superposition of Pharmacokinetic Data","text":"determine concentration curve get steady-state, can give dose times considered required get steady-state. , specify tau total time steady-state, specify n.tau 1 indicate one round dosing administered. command technically go steady-state; dose.times sufficiently long reach steady-state, goes many doses requested.","code":"up_to_steady_state <- superposition(conc_obj_corrected,                                     tau=4*24,                                     n.tau=1,                                     dose.times=seq(0, 3*24, by=12)) ggplot(up_to_steady_state, aes(x=time, y=conc, colour=Subject)) +   geom_line()"},{"path":"http://billdenney.github.io/pknca/articles/v20-superposition.html","id":"time-point-selection-and-addition","dir":"Articles","previous_headings":"","what":"Time Point Selection and Addition","title":"Superposition of Pharmacokinetic Data","text":"Superposition often used estimate NCA parameters nonparametric methods. ensure estimated parameters accurate possible (especially \\(C_{max}\\)), dose every post-dose time point included. Specifically, dose following times: 0 (zero) tau, time dose (dose.times argument) Every value time column data modulo tau (shifting time measurement within dosing interval) repeated dose, time additional.times argument. number time points increases can seen comparing time points subject 1 steady-state single dosing complex dosing examples .","code":"steady_state$time[steady_state$Subject == 1] ##  [1]  0.00  0.25  0.37  0.57  1.12  2.02  3.82  5.10  7.03  9.05 12.12 24.00 sum(steady_state$Subject == 1) ## [1] 12 complex_interval_steady_state$time[complex_interval_steady_state$Subject == 1] ##  [1]  0.00  0.25  0.37  0.57  1.12  2.00  2.02  2.25  2.37  2.57  3.12  3.82 ## [13]  4.00  4.02  4.25  4.37  4.57  5.10  5.12  5.82  6.02  7.03  7.10  7.82 ## [25]  9.03  9.05  9.10 11.03 11.05 12.12 13.05 14.12 16.12 24.00 sum(complex_interval_steady_state$Subject == 1) ## [1] 34"},{"path":"http://billdenney.github.io/pknca/articles/v20-superposition.html","id":"interpolation-and-extrapolation-methods","dir":"Articles","previous_headings":"","what":"Interpolation and Extrapolation Methods","title":"Superposition of Pharmacokinetic Data","text":"interpolation extrapolation methods align used calculating AUC. default, interpolation uses PKNCA.options selection \"auc.method\" extrapolation follows curve \\(AUC_{inf}\\). can modified interp.method extrap.method arguments.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v21-methods-for-dose-aware-interpolation-and-extrapolation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Methods Used for Dose-Aware Concentration Interpolation/Extrapolation","text":"Interpolation extrapolation awareness doses occurring , time , requested interpolation time point must account many interactions. ensure clarity interpolation/extrapolation methods decisions made algorithm, potential choice listed accompanying calculation method. code used generate table code within function.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v21-methods-for-dose-aware-interpolation-and-extrapolation.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Methods Used for Dose-Aware Concentration Interpolation/Extrapolation","text":"method list described sorted order many scenarios method applied list. summary tables , column headers follows: Event : type event time requested output may one following Event : equivalent “Event ” event occurring requested output time. Event : equivalent “Event ” next event occurring requested output time.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v21-methods-for-dose-aware-interpolation-and-extrapolation.html","id":"observed-concentration","dir":"Articles","previous_headings":"Methods","what":"Observed concentration","title":"Methods Used for Dose-Aware Concentration Interpolation/Extrapolation","text":"Copy input concentration given time output.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v21-methods-for-dose-aware-interpolation-and-extrapolation.html","id":"impossible-combinations","dir":"Articles","previous_headings":"Methods","what":"Impossible combinations","title":"Methods Used for Dose-Aware Concentration Interpolation/Extrapolation","text":"event combination exist.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v21-methods-for-dose-aware-interpolation-and-extrapolation.html","id":"doses-with-no-concentrations-between","dir":"Articles","previous_headings":"Methods","what":"Doses with no concentrations between","title":"Methods Used for Dose-Aware Concentration Interpolation/Extrapolation","text":"Two doses concentrations , return NA.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v21-methods-for-dose-aware-interpolation-and-extrapolation.html","id":"extrapolation","dir":"Articles","previous_headings":"Methods","what":"Extrapolation","title":"Methods Used for Dose-Aware Concentration Interpolation/Extrapolation","text":"Extrapolate concentration dose","code":""},{"path":"http://billdenney.github.io/pknca/articles/v21-methods-for-dose-aware-interpolation-and-extrapolation.html","id":"immediately-after-an-iv-bolus-without-a-concentration-next","dir":"Articles","previous_headings":"Methods","what":"Immediately after an IV bolus without a concentration next","title":"Methods Used for Dose-Aware Concentration Interpolation/Extrapolation","text":"calculate C0 without concentration IV bolus; return NA.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v21-methods-for-dose-aware-interpolation-and-extrapolation.html","id":"before-all-events","dir":"Articles","previous_headings":"Methods","what":"Before all events","title":"Methods Used for Dose-Aware Concentration Interpolation/Extrapolation","text":"Interpolation events NA zero (0) depending value conc.origin. conc.origin defaults zero implicit assumption complete washout occurred endogenous source analyte.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v21-methods-for-dose-aware-interpolation-and-extrapolation.html","id":"immediately-after-an-iv-bolus-with-a-concentration-next","dir":"Articles","previous_headings":"Methods","what":"Immediately after an IV bolus with a concentration next","title":"Methods Used for Dose-Aware Concentration Interpolation/Extrapolation","text":"Calculate C0 time immediately IV bolus. First, attempt using log slope back-extrapolation. fails, use first concentration dose C0.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v21-methods-for-dose-aware-interpolation-and-extrapolation.html","id":"interpolation","dir":"Articles","previous_headings":"Methods","what":"Interpolation","title":"Methods Used for Dose-Aware Concentration Interpolation/Extrapolation","text":"concentrations IV bolus , interpolate observed concentrations.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v21-methods-for-dose-aware-interpolation-and-extrapolation.html","id":"after-an-iv-bolus-with-a-concentration-next","dir":"Articles","previous_headings":"Methods","what":"After an IV bolus with a concentration next","title":"Methods Used for Dose-Aware Concentration Interpolation/Extrapolation","text":"First, calculate C0 using log slope back-extrapolation (falling back first post-dose concentration fails). , interpolate C0 first post-dose concentration.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v21-methods-for-dose-aware-interpolation-and-extrapolation.html","id":"after-an-iv-bolus-without-a-concentration-next","dir":"Articles","previous_headings":"Methods","what":"After an IV bolus without a concentration next","title":"Methods Used for Dose-Aware Concentration Interpolation/Extrapolation","text":"IV bolus anything concentration, interpolation occur. Return NA","code":""},{"path":"http://billdenney.github.io/pknca/articles/v21-methods-for-dose-aware-interpolation-and-extrapolation.html","id":"dose-as-the-last-event-in-the-timeline-and-requesting-a-concentration-after","dir":"Articles","previous_headings":"Methods","what":"Dose as the last event in the timeline and requesting a concentration after","title":"Methods Used for Dose-Aware Concentration Interpolation/Extrapolation","text":"estimate concentration dose without concentrations dose, return NA.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v21-methods-for-dose-aware-interpolation-and-extrapolation.html","id":"dose-before-concentration-after-without-a-dose","dir":"Articles","previous_headings":"Methods","what":"Dose before, concentration after without a dose","title":"Methods Used for Dose-Aware Concentration Interpolation/Extrapolation","text":"concentration dose estimable, interpolate. Otherwise, NA.","code":""},{"path":[]},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v22-time-to-steady-state.html","id":"data-setup","dir":"Articles","previous_headings":"Example","what":"Data setup","title":"Noncompartmental evaluation of time to steady-state","text":"Illustrating time steady-state, example superposition vignette used. Examine data graphically.","code":"library(PKNCA) theoph_corrected <- as.data.frame(datasets::Theoph) theoph_corrected$conc[theoph_corrected$Time == 0] <- 0 conc_obj <- PKNCAconc(theoph_corrected, conc~Time|Subject) steady_state <- superposition(conc_obj, dose.times = seq(0, 168 - 12, by=12), tau=168, n.tau=1) # Add some noise to the data so that it seems more reasonable steady_state_noise <- steady_state steady_state_noise$conc <-   withr::with_seed(     seed = 5,     steady_state_noise$conc*exp(rnorm(nrow(steady_state_noise), mean = 0, sd = 0.1))   ) library(ggplot2) ggplot(steady_state_noise, aes(x=time, y=conc, groups=Subject)) + geom_line()"},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v22-time-to-steady-state.html","id":"monoexponential","dir":"Articles","previous_headings":"Example > Estimate time to Steady State","what":"Monoexponential","title":"Noncompartmental evaluation of time to steady-state","text":"code estimates four different types monoexponential time steady-state: tss.monoexponential.population: population estimate TSS using nonlinear mixed effects model (one value subjects) tss.monoexponential.popind: individual estimate nonlinear mixed effects model (one value per subject) tss.monoexponential.individual: individual estimate using gnls model estimate subject separately (one value per subject) tss.monoexponential.single: mean estimate TSS using nonlinear model fraction steady-state required time steady-state can changed tss.fraction argument (see ?pk.tss.monoexponential).","code":"tss_mono <-   pk.tss.monoexponential(     conc = steady_state_noise$conc,     time = steady_state_noise$time,     subject = steady_state_noise$Subject,     time.dosing = seq(0, 168 - 12, by=12)   ) #> Warning in nlme.formula(conc ~ ctrough.ss * (1 - exp(tss.constant * time/tss)), #> : Iteration 1, LME step: nlminb() did not converge (code = 1). Do increase #> 'msMaxIter'! tss_mono #>    subject tss.monoexponential.population tss.monoexponential.popind #> 1        1                       26.41698                   36.94302 #> 2       10                       26.41698                   31.95467 #> 3       11                       26.41698                   22.79693 #> 4       12                       26.41698                   26.59837 #> 5        2                       26.41698                   23.53946 #> 6        3                       26.41698                   24.72265 #> 7        4                       26.41698                   25.73792 #> 8        5                       26.41698                   26.93388 #> 9        6                       26.41698                   23.21909 #> 10       7                       26.41698                   25.39792 #> 11       8                       26.41698                   24.54268 #> 12       9                       26.41698                   24.61721 #>    tss.monoexponential.individual tss.monoexponential.single #> 1                        40.65290                   27.87592 #> 2                        24.72591                   27.87592 #> 3                        20.18663                   27.87592 #> 4                        22.58610                   27.87592 #> 5                        25.45251                   27.87592 #> 6                        29.97015                   27.87592 #> 7                        21.60401                   27.87592 #> 8                        25.04023                   27.87592 #> 9                        23.53884                   27.87592 #> 10                       31.37369                   27.87592 #> 11                       32.02870                   27.87592 #> 12                       26.01334                   27.87592"},{"path":"http://billdenney.github.io/pknca/articles/v22-time-to-steady-state.html","id":"stepwise-linear","dir":"Articles","previous_headings":"Example > Estimate time to Steady State","what":"Stepwise Linear","title":"Noncompartmental evaluation of time to steady-state","text":"stepwise linear method estimates slope predose concentrations statistically significant starting last measurement moving backward time. bias individuals move time steady-state late time point.","code":"tss_step <-   pk.tss.stepwise.linear(     conc = steady_state_noise$conc,     time = steady_state_noise$time,     subject = steady_state_noise$Subject,     time.dosing = seq(0, 168 - 12, by=12)   ) tss_step #>   tss.stepwise.linear #> 1                 108"},{"path":"http://billdenney.github.io/pknca/articles/v22-time-to-steady-state.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Noncompartmental evaluation of time to steady-state","text":"Maganti, L., Panebianco, D.L. & Maes, .L. Evaluation Methods Estimating Time Steady State Examples Phase 1 Studies. AAPS J 10, 141–147 (2008). https://doi.org/10.1208/s12248-008-9014-y","code":""},{"path":"http://billdenney.github.io/pknca/articles/v23-auc-integration-methods.html","id":"integration-methods-for-area-under-the-concentration-time-curve-auc","dir":"Articles","previous_headings":"","what":"Integration methods for Area Under the Concentration-Time curve (AUC)","title":"AUC integration methods","text":"3 methods choosing integrate AUC two concentration measurements PKNCA. lin /log , linear lin-log. Additionally, 3 methods extrapolating last concentration limit quantification. AUCinf, AUClast AUCall. methods calculating AUC (AUCtau AUCint) made variants .","code":""},{"path":"http://billdenney.github.io/pknca/articles/v23-auc-integration-methods.html","id":"definitions-and-abbreviations","dir":"Articles","previous_headings":"","what":"Definitions and abbreviations","title":"AUC integration methods","text":"AUC: Area concentration-time curve BLQ: lower limit quantification LLOQ: lower limit quantification NCA: Noncompartmental analysis Profile: set concentration-time points calculation Tlast: last concentration limit quantification within profile Tmax: time maximum concentration","code":""},{"path":"http://billdenney.github.io/pknca/articles/v23-auc-integration-methods.html","id":"description-of-methods-of-integrating-between-two-concentrations-before-tlast","dir":"Articles","previous_headings":"","what":"Description of methods of integrating between two concentrations before Tlast","title":"AUC integration methods","text":"Note NCA tools may describe interpolation zero. zero-interpolation rules used PKNCA assist methods used across suite tools interpolation data cleaning within PKNCA. zero-interpolation rules swapped linear trapezoidal rules effects .","code":""},{"path":"http://billdenney.github.io/pknca/articles/v23-auc-integration-methods.html","id":"linear-uplogarithmic-down-lin-uplog-down-interpolation","dir":"Articles","previous_headings":"Description of methods of integrating between two concentrations before Tlast","what":"Linear up/logarithmic down (\"lin up/log down\") interpolation","title":"AUC integration methods","text":"Linear /logarithmic interpolation commonly used method PK, default PKNCA. Linear /logarithmic interpolation often used exogenous substance dosed measured, elimination likely occurs first-order elimination body. Linear /logarithmic interpolation uses following rules order pair concentrations Tlast: concentrations zero, interpolate zero; concentrations decreasing second concentration zero, use logarithmic interpolation; concentrations decreasing Tlast increasing ever, use linear interpolation.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v23-auc-integration-methods.html","id":"linear-trapezoidal-linear-interpolation","dir":"Articles","previous_headings":"Description of methods of integrating between two concentrations before Tlast","what":"Linear trapezoidal (\"linear\") interpolation","title":"AUC integration methods","text":"Linear trapezoidal interpolation often used endogenous substance measured (possibly dosed), elimination may occur first-order elimination processes. Linear trapezoidal interpolation uses following rules order pair concentrations Tlast: concentrations zero, interpolate zero; Use linear interpolation times (rule).","code":""},{"path":"http://billdenney.github.io/pknca/articles/v23-auc-integration-methods.html","id":"linear-to-tmaxlogarithmic-after-tmax-lin-log-interpolation","dir":"Articles","previous_headings":"Description of methods of integrating between two concentrations before Tlast","what":"Linear to Tmax/logarithmic after Tmax (\"lin-log\") interpolation","title":"AUC integration methods","text":"Linear Tmax/logarithmic Tmax interpolation infrequently used. uses following rules order pair concentrations Tlast: concentrations zero, interpolate zero; concentrations Tmax, use linear interpolation; concentrations Tmax (Tlast) either concentration zero, use linear interpolation; concentrations Tmax neither zero, use logarithmic interpolation.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v23-auc-integration-methods.html","id":"auclast-extrapolation","dir":"Articles","previous_headings":"Description of methods of integrating between two concentrations after Tlast","what":"\"AUClast\" extrapolation","title":"AUC integration methods","text":"AUClast extrapolation Tlast simplest. extrapolation; extrapolated AUC integral zero.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v23-auc-integration-methods.html","id":"aucall-extrapolation","dir":"Articles","previous_headings":"Description of methods of integrating between two concentrations after Tlast","what":"\"AUCall\" extrapolation","title":"AUC integration methods","text":"AUCall extrapolation Tlast two rules: last concentration measured limit quantification (words, last time Tlast), extrapolation done; otherwise Integrate linearly triangle Tlast time zero concentration Tlast.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v23-auc-integration-methods.html","id":"aucinf-extrapolation","dir":"Articles","previous_headings":"Description of methods of integrating between two concentrations after Tlast","what":"\"AUCinf\" extrapolation","title":"AUC integration methods","text":"AUCinf extrapolation requires estimation half-life. extrapolates using equation \\(Extrap = \\frac{C_{last}}{\\lambda_z}\\)","code":""},{"path":"http://billdenney.github.io/pknca/articles/v23-auc-integration-methods.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"AUC integration methods","text":"Example PK Clast LLOQ; lin /log interpolation method; AUCinf extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; lin /log interpolation method; AUClast extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; lin /log interpolation method; AUCall extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; linear interpolation method; AUCinf extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; linear interpolation method; AUClast extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; linear interpolation method; AUCall extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; lin-log interpolation method; AUCinf extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; lin-log interpolation method; AUClast extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; lin-log interpolation method; AUCall extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; lin /log interpolation method; AUCinf extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; lin /log interpolation method; AUClast extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; lin /log interpolation method; AUCall extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; linear interpolation method; AUCinf extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; linear interpolation method; AUClast extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; linear interpolation method; AUCall extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; lin-log interpolation method; AUCinf extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; lin-log interpolation method; AUClast extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Clast LLOQ; lin-log interpolation method; AUCall extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Concentrations increase decrease Tmax zeros middle; lin /log interpolation method; AUCinf extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Concentrations increase decrease Tmax zeros middle; lin /log interpolation method; AUClast extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Concentrations increase decrease Tmax zeros middle; lin /log interpolation method; AUCall extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Concentrations increase decrease Tmax zeros middle; linear interpolation method; AUCinf extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Concentrations increase decrease Tmax zeros middle; linear interpolation method; AUClast extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Concentrations increase decrease Tmax zeros middle; linear interpolation method; AUCall extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Concentrations increase decrease Tmax zeros middle; lin-log interpolation method; AUCinf extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Concentrations increase decrease Tmax zeros middle; lin-log interpolation method; AUClast extrapolation method (AUC type); keeping BLQ values (default BLQ handling) Example PK Concentrations increase decrease Tmax zeros middle; lin-log interpolation method; AUCall extrapolation method (AUC type); keeping BLQ values (default BLQ handling)","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"introduction-to-pknca-and-basics-of-its-use","dir":"Articles","previous_headings":"","what":"Introduction to PKNCA and Basics of Its Use","title":"PKNCA Training Sessions","text":"Creation materials partially supported funding Metrum Research Group.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"introduction-to-pknca","dir":"Articles","previous_headings":"Introduction to PKNCA and Basics of Its Use","what":"Introduction to PKNCA","title":"PKNCA Training Sessions","text":"PKNCA tool calculating noncompartmental analysis (NCA) results pharmacokinetic (PK) data. … , already knew wouldn’t . PKNCA several foci: approximately 100% test coverage. focus scriptable. try know want, decisions can overridden, question may cause error unanticipated result, either result output error raised.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"enjoy","dir":"Articles","previous_headings":"Introduction to PKNCA and Basics of Its Use","what":"Enjoy!","title":"PKNCA Training Sessions","text":"hope whale good time training.  (Foreshadowing…)","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"some-nca-definitions","dir":"Articles","previous_headings":"Introduction to PKNCA and Basics of Its Use","what":"Some NCA Definitions","title":"PKNCA Training Sessions","text":"Cmax: maximum observed concentration Tmax: time maximum observed concentration tlast: time last concentration limit quantification AUClast: AUC time zero tlast AUCint: AUC time zero end interval time, often extrapolated interpolated (e.g. AUC0-24hr) AUC∞: AUC time zero tlast extrapolated tlast time infinity using half life","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"nca-data-are-not-tidy-as-a-single-dataset","dir":"Articles","previous_headings":"Dataset Basics","what":"NCA Data are Not Tidy as a Single Dataset","title":"PKNCA Training Sessions","text":"“Tidy datasets… specific structure: variable column, observation row, type observational unit table.” - Hadley Wickham (https://doi.org/10.18637/jss.v059.i10) CDISC NCA tidied, PKNCA follows model: concentration-time dataset (PC domain; PKNCAconc() object) dose-time dataset (EX/EC domains; PKNCAdose() object) NCA results dataset (PP domain; pk.nca() output)","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"dataset-basics-minimum-data","dir":"Articles","previous_headings":"Dataset Basics","what":"Dataset Basics: Minimum data","title":"PKNCA Training Sessions","text":"PKNCA requires least concentration, time, want calculate.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"dataset-basics-what-columns-are-needed","dir":"Articles","previous_headings":"Dataset Basics","what":"Dataset Basics: What columns are needed?","title":"PKNCA Training Sessions","text":"Column names provided input PKNCAconc() PKNCAdose(); hard-coded. Columns can used include: PKNCAconc(): concentration, time, groups; data exclusions; half-life inclusion exclusion PKNCAdose(): dose, time, groups; route, rate/duration infusion; data exclusions intervals given PKNCAdata(): groups, start, end, NCA parameters calculate","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"dataset-basics-example-data","dir":"Articles","previous_headings":"Dataset Basics","what":"Dataset Basics: Example data","title":"PKNCA Training Sessions","text":"following slides, abbreviated data example study two treatments (“” “B”) administered two subjects (1 2). PKNCA considers groups order subject identifier last group (last group forward slash, /, / present). indicated order (...|Treatment+Subject), PKNCA automatically knows keep Treatment drop Subject summaries (later).","code":""},{"path":[]},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"dataset-basics-example-interval-data","dir":"Articles","previous_headings":"Dataset Basics","what":"Dataset Basics: Example interval data","title":"PKNCA Training Sessions","text":"Groups required, want intervals calculated group.","code":"d_interval_1 <-   data.frame(     start=0, end=8,     cmax=TRUE, tmax=TRUE, auclast=TRUE   )"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"hands-on-first-nca-calculation-with-pknca","dir":"Articles","previous_headings":"Dataset Basics","what":"Hands-on: First NCA calculation with PKNCA","title":"PKNCA Training Sessions","text":"","code":"library(dplyr) library(ggplot2) library(tidyr) library(purrr) library(PKNCA) # Concentration data setup d_conc <-   datasets::Theoph %>%   filter(Subject %in% 1) o_conc <- PKNCAconc(conc~Time, data=d_conc) # Setup intervals for calculation d_intervals <- data.frame(start=0, end=24, cmax=TRUE, tmax=TRUE,                           auclast=TRUE, aucint.inf.obs=TRUE) # Combine concentration and dose o_data <- PKNCAdata(o_conc, intervals=d_intervals) # Calculate the results (suppressMessages() hides a message that isn't needed now) o_result <- suppressMessages(pk.nca(o_data)) # summary(o_result)"},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"what-functions-are-the-most-used","dir":"Articles","previous_headings":"PKNCA Functions","what":"What functions are the most used?","title":"PKNCA Training Sessions","text":"information concentration data given: concentration, time Optional information includes: grouping information (usually given), data exclude, half-life inclusion exclusion columns dose amount time optional Optional information includes: rate duration infusion, data exclude PKNCAconc object must given; PKNCAdose object optional; interval definitions usually given; calculation options may given pk.nca(): calculate NCA parameters data object PKNCAresult object","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"how-do-i-do-a-simple-calculation-all-steps","dir":"Articles","previous_headings":"PKNCA Functions","what":"How do I do a simple calculation? all steps","title":"PKNCA Training Sessions","text":"break subsequent slides.","code":"# Concentration data setup d_conc <-   datasets::Theoph %>%   filter(Subject %in% 1) o_conc <- PKNCAconc(conc~Time, data=d_conc) # Dose data setup d_dose <-   datasets::Theoph %>%   filter(Subject %in% 1) %>%   filter(Time == 0) o_dose <- PKNCAdose(Dose~Time, data=d_dose) # Combine concentration and dose o_data <- PKNCAdata(o_conc, o_dose) # Calculate the results o_result <- pk.nca(o_data)"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"how-do-i-do-a-simple-calculation-concentration-data","dir":"Articles","previous_headings":"PKNCA Functions","what":"How do I do a simple calculation? Concentration data","title":"PKNCA Training Sessions","text":"","code":"# Load your dataset as a data.frame d_conc <-   datasets::Theoph %>%   filter(Subject %in% 1) # Take a look at the data pander::pander(head(d_conc, 2)) # Define the PKNCAconc object indicating the concentration and time columns, the # dataset, and any other options. o_conc <- PKNCAconc(conc~Time, data=d_conc)"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"how-do-i-do-a-simple-calculation-dose-data","dir":"Articles","previous_headings":"PKNCA Functions","what":"How do I do a simple calculation? Dose data","title":"PKNCA Training Sessions","text":"","code":"# Load your dataset as a data.frame d_dose <-   datasets::Theoph %>%   filter(Subject %in% 1) %>%   filter(Time == 0) # Take a look at the data pander::pander(d_dose) # Define the PKNCAdose object indicating the dose amount and time columns, the # dataset, and any other options. o_dose <- PKNCAdose(Dose~Time, data=d_dose)"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"how-do-i-do-a-simple-calculation-calculate-results","dir":"Articles","previous_headings":"PKNCA Functions","what":"How do I do a simple calculation? Calculate results","title":"PKNCA Training Sessions","text":"","code":"# Combine the PKNCAconc and PKNCAdose objects.  You can add interval # specifications and calculation options here. o_data <- PKNCAdata(o_conc, o_dose) # Calculate the results o_result <- pk.nca(o_data)"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"how-do-i-do-a-simple-calculation-get-results","dir":"Articles","previous_headings":"PKNCA Functions","what":"How do I do a simple calculation? Get results","title":"PKNCA Training Sessions","text":"calculate summary statistics, use summary(); extract individual-level results, use .data.frame(). \"caption\" attribute summary describes summary statistics calculated parameter. (Hint: pander::pander() knows use put caption table report.) individual results contain columns start time, end time, grouping variables (none example), parameter names, values, value excluded.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"how-do-i-do-a-simple-calculation-get-summary-results","dir":"Articles","previous_headings":"PKNCA Functions","what":"How do I do a simple calculation? Get summary results","title":"PKNCA Training Sessions","text":"auclast, cmax, aucinf.obs: geometric mean geometric coefficient variation; tmax: median range; half.life: arithmetic mean standard deviation","code":"# Look at summarized results pander::pander(summary(o_result))"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"how-do-i-do-a-simple-calculation-get-individual-results","dir":"Articles","previous_headings":"PKNCA Functions","what":"How do I do a simple calculation? Get individual results","title":"PKNCA Training Sessions","text":"Use .data.frame() get individual NCA parameter results.","code":"# Look at individual results pander::pander(head(   as.data.frame(o_result),   n=3 ))"},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"how-does-pknca-think-about-data","dir":"Articles","previous_headings":"PKNCA datasets","what":"How does PKNCA think about data?","title":"PKNCA Training Sessions","text":"Three types data inputs calculation PKNCA: concentration-time (PKNCAconc), dose-time (PKNCAdose), intervals. PKNCAconc PKNCAdose objects can optionally groups. groups PKNCAdose object must fewer groups PKNCAconc object (example, subjects treatment arm may receive dose).","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"what-is-an-interval-and-how-is-it-different-than-a-group","dir":"Articles","previous_headings":"PKNCA datasets","what":"What is an “interval” and how is it different than a “group”?","title":"PKNCA Training Sessions","text":"group separates one full concentration-time profile subject may ever want consider time. Usually, groups study, treatment, analyte, subject (groups can useful depending study design). interval selects time range within group. One time can zero intervals, zero one group. Intervals can adjacent (0-12 12-24) overlap (0-12 0-24). words, one sample may used one interval, one sample never used one group. Legend: group contains points figure. Shaded regions indicate intervals. Arrows indicate points shared intervals within group.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"common-data-management-requirements-before-sending-data-to-pknca","dir":"Articles","previous_headings":"PKNCA datasets","what":"Common data management requirements before sending data to PKNCA","title":"PKNCA Training Sessions","text":"Time must missing PKNCAconc (given PKNCAdose, must missing). limit quantification (BLQ) concentrations must set zero (NA). Imputation time zero required AUC calculation. Especially actual-time calculations, imputation beginning interval usually needed. Columns must created : Concentration dose, Time usually columns study, treatment arm, subject; sometimes analyte, formulation, period (needed case subject receives treatment arm multiple times)","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"setup-your-concentration-data","dir":"Articles","previous_headings":"PKNCA datasets","what":"Setup your concentration data","title":"PKNCA Training Sessions","text":"Concentration data must numeric","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"setup-your-concentration-data-1","dir":"Articles","previous_headings":"PKNCA datasets","what":"Setup your concentration data","title":"PKNCA Training Sessions","text":"Concentration data must numeric Time must numeric missing","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"setup-your-concentration-data-2","dir":"Articles","previous_headings":"PKNCA datasets","what":"Setup your concentration data","title":"PKNCA Training Sessions","text":"Concentration data must numeric Time must numeric missing Groups can anything, setup level individual  Group: 🗸 pod killer whales","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"setup-your-dosing-data-if-you-have-it-and-even-if-you-dont","dir":"Articles","previous_headings":"PKNCA datasets","what":"Setup your dosing data (if you have it and even if you don’t)","title":"PKNCA Training Sessions","text":"Normal dosing data setup: PKNCAdose(dose~time|actarm+usubjid, data=d_dose) PKNCAdose(~time|actarm+usubjid, data=d_dose) PKNCAdose(dose~.|actarm+usubjid, data=d_dose) Useful dose amounts times within arm: PKNCAdose(dose~time|actarm, data=d_dose) Useful dose amount times within arm: PKNCAdose(dose~.|actarm, data=d_dose) Useful times within arm dose may differ: PKNCAdose(~time|actarm, data=d_dose)","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"define-your-intervals","dir":"Articles","previous_headings":"PKNCA datasets","what":"Define your intervals","title":"PKNCA Training Sessions","text":"Intervals columns : start end times interval, groups matching level grouping; intervals apply merge/join groups specify parameter want, parameters.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"define-your-intervals-example","dir":"Articles","previous_headings":"PKNCA datasets","what":"Define your intervals: example","title":"PKNCA Training Sessions","text":"time 0 24, calculate AUClast time 0 infinity, calculate cmax, tmax, half.life, aucinf.obs","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"prepare-your-data-for-calculation","dir":"Articles","previous_headings":"Calculations above the hood","what":"Prepare your data for calculation","title":"PKNCA Training Sessions","text":"","code":"d_conc <-   datasets::Theoph %>%   mutate(     Treatment=       case_when(         Dose <= median(Dose)~\"Low dose\",         TRUE~\"High dose\"       )   ) # The study was single-dose d_dose <-   d_conc %>%   select(Treatment, Subject, Dose) %>%   unique() %>%   mutate(dose_time=0)"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"calculate-without-dosing-data","dir":"Articles","previous_headings":"Calculations above the hood","what":"Calculate without dosing data","title":"PKNCA Training Sessions","text":"Whoops! Without dosing, need intervals.","code":"o_conc <- PKNCAconc(conc~Time|Treatment+Subject, data=d_conc) try({   o_data <- PKNCAdata(o_conc)   summary(pk.nca(o_data)) }) ## Error in PKNCAdata.default(data.conc = data.conc, data.dose = data.dose,  :  ##   If data.dose is not given, intervals must be given"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"calculate-without-dosing-data-try-2","dir":"Articles","previous_headings":"Calculations above the hood","what":"Calculate without dosing data, try 2","title":"PKNCA Training Sessions","text":"","code":"o_conc <- PKNCAconc(conc~Time|Treatment+Subject, data=d_conc) d_intervals <- data.frame(start=0, end=Inf, cmax=TRUE, tmax=TRUE,                           half.life=TRUE, aucinf.obs=TRUE) o_data_manual_intervals <- PKNCAdata(o_conc, intervals=d_intervals) summary(pk.nca(o_data_manual_intervals)) ## No dose information provided, calculations requiring dose will return NA. ##  start end Treatment N        cmax               tmax   half.life aucinf.obs ##      0 Inf High dose 5 9.16 [19.4] 3.48 [0.980, 3.55] 7.73 [1.08] 120 [26.2] ##      0 Inf  Low dose 7 8.30 [15.2] 1.12 [0.630, 2.02] 8.50 [2.67] 111 [31.6] ##  ## Caption: cmax, aucinf.obs: geometric mean and geometric coefficient of variation; tmax: median and range; half.life: arithmetic mean and standard deviation; N: number of subjects"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"dosing-data-helps-with-interval-setup","dir":"Articles","previous_headings":"Calculations above the hood","what":"Dosing data helps with interval setup","title":"PKNCA Training Sessions","text":"","code":"o_conc <- PKNCAconc(conc~Time|Treatment+Subject, data=d_conc) o_dose <- PKNCAdose(Dose~dose_time|Treatment+Subject, data=d_dose) o_data_auto_intervals <- PKNCAdata(o_conc, o_dose) o_data_auto_intervals$intervals$aucint.inf.obs <- TRUE summary(pk.nca(o_data_auto_intervals)) ##  start end Treatment N     auclast        cmax               tmax   half.life ##      0  24  Low dose 7 70.2 [14.4]           .                  .           . ##      0 Inf  Low dose 7           . 8.30 [15.2] 1.12 [0.630, 2.02] 8.50 [2.67] ##      0  24 High dose 5 81.3 [34.2]           .                  .           . ##      0 Inf High dose 5           . 9.16 [19.4] 3.48 [0.980, 3.55] 7.73 [1.08] ##  aucinf.obs aucint.inf.obs ##           .    94.1 [22.5] ##  111 [31.6]     111 [31.6] ##           .     105 [23.3] ##  120 [26.2]     120 [26.2] ##  ## Caption: auclast, cmax, aucinf.obs, aucint.inf.obs: geometric mean and geometric coefficient of variation; tmax: median and range; half.life: arithmetic mean and standard deviation; N: number of subjects"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"auc-considerations-with-pknca-13","dir":"Articles","previous_headings":"Calculations above the hood","what":"AUC considerations with PKNCA (1/3)","title":"PKNCA Training Sessions","text":"considerations mainly apply actual-time data; nominal-time data usually measurements start end time interval. interval start end 0 24 (last measurement time just 24 hours): AUClast calculated based points within interval (AUClast color figure)","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"auc-considerations-with-pknca-23","dir":"Articles","previous_headings":"Calculations above the hood","what":"AUC considerations with PKNCA (2/3)","title":"PKNCA Training Sessions","text":"considerations mainly apply actual-time data; nominal-time data usually measurements start end time interval. interval start end 0 24 (last measurement time just 24 hours): AUCint looks points interval, measurement interval end time, interpolates extrapolates interval end time (AUClast AUCint color figure)","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"auc-considerations-with-pknca-23-1","dir":"Articles","previous_headings":"Calculations above the hood","what":"AUC considerations with PKNCA (2/3)","title":"PKNCA Training Sessions","text":"considerations mainly apply actual-time data; nominal-time data usually measurements start end time interval. interval start end 0 24 (last measurement time just 24 hours): AUC∞ calculated based AUClast, tlast, half-life tlast, using data within interval– data end interval. Ensure interval used calculating AUC∞ includes points desired (usually, end=Inf).","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"steady-state-intramuscular-administration","dir":"Articles","previous_headings":"Hands-on workshop","what":"Steady-state intramuscular administration","title":"PKNCA Training Sessions","text":"data exercise PK study amikacin killer whale beluga whale. (DOI: 10.1638/03-078)  (Callback…)","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"steady-state-intramuscular-administration-1","dir":"Articles","previous_headings":"Hands-on workshop","what":"Steady-state intramuscular administration","title":"PKNCA Training Sessions","text":"","code":"library(PKNCA)  d_conc <- read.csv(\"c:/tmp/whale_conc.csv\") d_dose <- read.csv(\"c:/tmp/whale_dose.csv\") head(d_conc) head(d_dose)  o_conc <- PKNCAconc(concentration~time|Animal, data=d_conc) o_dose <- PKNCAdose(dose~time|Animal, data=d_dose) o_data <- PKNCAdata(o_conc, o_dose) o_data$intervals o_nca <- pk.nca(o_data) summary(o_nca) summary(o_nca, drop.group=c()) as.data.frame(o_nca)"},{"path":[]},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"including-and-excluding-data-points","dir":"Articles","previous_headings":"Control your data","what":"Including and excluding data points","title":"PKNCA Training Sessions","text":"Data may included/excluded two ways: Overall: excluded row data analyses Half-life: excluded half-life calculations, included analyses ways including/excluding data, defined column input data. column either NA empty string (\"\") indicate “” text indicate “yes”.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"exclude-data-points-overall","dir":"Articles","previous_headings":"Control your data","what":"Exclude data points overall","title":"PKNCA Training Sessions","text":"Use exclude argument PKNCAconc() PKNCAdose(). use exclude, give data PKNCA:  , PKNCA thinks :","code":"d_before_exclude <-  data.frame(   time=0:4,   conc=c(0, 2, 1, 0.5, 0.25),   not_this=c(NA, \"Not this\", rep(NA, 3))  ) o_conc <-  PKNCAconc(   data=d_before_exclude,   conc~time,   exclude=\"not_this\"  ) pander::pander(   d_before_exclude %>%     filter(is.na(not_this)) )"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"exclude-data-points-overall-1","dir":"Articles","previous_headings":"Control your data","what":"Exclude data points overall","title":"PKNCA Training Sessions","text":"","code":"o_conc <- PKNCAconc(data=d_before_exclude, conc~time, exclude=\"not_this\")"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"digression-how-is-λz-automatically-calculated","dir":"Articles","previous_headings":"Control your data","what":"Digression: How is λz automatically calculated?","title":"PKNCA Training Sessions","text":"Filter data first point tmax (tmax allow.tmax..half.life=TRUE) tlast excluding BLQ middle. Repeat sets points first point included. 3 points available, calculated. Among fits, select best adjusted r2 (within tolerance adj.r.squared.factor). Require λz> 0. one fit available point, select one points included. Note: WinNonlin first requires λz> 0 selects adjusted r2. Therefore, WinNonlin occasionally provide half-life PKNCA , fit line good (measured r2). selection filtering order intentional feature PKNCA, generally minimal impact summary statistics quality half-life fit usually low scenario.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"λz-control-manual-exclusions-and-inclusions-of-data-points","dir":"Articles","previous_headings":"Control your data","what":"λz control (manual exclusions and inclusions of data points)","title":"PKNCA Training Sessions","text":"Use exclude_half.life include_half.life argument PKNCAconc(). two arguments behave differently points selected half-life. exclude_half.life uses automatic point selection method curve stripping (described ), excludes individual points calculation. include_half.life uses automatic point selection method, points specifically noted analyst included.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"urine-calculations","dir":"Articles","previous_headings":"Less-common calculations","what":"Urine calculations","title":"PKNCA Training Sessions","text":"","code":"d_urine <-   data.frame(     conc=c(1, 2, 3),     urine_volume=c(200, 100, 300),     time=c(1, 2, 3)   ) o_conc <- PKNCAconc(data=d_urine, conc~time, volume=\"urine_volume\") d_intervals <- data.frame(start=0, end=24, ae=TRUE) o_data <- PKNCAdata(o_conc, intervals=d_intervals) o_nca <- suppressMessages(pk.nca(o_data)) summary(o_nca) ##  start end   ae ##      0  24 1300 ##  ## Caption: ae: geometric mean and geometric coefficient of variation"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"urine-calculations-understanding-what-is-happening-and-potential-hiccups","dir":"Articles","previous_headings":"Less-common calculations","what":"Urine calculations: understanding what is happening and potential hiccups","title":"PKNCA Training Sessions","text":"Intervals urine treated interval type. Specifically, PKNCA look outside start end interval. Watch e.g. 24-hour urine amount included one interval start = 0 end = 24. Watch actual start end time outside interval therefore omitted calculations.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"pknca-only-calculates-what-is-required-not-every-possible-parameter-1-of-2","dir":"Articles","previous_headings":"Calculations below the hood","what":"PKNCA only calculates what is required, not every possible parameter (1 of 2)","title":"PKNCA Training Sessions","text":"don’t need parameter, PKNCA won’t calculate . example, need cmax, ’ll get cmax.","code":"o_conc <- PKNCAconc(data=data.frame(conc=2^-(1:4), time=0:3), conc~time) o_data <- PKNCAdata(o_conc, intervals=data.frame(start=0, end=Inf, cmax=TRUE)) o_nca <- suppressMessages(pk.nca(o_data)) as.data.frame(o_nca) ## # A tibble: 1 × 5 ##   start   end PPTESTCD PPORRES exclude ##   <dbl> <dbl> <chr>      <dbl> <chr>   ## 1     0   Inf cmax         0.5 NA"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"pknca-only-calculates-what-is-required-not-every-possible-parameter-2-of-2","dir":"Articles","previous_headings":"Calculations below the hood","what":"PKNCA only calculates what is required, not every possible parameter (2 of 2)","title":"PKNCA Training Sessions","text":"need AUC0-, PKNCA calculate required parameters behind scenes.","code":"o_data <-   PKNCAdata(     o_conc,     intervals=       data.frame(         start=0, end=Inf,         aucinf.obs=TRUE       )   ) o_nca <- suppressMessages(pk.nca(o_data)) as.data.frame(o_nca) ## # A tibble: 12 × 5 ##    start   end PPTESTCD            PPORRES exclude ##    <dbl> <dbl> <chr>                 <dbl> <chr>   ##  1     0   Inf tmax                 0      NA      ##  2     0   Inf tlast                3      NA      ##  3     0   Inf clast.obs            0.0625 NA      ##  4     0   Inf lambda.z             0.693  NA      ##  5     0   Inf r.squared            1      NA      ##  6     0   Inf adj.r.squared        1      NA      ##  7     0   Inf lambda.z.time.first  1      NA      ##  8     0   Inf lambda.z.n.points    3      NA      ##  9     0   Inf clast.pred           0.0625 NA      ## 10     0   Inf half.life            1      NA      ## 11     0   Inf span.ratio           2      NA      ## 12     0   Inf aucinf.obs           0.721  NA"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"how-to-select-the-correct-parameters-for-calculations-aka-why-are-there-32-types-of-auc-in-pknca","dir":"Articles","previous_headings":"Calculations below the hood","what":"How to select the correct parameters for calculations (aka, why are there 32 types of AUC in PKNCA?)","title":"PKNCA Training Sessions","text":"CDISC one set names, precise (e.g. AUCINT doesn’t tell interpolation/extrapolation method). PKNCA tries everything everyone (terms parameters calculated), simultaneously tries precise. yields many parameters. See Selection Calculation Intervals vignette Parameters Available Calculation Interval section available parameters.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"when-are-intervals-partly-ignored","dir":"Articles","previous_headings":"Calculations below the hood","what":"When are intervals (partly) ignored?","title":"PKNCA Training Sessions","text":"parameters reach outside start end interval additional information calculated. writing training materials (PKNCA version 0.9.5), parameters look outside aucint class parameters. AUCint may look end interval calculate concentration end. Note: Watch dose next concentration (e.g. dose 24 hours prior sample around 12 next around 25):","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"excluding-results-not-the-best-way","dir":"Articles","previous_headings":"Control your results","what":"Excluding results (Not the best way)","title":"PKNCA Training Sessions","text":"simple way exclude value results convert results data.frame drop rows don’t want: , parameters derived half-life remain.","code":"as.data.frame(o_nca) %>%   filter(PPTESTCD != \"half.life\") ## # A tibble: 11 × 5 ##    start   end PPTESTCD            PPORRES exclude ##    <dbl> <dbl> <chr>                 <dbl> <chr>   ##  1     0   Inf tmax                 0      NA      ##  2     0   Inf tlast                3      NA      ##  3     0   Inf clast.obs            0.0625 NA      ##  4     0   Inf lambda.z             0.693  NA      ##  5     0   Inf r.squared            1      NA      ##  6     0   Inf adj.r.squared        1      NA      ##  7     0   Inf lambda.z.time.first  1      NA      ##  8     0   Inf lambda.z.n.points    3      NA      ##  9     0   Inf clast.pred           0.0625 NA      ## 10     0   Inf span.ratio           2      NA      ## 11     0   Inf aucinf.obs           0.721  NA"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"excluding-results-the-best-way-12","dir":"Articles","previous_headings":"Control your results","what":"Excluding results (The best way, 1/2)","title":"PKNCA Training Sessions","text":"use exclude() function, parameters dependent excluded parameter excluded.","code":"o_nca_excluded <-   o_nca %>%   exclude(FUN=exclude_nca_span.ratio(3)) as.data.frame(o_nca_excluded) ## # A tibble: 12 × 5 ##    start   end PPTESTCD            PPORRES exclude        ##    <dbl> <dbl> <chr>                 <dbl> <chr>          ##  1     0   Inf tmax                 0      NA             ##  2     0   Inf tlast                3      NA             ##  3     0   Inf clast.obs            0.0625 NA             ##  4     0   Inf lambda.z             0.693  Span ratio < 3 ##  5     0   Inf r.squared            1      Span ratio < 3 ##  6     0   Inf adj.r.squared        1      Span ratio < 3 ##  7     0   Inf lambda.z.time.first  1      Span ratio < 3 ##  8     0   Inf lambda.z.n.points    3      Span ratio < 3 ##  9     0   Inf clast.pred           0.0625 Span ratio < 3 ## 10     0   Inf half.life            1      Span ratio < 3 ## 11     0   Inf span.ratio           2      Span ratio < 3 ## 12     0   Inf aucinf.obs           0.721  Span ratio < 3"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"excluding-results-the-best-way-22","dir":"Articles","previous_headings":"Control your results","what":"Excluding results (The best way, 2/2)","title":"PKNCA Training Sessions","text":"Now, everything dependent half-life excluded summaries.","code":"summary(o_nca) ##  start end aucinf.obs ##      0 Inf      0.721 ##  ## Caption: aucinf.obs: geometric mean and geometric coefficient of variation summary(o_nca_excluded) ##  start end aucinf.obs ##      0 Inf         NC ##  ## Caption: aucinf.obs: geometric mean and geometric coefficient of variation"},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"superposition","dir":"Articles","previous_headings":"NCA-related calculations","what":"Superposition","title":"PKNCA Training Sessions","text":"Superposition assumes linear kinetics can convert single-dose profile multi-dose.","code":"# Subject 2 is selected for a BLQ time=0 concentration d_prep <-   datasets::Theoph %>%   filter(Subject == 2) # Superposition to steady-state is the default d_ss <-   superposition(     conc=d_prep$conc,     time=d_prep$Time,     tau=24   ) # Going to steady-state is also an option # (n.tau=2 means the second dose) d_second_dose <-   superposition(     conc=d_prep$conc,     time=d_prep$Time,     tau=24,     n.tau=2   ) # Want the profile for the first two doses # together? d_first_two <-   superposition(     conc=d_prep$conc,     time=d_prep$Time,     tau=48, # 48 hours     n.tau=1, # One tau interval (0 to 48 hours)     dose.times=c(0, 24)   )"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"time-to-steady-state-calculations","dir":"Articles","previous_headings":"NCA-related calculations","what":"Time-to-Steady-state calculations","title":"PKNCA Training Sessions","text":"Time--steady-state (tss) can useful method confirm subject steady-state. PKNCA can calculate tss using trough concentrations either monoexponential increase toward steady-state (preferred) linear trend back final point.","code":"dose_times <- seq(0, 96-1, by=6) d_multidose <-   superposition(     conc=d_prep$conc,     time=d_prep$Time,     tau=96, # 48 hours     n.tau=1, # One tau interval (0 to 48 hours)     dose.times=dose_times   ) pk.tss.monoexponential(   conc=d_multidose$conc, time=d_multidose$time, subject=rep(1, nrow(d_multidose)),   time.dosing=dose_times, subject.dosing=rep(1, length(dose_times)),   output=\"single\" ) ##   tss.monoexponential.single ## 1                   22.53005"},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"graphics-are-intentionally-not-part-of-pknca-but-there-are-some-tricks-that-can-help","dir":"Articles","previous_headings":"Reporting","what":"Graphics are intentionally not part of PKNCA, but there are some tricks that can help…","title":"PKNCA Training Sessions","text":"Generate individual profiles using groups defined:","code":"o_conc <- PKNCAconc(conc~Time|Subject, data=datasets::Theoph) d_plot <-   grouped_df(data=datasets::Theoph, vars=names(getGroups(o_conc))) %>%   nest() %>%   mutate(     figure=       lapply(         pmap(.l=list(data=data), .f=ggplot,aes(x=Time, y=conc)),         FUN=\"+\",         geom_line()       )   ) # d_plot$figure"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"best-practices-for-data---pknca---knitr","dir":"Articles","previous_headings":"Reporting","what":"Best practices for Data -> PKNCA -> knitr","title":"PKNCA Training Sessions","text":"Make summary tables using summary() function NCA results, use pander::pander() make pretty table captions. aucinf.obs: geometric mean geometric coefficient variation Make NCA data listing using .data.frame() function NCA results.","code":"pander::pander(summary(o_nca)) pander::pander(as.data.frame(o_nca))"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"units-especially-clearance","dir":"Articles","previous_headings":"Reporting","what":"Units (especially clearance)","title":"PKNCA Training Sessions","text":"PKNCA supports units pknca_units_table() function. See Unit Assignment Conversion PKNCA vignette information. units specified, common place becomes issue clearance ends unusual units like “mg/(hr*ng/mL)” (units mg dosing, hr time, ng/mL concentration).","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"data-imputation","dir":"Articles","previous_headings":"Reporting","what":"Data imputation","title":"PKNCA Training Sessions","text":"data points required inputs : start interval AUC, end interval calculations (e.g. AUClast vs AUCint), interpolated concentrations end urine interval urinary PK calculations.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"iv-bolus-auc-need-to-add-c0","dir":"Articles","previous_headings":"Reporting","what":"IV bolus AUC (need to add C0)","title":"PKNCA Training Sessions","text":"Due need back-extrapolation C0, AUCs IV bolus dosing need use different AUC parameters \"aucivlast\" instead \"auclast\".","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"combined-multi-subject-data-e-g--sparse-animal-sampling","dir":"Articles","previous_headings":"Reporting","what":"Combined, multi-subject data (e.g. sparse animal sampling)","title":"PKNCA Training Sessions","text":"Sparse NCA calculations supported PKNCA. See Sparse NCA Calculations vignette information.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"secondary-parameters-e-g--bioavailability-and-renal-clearance","dir":"Articles","previous_headings":"Limitations","what":"Secondary parameters (e.g. bioavailability and renal clearance)","title":"PKNCA Training Sessions","text":"PKNCA (yet) ability calculate secondary PK parameters require looking one group/interval time.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"validation-of-pknca","dir":"Articles","previous_headings":"Limitations","what":"Validation of PKNCA","title":"PKNCA Training Sessions","text":"PKNCA extensive testing validation suite built-. run testing validation suite tests full report generated, see PKNCA Validation vignette.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"single--and-multiple-dose-single-analyte-setup-the-underlying-datasets","dir":"Articles","previous_headings":"Hands-on","what":"Single- and Multiple-dose, single analyte: Setup the underlying datasets","title":"PKNCA Training Sessions","text":"","code":"d_conc <-   datasets::Theoph %>%   rename(time=Time) %>%   mutate(     Subject=as.character(Subject)   ) d_multidose <-   PKNCAconc(conc~time|Subject, data=d_conc) %>%   superposition(tau=24, check.blq=FALSE) d_singledose_single_analyte <-   d_conc %>%   mutate(     Study_Part=\"Single\"   ) d_multidose_single_analyte <-   d_conc %>%   mutate(Day=1) %>%   bind_rows(     d_multidose %>% mutate(time=time + 120, Day=6)   ) %>%   mutate(     Study_Part=\"Multiple\"   )"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"single--and-multiple-dose-single-analyte-setup-the-concentration-and-dose-datasets","dir":"Articles","previous_headings":"Hands-on","what":"Single- and Multiple-dose, single analyte: Setup the concentration and dose datasets","title":"PKNCA Training Sessions","text":"","code":"d_single_multi_conc <- bind_rows(d_singledose_single_analyte, d_multidose_single_analyte) d_single_multi_dose <-   d_single_multi_conc %>%   filter(     (Study_Part %in% \"Single\" & time == 0) |       (Study_Part %in% \"Multiple\" & (time %% 24) == 0)   )"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"single--and-multiple-dose-single-analyte-perform-basic-analysis","dir":"Articles","previous_headings":"Hands-on","what":"Single- and Multiple-dose, single analyte: Perform basic analysis","title":"PKNCA Training Sessions","text":"","code":"o_conc <- PKNCAconc(data=d_single_multi_conc, conc~time|Study_Part+Subject) o_dose <- PKNCAdose(data=d_single_multi_dose, Dose~time|Study_Part+Subject) o_data <- PKNCAdata(o_conc, o_dose) o_data$intervals %>% select(-Subject) %>% unique() %>% as.data.frame() ##   start end auclast aucall aumclast aumcall aucint.last aucint.last.dose ## 1     0  24    TRUE  FALSE    FALSE   FALSE       FALSE            FALSE ## 2     0 Inf   FALSE  FALSE    FALSE   FALSE       FALSE            FALSE ## 3     0 120    TRUE  FALSE    FALSE   FALSE       FALSE            FALSE ## 4   120 144    TRUE  FALSE    FALSE   FALSE       FALSE            FALSE ##   aucint.all aucint.all.dose    c0  cmax  cmin  tmax tlast tfirst clast.obs ## 1      FALSE           FALSE FALSE FALSE FALSE FALSE FALSE  FALSE     FALSE ## 2      FALSE           FALSE FALSE  TRUE FALSE  TRUE FALSE  FALSE     FALSE ## 3      FALSE           FALSE FALSE  TRUE FALSE  TRUE FALSE  FALSE     FALSE ## 4      FALSE           FALSE FALSE  TRUE FALSE  TRUE FALSE  FALSE     FALSE ##   cl.last cl.all     f mrt.last mrt.iv.last vss.last vss.iv.last   cav ## 1   FALSE  FALSE FALSE    FALSE       FALSE    FALSE       FALSE FALSE ## 2   FALSE  FALSE FALSE    FALSE       FALSE    FALSE       FALSE FALSE ## 3   FALSE  FALSE FALSE    FALSE       FALSE    FALSE       FALSE FALSE ## 4   FALSE  FALSE FALSE    FALSE       FALSE    FALSE       FALSE FALSE ##   cav.int.last cav.int.all ctrough cstart   ptr  tlag deg.fluc swing  ceoi ## 1        FALSE       FALSE   FALSE  FALSE FALSE FALSE    FALSE FALSE FALSE ## 2        FALSE       FALSE   FALSE  FALSE FALSE FALSE    FALSE FALSE FALSE ## 3        FALSE       FALSE   FALSE  FALSE FALSE FALSE    FALSE FALSE FALSE ## 4        FALSE       FALSE   FALSE  FALSE FALSE FALSE    FALSE FALSE FALSE ##   aucabove.predose.all aucabove.trough.all count_conc totdose    ae clr.last ## 1                FALSE               FALSE      FALSE   FALSE FALSE    FALSE ## 2                FALSE               FALSE      FALSE   FALSE FALSE    FALSE ## 3                FALSE               FALSE      FALSE   FALSE FALSE    FALSE ## 4                FALSE               FALSE      FALSE   FALSE FALSE    FALSE ##   clr.obs clr.pred    fe sparse_auclast sparse_auc_se sparse_auc_df time_above ## 1   FALSE    FALSE FALSE          FALSE         FALSE         FALSE      FALSE ## 2   FALSE    FALSE FALSE          FALSE         FALSE         FALSE      FALSE ## 3   FALSE    FALSE FALSE          FALSE         FALSE         FALSE      FALSE ## 4   FALSE    FALSE FALSE          FALSE         FALSE         FALSE      FALSE ##   aucivlast aucivall aucivint.last aucivint.all aucivpbextlast aucivpbextall ## 1     FALSE    FALSE         FALSE        FALSE          FALSE         FALSE ## 2     FALSE    FALSE         FALSE        FALSE          FALSE         FALSE ## 3     FALSE    FALSE         FALSE        FALSE          FALSE         FALSE ## 4     FALSE    FALSE         FALSE        FALSE          FALSE         FALSE ##   aucivpbextint.last aucivpbextint.all half.life r.squared adj.r.squared ## 1              FALSE             FALSE     FALSE     FALSE         FALSE ## 2              FALSE             FALSE      TRUE     FALSE         FALSE ## 3              FALSE             FALSE     FALSE     FALSE         FALSE ## 4              FALSE             FALSE     FALSE     FALSE         FALSE ##   lambda.z lambda.z.time.first lambda.z.n.points clast.pred span.ratio ## 1    FALSE               FALSE             FALSE      FALSE      FALSE ## 2    FALSE               FALSE             FALSE      FALSE      FALSE ## 3    FALSE               FALSE             FALSE      FALSE      FALSE ## 4    FALSE               FALSE             FALSE      FALSE      FALSE ##   thalf.eff.last thalf.eff.iv.last kel.last kel.iv.last aucinf.obs aucinf.pred ## 1          FALSE             FALSE    FALSE       FALSE      FALSE       FALSE ## 2          FALSE             FALSE    FALSE       FALSE       TRUE       FALSE ## 3          FALSE             FALSE    FALSE       FALSE      FALSE       FALSE ## 4          FALSE             FALSE    FALSE       FALSE      FALSE       FALSE ##   aumcinf.obs aumcinf.pred aucint.inf.obs aucint.inf.obs.dose aucint.inf.pred ## 1       FALSE        FALSE          FALSE               FALSE           FALSE ## 2       FALSE        FALSE          FALSE               FALSE           FALSE ## 3       FALSE        FALSE          FALSE               FALSE           FALSE ## 4       FALSE        FALSE          FALSE               FALSE           FALSE ##   aucint.inf.pred.dose aucivinf.obs aucivinf.pred aucivpbextinf.obs ## 1                FALSE        FALSE         FALSE             FALSE ## 2                FALSE        FALSE         FALSE             FALSE ## 3                FALSE        FALSE         FALSE             FALSE ## 4                FALSE        FALSE         FALSE             FALSE ##   aucivpbextinf.pred aucpext.obs aucpext.pred cl.obs cl.pred mrt.obs mrt.pred ## 1              FALSE       FALSE        FALSE  FALSE   FALSE   FALSE    FALSE ## 2              FALSE       FALSE        FALSE  FALSE   FALSE   FALSE    FALSE ## 3              FALSE       FALSE        FALSE  FALSE   FALSE   FALSE    FALSE ## 4              FALSE       FALSE        FALSE  FALSE   FALSE   FALSE    FALSE ##   mrt.iv.obs mrt.iv.pred mrt.md.obs mrt.md.pred vz.obs vz.pred vss.obs vss.pred ## 1      FALSE       FALSE      FALSE       FALSE  FALSE   FALSE   FALSE    FALSE ## 2      FALSE       FALSE      FALSE       FALSE  FALSE   FALSE   FALSE    FALSE ## 3      FALSE       FALSE      FALSE       FALSE  FALSE   FALSE   FALSE    FALSE ## 4      FALSE       FALSE      FALSE       FALSE  FALSE   FALSE   FALSE    FALSE ##   vss.iv.obs vss.iv.pred vss.md.obs vss.md.pred cav.int.inf.obs ## 1      FALSE       FALSE      FALSE       FALSE           FALSE ## 2      FALSE       FALSE      FALSE       FALSE           FALSE ## 3      FALSE       FALSE      FALSE       FALSE           FALSE ## 4      FALSE       FALSE      FALSE       FALSE           FALSE ##   cav.int.inf.pred thalf.eff.obs thalf.eff.pred thalf.eff.iv.obs ## 1            FALSE         FALSE          FALSE            FALSE ## 2            FALSE         FALSE          FALSE            FALSE ## 3            FALSE         FALSE          FALSE            FALSE ## 4            FALSE         FALSE          FALSE            FALSE ##   thalf.eff.iv.pred kel.obs kel.pred kel.iv.obs kel.iv.pred auclast.dn ## 1             FALSE   FALSE    FALSE      FALSE       FALSE      FALSE ## 2             FALSE   FALSE    FALSE      FALSE       FALSE      FALSE ## 3             FALSE   FALSE    FALSE      FALSE       FALSE      FALSE ## 4             FALSE   FALSE    FALSE      FALSE       FALSE      FALSE ##   aucall.dn aucinf.obs.dn aucinf.pred.dn aumclast.dn aumcall.dn aumcinf.obs.dn ## 1     FALSE         FALSE          FALSE       FALSE      FALSE          FALSE ## 2     FALSE         FALSE          FALSE       FALSE      FALSE          FALSE ## 3     FALSE         FALSE          FALSE       FALSE      FALSE          FALSE ## 4     FALSE         FALSE          FALSE       FALSE      FALSE          FALSE ##   aumcinf.pred.dn cmax.dn cmin.dn clast.obs.dn clast.pred.dn cav.dn ctrough.dn ## 1           FALSE   FALSE   FALSE        FALSE         FALSE  FALSE      FALSE ## 2           FALSE   FALSE   FALSE        FALSE         FALSE  FALSE      FALSE ## 3           FALSE   FALSE   FALSE        FALSE         FALSE  FALSE      FALSE ## 4           FALSE   FALSE   FALSE        FALSE         FALSE  FALSE      FALSE ##   Study_Part ## 1     Single ## 2     Single ## 3   Multiple ## 4   Multiple o_nca <- pk.nca(o_data)"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"single--and-multiple-dose-single-analyte-use-intervals-for-fewer-subjects","dir":"Articles","previous_headings":"Hands-on","what":"Single- and Multiple-dose, single analyte: Use intervals for fewer subjects","title":"PKNCA Training Sessions","text":"","code":"d_intervals <-   data.frame(     start=0,     end=24,     Subject=c(\"1\", \"2\"),     Study_Part=\"Single\",     aucinf.obs=TRUE   ) o_data <- PKNCAdata(o_conc, o_dose, intervals=d_intervals) o_nca <- pk.nca(o_data) ## Warning: Study_Part=Single; Subject=3: No intervals for data ## Warning: Study_Part=Single; Subject=4: No intervals for data ## Warning: Study_Part=Single; Subject=5: No intervals for data ## Warning: Study_Part=Single; Subject=6: No intervals for data ## Warning: Study_Part=Single; Subject=7: No intervals for data ## Warning: Study_Part=Single; Subject=8: No intervals for data ## Warning: Study_Part=Single; Subject=9: No intervals for data ## Warning: Study_Part=Single; Subject=10: No intervals for data ## Warning: Study_Part=Single; Subject=11: No intervals for data ## Warning: Study_Part=Single; Subject=12: No intervals for data ## Warning: Study_Part=Multiple; Subject=1: No intervals for data ## Warning: Study_Part=Multiple; Subject=2: No intervals for data ## Warning: Study_Part=Multiple; Subject=3: No intervals for data ## Warning: Study_Part=Multiple; Subject=4: No intervals for data ## Warning: Study_Part=Multiple; Subject=5: No intervals for data ## Warning: Study_Part=Multiple; Subject=6: No intervals for data ## Warning: Study_Part=Multiple; Subject=7: No intervals for data ## Warning: Study_Part=Multiple; Subject=8: No intervals for data ## Warning: Study_Part=Multiple; Subject=9: No intervals for data ## Warning: Study_Part=Multiple; Subject=10: No intervals for data ## Warning: Study_Part=Multiple; Subject=11: No intervals for data ## Warning: Study_Part=Multiple; Subject=12: No intervals for data summary(o_nca) ##  start end Study_Part N aucinf.obs ##      0  24     Single 2 144 [69.0] ##  ## Caption: aucinf.obs: geometric mean and geometric coefficient of variation; N: number of subjects"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"single--and-multiple-dose-single-analyte-use-custom-intervals-per-subjects","dir":"Articles","previous_headings":"Hands-on","what":"Single- and Multiple-dose, single analyte: Use custom intervals per subjects","title":"PKNCA Training Sessions","text":"","code":"# Find the time closest to 12 hours d_intervals_prep <-   d_single_multi_conc %>%   filter(Study_Part == \"Single\") %>%   mutate(     time_deviation=abs(time-12)   ) %>%   group_by(Subject, Study_Part) %>%   filter(time %in% time[time_deviation == min(time_deviation)]) d_intervals <-   d_intervals_prep %>%   select(Study_Part, Subject, end=time) %>%   mutate(     start=0,     aucinf.obs=TRUE   ) o_data <- PKNCAdata(o_conc, o_dose, intervals=d_intervals)  o_nca <- pk.nca(o_data) ## Warning: Study_Part=Multiple; Subject=1: No intervals for data ## Warning: Study_Part=Multiple; Subject=2: No intervals for data ## Warning: Study_Part=Multiple; Subject=3: No intervals for data ## Warning: Study_Part=Multiple; Subject=4: No intervals for data ## Warning: Study_Part=Multiple; Subject=5: No intervals for data ## Warning: Study_Part=Multiple; Subject=6: No intervals for data ## Warning: Study_Part=Multiple; Subject=7: No intervals for data ## Warning: Study_Part=Multiple; Subject=8: No intervals for data ## Warning: Study_Part=Multiple; Subject=9: No intervals for data ## Warning: Study_Part=Multiple; Subject=10: No intervals for data ## Warning: Study_Part=Multiple; Subject=11: No intervals for data ## Warning: Study_Part=Multiple; Subject=12: No intervals for data summary(o_nca, drop.group=c(\"Subject\", \"end\")) ## Warning: The `drop.group` argument of `summary.PKNCAresults()` is deprecated as of PKNCA ## 0.11.0. ## ℹ Please use the `drop_group` argument instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. ## Warning in get_summary_PKNCAresults_drop_group(object = object, drop_group = ## drop_group): drop.group including start or end may result in incorrect ## groupings (such as inaccurate comparison of intervals).  Drop these with care. ##  start Study_Part  N aucinf.obs ##      0     Single 12 120 [29.5] ##  ## Caption: aucinf.obs: geometric mean and geometric coefficient of variation; N: number of subjects"},{"path":"http://billdenney.github.io/pknca/articles/v30-training-session.html","id":"single--and-multiple-dose-parent-and-metabolite","dir":"Articles","previous_headings":"Hands-on","what":"Single- and Multiple-dose, parent and metabolite","title":"PKNCA Training Sessions","text":"","code":"d_single_multi_conc_multi_analyte <-   bind_rows(     d_single_multi_conc %>% mutate(Analyte=\"Parent\"),     d_single_multi_conc %>%       mutate(         Analyte=\"Metabolite\",         conc=conc/2       )   ) o_conc <-   PKNCAconc(     data=d_single_multi_conc_multi_analyte,     conc~time|Study_Part+Subject/Analyte   ) o_dose <- PKNCAdose(data=d_single_multi_dose, Dose~time|Study_Part+Subject) o_data <- PKNCAdata(o_conc, o_dose) o_nca <- pk.nca(o_data) summary(o_nca) ##  start end Study_Part    Analyte  N     auclast        cmax               tmax ##      0  24     Single     Parent 12 74.6 [24.3]           .                  . ##      0 Inf     Single     Parent 12           . 8.65 [17.0] 1.14 [0.630, 3.55] ##      0 120   Multiple     Parent 12  237 [38.0] 8.65 [17.0] 1.14 [0.630, 3.55] ##    120 144   Multiple     Parent 12  115 [28.4] 10.0 [21.0] 1.09 [0.630, 3.55] ##      0  24     Single Metabolite 12 37.3 [24.3]           .                  . ##      0 Inf     Single Metabolite 12           . 4.32 [17.0] 1.14 [0.630, 3.55] ##      0 120   Multiple Metabolite 12  118 [38.0] 4.32 [17.0] 1.14 [0.630, 3.55] ##    120 144   Multiple Metabolite 12 57.4 [28.4] 5.02 [21.0] 1.09 [0.630, 3.55] ##    half.life  aucinf.obs ##            .           . ##  8.18 [2.12]  115 [28.4] ##            .           . ##            .           . ##            .           . ##  8.18 [2.12] 57.4 [28.4] ##            .           . ##            .           . ##  ## Caption: auclast, cmax, aucinf.obs: geometric mean and geometric coefficient of variation; tmax: median and range; half.life: arithmetic mean and standard deviation; N: number of subjects"},{"path":"http://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Options for Controlling PKNCA","text":"PKNCA many options control function. options effects throughout package. options controlled using either PKNCA.options function passing options argument functions argument. options supported current version PKNCA (0.11.0.9000) listed descriptions.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html","id":"adj-r-squared-factor","dir":"Articles","previous_headings":"Options","what":"adj.r.squared.factor","title":"Options for Controlling PKNCA","text":"adjusted r^2 calculation lambda.z factor times number data points added . allows data points preferred calculation half-life. default value : 1e-04","code":""},{"path":"http://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html","id":"max-missing","dir":"Articles","previous_headings":"Options","what":"max.missing","title":"Options for Controlling PKNCA","text":"maximum fraction data may missing (‘NA’) calculate summary statistics business.* functions. default value : 0.5","code":""},{"path":"http://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html","id":"auc-method","dir":"Articles","previous_headings":"Options","what":"auc.method","title":"Options for Controlling PKNCA","text":"method used calculate AUC related statistics. Options : “lin /log ”, “linear”, “lin-log” default value : lin /log ","code":""},{"path":"http://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html","id":"conc-na","dir":"Articles","previous_headings":"Options","what":"conc.na","title":"Options for Controlling PKNCA","text":"missing (‘NA’) concentration values handled? See help ‘clean.conc.na’ use option. default value : drop","code":""},{"path":"http://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html","id":"conc-blq","dir":"Articles","previous_headings":"Options","what":"conc.blq","title":"Options for Controlling PKNCA","text":"limit quantification (zero, 0) concentration values handled? See help ‘clean.conc.blq’ use option. $first [1] “keep” $middle [1] “drop” $last [1] “keep”","code":""},{"path":"http://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html","id":"first-tmax","dir":"Articles","previous_headings":"Options","what":"first.tmax","title":"Options for Controlling PKNCA","text":"one concentration equal Cmax, time selected Tmax? ‘TRUE’, first selected. ‘FALSE’, last selected. default value : TRUE","code":""},{"path":"http://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html","id":"allow-tmax-in-half-life","dir":"Articles","previous_headings":"Options","what":"allow.tmax.in.half.life","title":"Options for Controlling PKNCA","text":"concentration time Tmax allowed half-life calculation? ‘TRUE’ yes ‘FALSE’ . default value : FALSE","code":""},{"path":"http://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html","id":"keep_interval_cols","dir":"Articles","previous_headings":"Options","what":"keep_interval_cols","title":"Options for Controlling PKNCA","text":"additional columns intervals kept results? NULL","code":""},{"path":"http://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html","id":"min-hl-points","dir":"Articles","previous_headings":"Options","what":"min.hl.points","title":"Options for Controlling PKNCA","text":"minimum number points required calculate half-life? default value : 3","code":""},{"path":"http://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html","id":"min-span-ratio","dir":"Articles","previous_headings":"Options","what":"min.span.ratio","title":"Options for Controlling PKNCA","text":"minimum span ratio required consider half-life valid? default value : 2","code":""},{"path":"http://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html","id":"max-aucinf-pext","dir":"Articles","previous_headings":"Options","what":"max.aucinf.pext","title":"Options for Controlling PKNCA","text":"maximum percent extrapolation consider AUCinf valid? default value : 20","code":""},{"path":"http://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html","id":"min-hl-r-squared","dir":"Articles","previous_headings":"Options","what":"min.hl.r.squared","title":"Options for Controlling PKNCA","text":"minimum r-squared value consider half-life calculation valid? default value : 0.9","code":""},{"path":"http://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html","id":"progress","dir":"Articles","previous_headings":"Options","what":"progress","title":"Options for Controlling PKNCA","text":"value pass purrr::pmap(.progress = ) create progress bar running default value : TRUE","code":""},{"path":"http://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html","id":"tau-choices","dir":"Articles","previous_headings":"Options","what":"tau.choices","title":"Options for Controlling PKNCA","text":"values tau (repeating interdose interval) considered attempting automatically determine intervals multiple dosing? See ‘choose.auc.intervals’ ‘find.tau’ information. ‘NA’ means automatically look potential interval. default value : NA","code":""},{"path":"http://billdenney.github.io/pknca/articles/v40-options-for-controlling-PKNCA.html","id":"single-dose-aucs","dir":"Articles","previous_headings":"Options","what":"single.dose.aucs","title":"Options for Controlling PKNCA","text":"data single-dose, intervals used?","code":""},{"path":"http://billdenney.github.io/pknca/articles/v60-PKNCA-validation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"PKNCA Validation","text":"run tests, package must installed tests: install.packages(pkgs=\"PKNCA\", INSTALL_opts=\"--install-tests\", type=\"source\") library(devtools) install_github(\"billdenney/pknca\", INSTALL_opts=\"--install-tests\") Testing validation results match local environment compared original environment important part confirmation package works expected. Re-running vignette local environment confirm local results match original package development. Test success confirmed existence failed tests; warnings expected testing (shown vignette reason); tests may skipped, expected well.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v60-PKNCA-validation.html","id":"summary-of-testing","dir":"Articles","previous_headings":"","what":"Summary of Testing","title":"PKNCA Validation","text":"following sentence dynamically generated summarize testing results: Tests run tests installed.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v60-PKNCA-validation.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"PKNCA Validation","text":"","code":"Sys.Date() ## [1] \"2024-06-28\" sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] dplyr_1.1.4       testthat_3.2.1.1  knitr_1.47        PKNCA_0.11.0.9000 ##  ## loaded via a namespace (and not attached): ##  [1] jsonlite_1.8.8    compiler_4.4.1    brio_1.1.5        tidyselect_1.2.1  ##  [5] jquerylib_0.1.4   systemfonts_1.1.0 textshaping_0.4.0 yaml_2.3.8        ##  [9] fastmap_1.2.0     lattice_0.22-6    R6_2.5.1          generics_0.1.3    ## [13] tibble_3.2.1      desc_1.4.3        bslib_0.7.0       pillar_1.9.0      ## [17] rlang_1.1.4       utf8_1.2.4        cachem_1.1.0      xfun_0.45         ## [21] fs_1.6.4          sass_0.4.9        memoise_2.0.1     cli_3.6.3         ## [25] pkgdown_2.0.9     magrittr_2.0.3    digest_0.6.36     grid_4.4.1        ## [29] lifecycle_1.0.4   nlme_3.1-164      vctrs_0.6.5       evaluate_0.24.0   ## [33] glue_1.7.0        ragg_1.3.2        fansi_1.0.6       rmarkdown_2.27    ## [37] purrr_1.0.2       tools_4.4.1       pkgconfig_2.0.3   htmltools_0.5.8.1"},{"path":"http://billdenney.github.io/pknca/articles/v80-writing-parameter-functions.html","id":"writing-pknca-parameter-functions","dir":"Articles","previous_headings":"","what":"Writing PKNCA Parameter Functions","title":"Writing PKNCA Parameter Functions","text":"PKNCA package designed comprehensive coverage needs noncompartmental analysis (NCA) specialist. many NCA parameters specified, may parameters defined, design modular accept new parameter definitions. inception, PKNCA built modules allow addition new components (removal unnecessary ones). Defining new NCA parameters straight-forward, guide describe done. three parts writing new NCA parameter PKNCA described .","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/articles/v80-writing-parameter-functions.html","id":"requirements","dir":"Articles","previous_headings":"Writing the Parameter Function","what":"Requirements","title":"Writing PKNCA Parameter Functions","text":"starting point writing new NCA parameter writing function calculates parameter value. function can passed following arguments. arguments must named described : conc numeric vector plasma concentrations interval single group (usually single analyte single subject single study). time numeric vector time plasma concentration measurements. duration.conc duration concentration measurement (usually urine fecal measurements) dose numeric vector dose amounts interval single group. NOTE: vector always scalar. function expects scalar, usually take sum dose argument. time.dose numeric vector time doses. duration.dose duration dose (usually intravenous infusions) start end scalar numbers start end time current interval. NOTE: end may Inf (infinity). options PKNCA options used current calculation usually defined PKNCA.option function (though options may -ridden options argument PKNCAdata function. , NCA parameters name (given names(get.interval.cols())). function return either scalar value parameter (usually case) data.frame parameters named parameter calculated. example returning data.frame, see half.life function. return value may attribute exclude (set attr(return_value, \"exclude\") <- \"reason\"). exclude attribute set character string, string included exclude column results. input parameters exclude attribute set, also added exclude column. exception setting exclude column exclude attribute \"EXCLUDE\", exclude column set NA_character_.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v80-writing-parameter-functions.html","id":"best-practices","dir":"Articles","previous_headings":"Writing the Parameter Function","what":"Best Practices","title":"Writing PKNCA Parameter Functions","text":"Use function assert_conc_time function takes either conc time input. Make sure check missing values (NA) inputs. Don’t recalculate NCA parameters within function unless absolutely must. Take NCA parameter input. way, PKNCA track calculation dependencies. consistency rest PKNCA, start function name “pk.calc” (like “pk.calc.cmax”).","code":""},{"path":"http://billdenney.github.io/pknca/articles/v80-writing-parameter-functions.html","id":"tell-pknca-about-the-parameter","dir":"Articles","previous_headings":"","what":"Tell PKNCA about the Parameter","title":"Writing PKNCA Parameter Functions","text":"Just writing function doesn’t connect rest PKNCA. tell PKNCA function exists details . , need use add.interval.col function. function takes seven arguments: name name parameter (character string). FUN function name (character string). values possible values interval column (currently TRUE FALSE supported). depends character vector columns must exist column can created. Use tell PKNCA calculation dependencies (parameter X must calculated able calculate parameter Y). formalsmap remaps (formal) function arguments. formalsmap usually used function may used multiple different parameters, example function pk.calc.thalf.eff used calculate parameters thalf.eff.obs, thalf.eff.pred, thalf.eff.last, thalf.eff.iv.obs, thalf.eff.iv.pred, thalf.eff.iv.last different mean residence time inputs. desc text description parameter.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v80-writing-parameter-functions.html","id":"tell-pknca-how-to-summarize-the-parameter","dir":"Articles","previous_headings":"","what":"Tell PKNCA How to Summarize the Parameter","title":"Writing PKNCA Parameter Functions","text":"parameter, PKNCA needs know summarize summary function PKNCAresults class. tell PKNCA summarize parameter, use PKNCA.set.summary function. takes least four arguments: name must match already existing parameter name (added add.interval.col function). description human-readable description point spread use table captions. point function calculate point estimate (called point(x), must return scalar). spread function calculate spread (variability). function called spread(x) must return scalar two-long vector.","code":""},{"path":"http://billdenney.github.io/pknca/articles/v80-writing-parameter-functions.html","id":"putting-it-together","dir":"Articles","previous_headings":"","what":"Putting It Together","title":"Writing PKNCA Parameter Functions","text":"One common examples function calculate Cmax:","code":"#' Determine maximum observed PK concentration #' #' @inheritParams assert_conc_time #' @param check Run \\code{\\link{assert_conc_time}}? #' @return a number for the maximum concentration or NA if all #' concentrations are missing #' @export pk.calc.cmax <- function(conc, check=TRUE) {   if (check)     assert_conc_time(conc=conc)   if (length(conc) == 0 | all(is.na(conc))) {     NA   } else {     max(conc, na.rm=TRUE)   } } ## Add the column to the interval specification add.interval.col(\"cmax\",                  FUN=\"pk.calc.cmax\",                  values=c(FALSE, TRUE),                  unit_type=\"conc\",                  pretty_name=\"Cmax\",                  desc=\"Maximum observed concentration\",                  depends=c()) PKNCA.set.summary(\"cmax\", \"geometric mean and geometric coefficient of variation\", business.geomean, business.geocv)"},{"path":"http://billdenney.github.io/pknca/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bill Denney. Author, maintainer. Clare Buckeridge. Author. Sridhar Duvvuri. Contributor.","code":""},{"path":"http://billdenney.github.io/pknca/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Denney W, Duvvuri S, Buckeridge C (2015). “Simple, Automatic Noncompartmental Analysis: PKNCA R Package.” Journal Pharmacokinetics Pharmacodynamics, 42(1), 11-107,S65. ISSN 1573-8744, doi:10.1007/s10928-015-9432-2, R package version 0.11.0.9000, https://github.com/billdenney/pknca.","code":"@Article{,   title = {Simple, Automatic Noncompartmental Analysis: The PKNCA R Package},   author = {William S. Denney and Sridhar Duvvuri and Clare Buckeridge},   doi = {10.1007/s10928-015-9432-2},   journal = {Journal of Pharmacokinetics and Pharmacodynamics},   pages = {11-107,S65},   year = {2015},   volume = {42},   number = {1},   issn = {1573-8744},   url = {https://github.com/billdenney/pknca},   note = {R package version 0.11.0.9000}, }"},{"path":"http://billdenney.github.io/pknca/index.html","id":"the-pknca-r-package-","dir":"","previous_headings":"","what":"Perform Pharmacokinetic Non-Compartmental Analysis","title":"Perform Pharmacokinetic Non-Compartmental Analysis","text":"PKNCA R package designed perform noncompartmental analysis (NCA) calculations pharmacokinetic (PK) data. package broadly separated two parts (calculation summary) additional housekeeping functions. primary secondary goals PKNCA package 1) give correct answers specific questions asked 2) automate much possible simplify task analyst. automation leave ambiguity make choice analyst may alternate preference , either used possible override. Note backward compatibility guaranteed version 1.0. Argument function changes continue . especially noticeable around inclusion IV NCA parameters additional specifications dosing including dose amount route.","code":""},{"path":"http://billdenney.github.io/pknca/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Perform Pharmacokinetic Non-Compartmental Analysis","text":"Citation information PKNCA package available call citation(package=\"PKNCA\"). preferred citation publication version 1.0 : Denney W, Duvvuri S Buckeridge C (2015). “Simple, Automatic Noncompartmental Analysis: PKNCA R Package.” Journal Pharmacokinetics Pharmacodynamics, 42(1), pp. 11-107,S65. ISSN 1573-8744, doi: 10.1007/s10928-015-9432-2, <URL: https://github.com/billdenney/pknca>.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/index.html","id":"from-cran","dir":"","previous_headings":"","what":"From CRAN","title":"Perform Pharmacokinetic Non-Compartmental Analysis","text":"current stable version PKNCA available CRAN. can install dependencies using following command:","code":"install.packages(\"PKNCA\")"},{"path":"http://billdenney.github.io/pknca/index.html","id":"from-github","dir":"","previous_headings":"","what":"From GitHub","title":"Perform Pharmacokinetic Non-Compartmental Analysis","text":"install development version GitHub, type following commands:","code":"install.packages(\"remotes\") remotes::install_github(\"billdenney/pknca\")"},{"path":"http://billdenney.github.io/pknca/index.html","id":"calculating-parameters","dir":"","previous_headings":"","what":"Calculating parameters","title":"Perform Pharmacokinetic Non-Compartmental Analysis","text":"help available function help files, sure look PKNCA.options function many choices make PKNCA conform company’s business rules calculations summarization.","code":"# Load the package library(PKNCA) # Set the business rule options with the PKNCA.options() function # Load your concentration-time data conc_raw <- read.csv(\"myconc.csv\", stringsAsFactors=FALSE) # Load your dose data dose_raw <- read.csv(\"mydose.csv\", stringsAsFactors=FALSE) # Put your concentration data into a PKNCAconc object o_conc <- PKNCAconc(data=conc_raw,                     formula=conc~time|treatment+subject/analyte) # Put your dose data into a PKNCAdose object o_dose <- PKNCAdose(data=dose_raw,                     formula=dose~time|treatment+subject) # Combine the two (and automatically determine the intervals of # interest o_data <- PKNCAdata(o_conc, o_dose) # Compute the NCA parameters o_results <- pk.nca(o_data) # Summarize the results summary(o_results)"},{"path":"http://billdenney.github.io/pknca/index.html","id":"feature-requests","dir":"","previous_headings":"","what":"Feature requests","title":"Perform Pharmacokinetic Non-Compartmental Analysis","text":"Please use github issues page (https://github.com/billdenney/pknca/issues) make feature requests bug reports.","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.choose.option.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose either the value from an option list or the current set value for an option. — PKNCA.choose.option","title":"Choose either the value from an option list or the current set value for an option. — PKNCA.choose.option","text":"Choose either value option list current set value option.","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.choose.option.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose either the value from an option list or the current set value for an option. — PKNCA.choose.option","text":"","code":"PKNCA.choose.option(name, value = NULL, options = list())"},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.choose.option.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose either the value from an option list or the current set value for an option. — PKNCA.choose.option","text":"name option name requested. value value check option (NULL choose check value). options List changes default PKNCA options (see PKNCA.options())","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.choose.option.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose either the value from an option list or the current set value for an option. — PKNCA.choose.option","text":"value option first options list current settings.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute noncompartmental pharmacokinetics — PKNCA","title":"Compute noncompartmental pharmacokinetics — PKNCA","text":"Compute pharmacokinetic (PK) noncompartmental analysis (NCA) parameters.","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute noncompartmental pharmacokinetics — PKNCA","text":"PKNCA cross-validated Phoenix WinNonlin(R) Pumas (click cross-validation article) common workflow load data file database data.frame run following code.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute noncompartmental pharmacokinetics — PKNCA","text":"Maintainer: Bill Denney wdenney@humanpredictions.com (ORCID) Authors: Clare Buckeridge clare.buckeridge@pfizer.com contributors: Sridhar Duvvuri [contributor]","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute noncompartmental pharmacokinetics — PKNCA","text":"","code":"if (FALSE) { # Load concentration-time data into a data.frame called d.conc # with columns named \"conc\", \"time\", and \"subject\". my.conc <- PKNCAconc(d.conc, conc~time|subject) # Load dose-time data into a data.frame called d.dose # with columns named \"dose\", \"time\", and \"subject\". my.dose <- PKNCAdose(d.dose, dose~time|subject) # Combine the concentration-time and dose-time data into an object # ready for calculations. my.data <- PKNCAdata(my.conc, my.dose) # Perform the calculations my.results <- pk.nca(my.data) # Look at summary results summary(my.results) # Look at a listing of results as.data.frame(my.results) }"},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.options.describe.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe a PKNCA.options option by name. — PKNCA.options.describe","title":"Describe a PKNCA.options option by name. — PKNCA.options.describe","text":"Describe PKNCA.options option name.","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.options.describe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe a PKNCA.options option by name. — PKNCA.options.describe","text":"","code":"PKNCA.options.describe(name)"},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.options.describe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe a PKNCA.options option by name. — PKNCA.options.describe","text":"name option name requested.","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.options.describe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describe a PKNCA.options option by name. — PKNCA.options.describe","text":"character string description.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set default options for PKNCA functions — PKNCA.options","title":"Set default options for PKNCA functions — PKNCA.options","text":"function set default PKNCA options.  given inputs, provide current option set.  given name/value pairs, set option (options() function).  given name, return value parameter.  given default option true, provide default options.","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set default options for PKNCA functions — PKNCA.options","text":"","code":"PKNCA.options(..., default = FALSE, check = FALSE, name, value)"},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set default options for PKNCA functions — PKNCA.options","text":"... options set get value default (re)sets default options check check single option given, set (validation values used another function) name option name use value. value option value (paired name) set check (NULL, ).","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set default options for PKNCA functions — PKNCA.options","text":"... arguments given returns current options. value set (including defaults) returns NULL single value requested current value option returned scalar multiple values requested current values options returned list","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set default options for PKNCA functions — PKNCA.options","text":"Options either calculation summary functions. Calculation options required calculation function report result (otherwise reported value NA). Summary options used summarization used assessing values included summary. See vignette 'Options Controlling PKNCA' current list options (vignette(\"Options--Controlling-PKNCA\", package=\"PKNCA\")).","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set default options for PKNCA functions — PKNCA.options","text":"","code":"PKNCA.options() #> $adj.r.squared.factor #> [1] 1e-04 #>  #> $max.missing #> [1] 0.5 #>  #> $auc.method #> [1] \"lin up/log down\" #>  #> $conc.na #> [1] \"drop\" #>  #> $conc.blq #> $conc.blq$first #> [1] \"keep\" #>  #> $conc.blq$middle #> [1] \"drop\" #>  #> $conc.blq$last #> [1] \"keep\" #>  #>  #> $first.tmax #> [1] TRUE #>  #> $allow.tmax.in.half.life #> [1] FALSE #>  #> $keep_interval_cols #> NULL #>  #> $min.hl.points #> [1] 3 #>  #> $min.span.ratio #> [1] 2 #>  #> $max.aucinf.pext #> [1] 20 #>  #> $min.hl.r.squared #> [1] 0.9 #>  #> $progress #> [1] TRUE #>  #> $tau.choices #> [1] NA #>  #> $single.dose.aucs #>   start end auclast aucall aumclast aumcall aucint.last aucint.last.dose #> 1     0  24    TRUE  FALSE    FALSE   FALSE       FALSE            FALSE #> 2     0 Inf   FALSE  FALSE    FALSE   FALSE       FALSE            FALSE #>   aucint.all aucint.all.dose    c0  cmax  cmin  tmax tlast tfirst clast.obs #> 1      FALSE           FALSE FALSE FALSE FALSE FALSE FALSE  FALSE     FALSE #> 2      FALSE           FALSE FALSE  TRUE FALSE  TRUE FALSE  FALSE     FALSE #>   cl.last cl.all     f mrt.last mrt.iv.last vss.last vss.iv.last   cav #> 1   FALSE  FALSE FALSE    FALSE       FALSE    FALSE       FALSE FALSE #> 2   FALSE  FALSE FALSE    FALSE       FALSE    FALSE       FALSE FALSE #>   cav.int.last cav.int.all ctrough cstart   ptr  tlag deg.fluc swing  ceoi #> 1        FALSE       FALSE   FALSE  FALSE FALSE FALSE    FALSE FALSE FALSE #> 2        FALSE       FALSE   FALSE  FALSE FALSE FALSE    FALSE FALSE FALSE #>   aucabove.predose.all aucabove.trough.all count_conc totdose    ae clr.last #> 1                FALSE               FALSE      FALSE   FALSE FALSE    FALSE #> 2                FALSE               FALSE      FALSE   FALSE FALSE    FALSE #>   clr.obs clr.pred    fe sparse_auclast sparse_auc_se sparse_auc_df time_above #> 1   FALSE    FALSE FALSE          FALSE         FALSE         FALSE      FALSE #> 2   FALSE    FALSE FALSE          FALSE         FALSE         FALSE      FALSE #>   aucivlast aucivall aucivint.last aucivint.all aucivpbextlast aucivpbextall #> 1     FALSE    FALSE         FALSE        FALSE          FALSE         FALSE #> 2     FALSE    FALSE         FALSE        FALSE          FALSE         FALSE #>   aucivpbextint.last aucivpbextint.all half.life r.squared adj.r.squared #> 1              FALSE             FALSE     FALSE     FALSE         FALSE #> 2              FALSE             FALSE      TRUE     FALSE         FALSE #>   lambda.z lambda.z.time.first lambda.z.n.points clast.pred span.ratio #> 1    FALSE               FALSE             FALSE      FALSE      FALSE #> 2    FALSE               FALSE             FALSE      FALSE      FALSE #>   thalf.eff.last thalf.eff.iv.last kel.last kel.iv.last aucinf.obs aucinf.pred #> 1          FALSE             FALSE    FALSE       FALSE      FALSE       FALSE #> 2          FALSE             FALSE    FALSE       FALSE       TRUE       FALSE #>   aumcinf.obs aumcinf.pred aucint.inf.obs aucint.inf.obs.dose aucint.inf.pred #> 1       FALSE        FALSE          FALSE               FALSE           FALSE #> 2       FALSE        FALSE          FALSE               FALSE           FALSE #>   aucint.inf.pred.dose aucivinf.obs aucivinf.pred aucivpbextinf.obs #> 1                FALSE        FALSE         FALSE             FALSE #> 2                FALSE        FALSE         FALSE             FALSE #>   aucivpbextinf.pred aucpext.obs aucpext.pred cl.obs cl.pred mrt.obs mrt.pred #> 1              FALSE       FALSE        FALSE  FALSE   FALSE   FALSE    FALSE #> 2              FALSE       FALSE        FALSE  FALSE   FALSE   FALSE    FALSE #>   mrt.iv.obs mrt.iv.pred mrt.md.obs mrt.md.pred vz.obs vz.pred vss.obs vss.pred #> 1      FALSE       FALSE      FALSE       FALSE  FALSE   FALSE   FALSE    FALSE #> 2      FALSE       FALSE      FALSE       FALSE  FALSE   FALSE   FALSE    FALSE #>   vss.iv.obs vss.iv.pred vss.md.obs vss.md.pred cav.int.inf.obs #> 1      FALSE       FALSE      FALSE       FALSE           FALSE #> 2      FALSE       FALSE      FALSE       FALSE           FALSE #>   cav.int.inf.pred thalf.eff.obs thalf.eff.pred thalf.eff.iv.obs #> 1            FALSE         FALSE          FALSE            FALSE #> 2            FALSE         FALSE          FALSE            FALSE #>   thalf.eff.iv.pred kel.obs kel.pred kel.iv.obs kel.iv.pred auclast.dn #> 1             FALSE   FALSE    FALSE      FALSE       FALSE      FALSE #> 2             FALSE   FALSE    FALSE      FALSE       FALSE      FALSE #>   aucall.dn aucinf.obs.dn aucinf.pred.dn aumclast.dn aumcall.dn aumcinf.obs.dn #> 1     FALSE         FALSE          FALSE       FALSE      FALSE          FALSE #> 2     FALSE         FALSE          FALSE       FALSE      FALSE          FALSE #>   aumcinf.pred.dn cmax.dn cmin.dn clast.obs.dn clast.pred.dn cav.dn ctrough.dn #> 1           FALSE   FALSE   FALSE        FALSE         FALSE  FALSE      FALSE #> 2           FALSE   FALSE   FALSE        FALSE         FALSE  FALSE      FALSE #>  PKNCA.options(default=TRUE) PKNCA.options(\"auc.method\") #> [1] \"lin up/log down\" PKNCA.options(name=\"auc.method\") #> [1] \"lin up/log down\" PKNCA.options(auc.method=\"lin up/log down\", min.hl.points=3)"},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.set.summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Define how NCA parameters are summarized. — PKNCA.set.summary","title":"Define how NCA parameters are summarized. — PKNCA.set.summary","text":"Define NCA parameters summarized.","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.set.summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define how NCA parameters are summarized. — PKNCA.set.summary","text":"","code":"PKNCA.set.summary(   name,   description,   point,   spread,   rounding = list(signif = 3),   reset = FALSE )"},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.set.summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define how NCA parameters are summarized. — PKNCA.set.summary","text":"name parameter name vector parameter names.  must already defined (see add.interval.col()). description single-line description summary point function calculate point estimate summary. function called point(x) must return scalar value (typically number, NA, string). spread Optional.  function calculate spread (variability).  function called spread(x) must return scalar two-long vector (typically number, NA, string). rounding Instructions round value point spread. may either list function.  list, must single entry name either \"signif\" \"round\" value digits round.  function, expected return scalar number character string correct results input either scalar two-long vector. reset Reset summary instructions","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.set.summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define how NCA parameters are summarized. — PKNCA.set.summary","text":"current summary settings (invisibly)","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/PKNCA.set.summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define how NCA parameters are summarized. — PKNCA.set.summary","text":"","code":"if (FALSE) { PKNCA.set.summary(   name=\"half.life\",   description=\"arithmetic mean and standard deviation\",   point=business.mean,   spread=business.sd,   rounding=list(signif=3) ) }"},{"path":"http://billdenney.github.io/pknca/reference/PKNCA_impute_fun_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate out a vector of PKNCA imputation methods into a list of functions — PKNCA_impute_fun_list","title":"Separate out a vector of PKNCA imputation methods into a list of functions — PKNCA_impute_fun_list","text":"error raised functions found.","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA_impute_fun_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate out a vector of PKNCA imputation methods into a list of functions — PKNCA_impute_fun_list","text":"","code":"PKNCA_impute_fun_list(x)"},{"path":"http://billdenney.github.io/pknca/reference/PKNCA_impute_fun_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate out a vector of PKNCA imputation methods into a list of functions — PKNCA_impute_fun_list","text":"x character vector PKNCA imputation method functions (without PKNCA_impute_method_ part)","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA_impute_fun_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate out a vector of PKNCA imputation methods into a list of functions — PKNCA_impute_fun_list","text":"list character vectors functions run.","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA_impute_fun_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Separate out a vector of PKNCA imputation methods into a list of functions — PKNCA_impute_fun_list","text":"function use users PKNCA.","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA_impute_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for imputation of data with PKNCA — PKNCA_impute_method","title":"Methods for imputation of data with PKNCA — PKNCA_impute_method","text":"Methods imputation data PKNCA","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA_impute_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for imputation of data with PKNCA — PKNCA_impute_method","text":"","code":"PKNCA_impute_method_start_conc0(conc, time, start = 0, ..., options = list())  PKNCA_impute_method_start_cmin(conc, time, start, end, ..., options = list())  PKNCA_impute_method_start_predose(   conc,   time,   start,   end,   conc.group,   time.group,   ...,   max_shift = NA_real_,   options = list() )"},{"path":"http://billdenney.github.io/pknca/reference/PKNCA_impute_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for imputation of data with PKNCA — PKNCA_impute_method","text":"conc Measured concentrations time Time measurement concentrations start start time interval ... ignored options List changes default PKNCA options (see PKNCA.options()) end end time interval conc.group concentrations measured group time.group Time concentrations measured group max_shift maximum amount time shift concentration forward (defaults 5% interval duration, .e. 0.05*(end - start), .finite(end), .infinite(end), defaults 5% time start max(time))","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA_impute_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for imputation of data with PKNCA — PKNCA_impute_method","text":"data.frame one column named conc imputed concentrations one column named time times.","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCA_impute_method.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Methods for imputation of data with PKNCA — PKNCA_impute_method","text":"PKNCA_impute_method_start_conc0(): Add new concentration 0 start time, even nonzero concentration exists time (usually used single-dose data) PKNCA_impute_method_start_cmin(): Add new concentration minimum interval start time (usually used multiple-dose data) PKNCA_impute_method_start_predose(): Shift predose concentration become time zero concentration (time zero concentration exist)","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCAconc.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a PKNCAconc object — PKNCAconc","title":"Create a PKNCAconc object — PKNCAconc","text":"Create PKNCAconc object","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCAconc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a PKNCAconc object — PKNCAconc","text":"","code":"PKNCAconc(data, ...)  # S3 method for default PKNCAconc(data, ...)  # S3 method for tbl_df PKNCAconc(data, ...)  # S3 method for data.frame PKNCAconc(   data,   formula,   subject,   time.nominal,   exclude,   duration,   volume,   exclude_half.life,   include_half.life,   sparse = FALSE,   ... )"},{"path":"http://billdenney.github.io/pknca/reference/PKNCAconc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a PKNCAconc object — PKNCAconc","text":"data data frame concentration (amount urine/feces), time, groups defined formula. ... Ignored. formula formula defining concentration~time|groups amount~time|groups urine/feces (remainder documentation, \"concentration\" used describe concentration amount.)  One special aspect groups part formula last group typically assumed subject; see documentation subject argument exceptions assumption. subject column indicating subject number.  provided, defaults beginning inner groups: example concentration~time|Study+Subject/Analyte, inner groups start first grouping variable /, Subject.  one grouping variable, assumed subject (e.g. concentration~time|Subject), multiple grouping variables without /, subject assumed last one.  single-subject data, assigned NULL. time.nominal (optional) name nominal time column (main time variable actual time.  time.nominal used calculations; available assist data summary checking. exclude (optional) name column concentrations exclude calculations summarization.  given, column values NA \"\" concentrations include non-empty text concentrations exclude. duration (optional) duration collection typically used concentration measurements urine feces. volume (optional) volume (mass) collection typically used urine feces measurements. exclude_half.life, include_half.life character scalar column name dataset points exclude half-life calculation (still using normal curve-stripping selection rules points) include half-life (using specifically points bypassing automatic curve-stripping point selection).  See \"Half-Life Calculation\" vignette details use arguments. sparse concentration-time data sparse PK (commonly used small nonclinical species terminal difficult sampling) dense PK (commonly used clinical studies larger nonclinical species)?","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCAconc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a PKNCAconc object — PKNCAconc","text":"PKNCAconc object can used automated NCA.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/PKNCAdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a PKNCAdata object. — PKNCAdata","title":"Create a PKNCAdata object. — PKNCAdata","text":"PKNCAdata() combines PKNCAconc PKNCAdose objects adds intervals PK calculations.","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCAdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a PKNCAdata object. — PKNCAdata","text":"","code":"PKNCAdata(data.conc, data.dose, ...)  # S3 method for PKNCAconc PKNCAdata(data.conc, data.dose, ...)  # S3 method for PKNCAdose PKNCAdata(data.conc, data.dose, ...)  # S3 method for default PKNCAdata(   data.conc,   data.dose,   ...,   formula.conc,   formula.dose,   impute = NA_character_,   intervals,   units,   options = list() )"},{"path":"http://billdenney.github.io/pknca/reference/PKNCAdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a PKNCAdata object. — PKNCAdata","text":"data.conc Concentration data PKNCAconc object data frame data.dose Dosing data PKNCAdose object (see details) ... arguments passed PKNCAdata.default formula.conc Formula making PKNCAconc object data.conc. must given data.conc data.frame, must given data.conc PKNCAconc object. formula.dose Formula making PKNCAdose object data.dose. must given data.dose data.frame, must given data.dose PKNCAdose object. impute Methods imputation.  NA search column named \"impute\" intervals imputation column exist, comma-space-separated list names, name column intervals data.frame.  See vignette(\"v08-data-imputation\", package=\"PKNCA\") details. intervals data frame AUC interval specifications defined check.interval.specification().  missing, automatically chosen choose.auc.intervals(). (see details) units data.frame unit assignments conversions created pknca_units_table() options List changes default PKNCA options (see PKNCA.options())","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCAdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a PKNCAdata object. — PKNCAdata","text":"PKNCAdata object concentration, dose, interval, calculation options stored (note PKNCAdata objects can also results NCA calculations done data).","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCAdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a PKNCAdata object. — PKNCAdata","text":"data.dose given NA, intervals must given.  least one data.dose intervals must given.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/PKNCAdose.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a PKNCAdose object — PKNCAdose","title":"Create a PKNCAdose object — PKNCAdose","text":"Create PKNCAdose object","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCAdose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a PKNCAdose object — PKNCAdose","text":"","code":"PKNCAdose(data, ...)  # S3 method for default PKNCAdose(data, ...)  # S3 method for tbl_df PKNCAdose(data, ...)  # S3 method for data.frame PKNCAdose(data, formula, route, rate, duration, time.nominal, exclude, ...)"},{"path":"http://billdenney.github.io/pknca/reference/PKNCAdose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a PKNCAdose object — PKNCAdose","text":"data data frame time groups defined formula. ... Ignored. formula formula defining dose.amount~time|groups time time dosing dose.amount amount administered time (see Details). route Define route administration.  value may either column name data (checked first) character string either \"extravascular\" \"intravascular\" (checked second).  given column name, every value column must either \"extravascular\" \"intravascular\". rate, duration (optional) \"intravascular\" dosing, rate duration dosing.  given character string, name column data, given number, value doses.  one may given, neither given, dose assumed bolus (duration=0).  rate given, dose amount must given (left hand side formula). time.nominal (optional) name nominal time column (main time variable actual time.  time.nominal used calculations; available assist data summary checking. exclude (optional) name column concentrations exclude calculations summarization.  given, column values NA \"\" concentrations include non-empty text concentrations exclude.","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCAdose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a PKNCAdose object — PKNCAdose","text":"PKNCAconc object can used automated NCA.","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCAdose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a PKNCAdose object — PKNCAdose","text":"formula PKNCAdose object can given three ways: one-sided (missing left side), one-sided (missing right side), two-sided.  three ways can given without groups.  given one-sided missing left side, left side can either omitted can given period (.): ~time|treatment+subject .~time|treatment+subject identical, dose-related NCA parameters reported calculable (example, clearance).  given one-sided missing right side, right side must specified period (.): dose~.|treatment+subject, single row may given per group.  right side missing, PKNCA assumes dose given every interval.  given two-sided formula","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/PKNCAresults.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a PKNCAresults object — PKNCAresults","title":"Generate a PKNCAresults object — PKNCAresults","text":"function run directly.  object created summarization.","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCAresults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a PKNCAresults object — PKNCAresults","text":"","code":"PKNCAresults(result, data, exclude)"},{"path":"http://billdenney.github.io/pknca/reference/PKNCAresults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a PKNCAresults object — PKNCAresults","text":"result data frame NCA calculation results groups. row one interval column group name name NCA parameter. data PKNCAdata used generate result exclude (optional) name column concentrations exclude calculations summarization.  given, column values NA \"\" concentrations include non-empty text concentrations exclude.","code":""},{"path":"http://billdenney.github.io/pknca/reference/PKNCAresults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a PKNCAresults object — PKNCAresults","text":"PKNCAresults object within.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/add.interval.col.html","id":null,"dir":"Reference","previous_headings":"","what":"Add columns for calculations within PKNCA intervals — add.interval.col","title":"Add columns for calculations within PKNCA intervals — add.interval.col","text":"Add columns calculations within PKNCA intervals","code":""},{"path":"http://billdenney.github.io/pknca/reference/add.interval.col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add columns for calculations within PKNCA intervals — add.interval.col","text":"","code":"add.interval.col(   name,   FUN,   values = c(FALSE, TRUE),   unit_type,   pretty_name,   depends = NULL,   desc = \"\",   sparse = FALSE,   formalsmap = list(),   datatype = c(\"interval\", \"individual\", \"population\") )"},{"path":"http://billdenney.github.io/pknca/reference/add.interval.col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add columns for calculations within PKNCA intervals — add.interval.col","text":"name column name character string FUN function run (character string) NA parameter automatically calculated calculating another parameter. values Valid values column unit_type type units use assigning converting units. pretty_name name parameter use printing summary tables units.  (analysis include units, normal name used.) depends Character vector columns must run column. desc human-readable description parameter (<=40 characters comply SDTM) sparse calculation sparse PK? formalsmap named list mapping parameter names function call NCA parameter names.  See details information use formalsmap. datatype type data used calculation","code":""},{"path":"http://billdenney.github.io/pknca/reference/add.interval.col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add columns for calculations within PKNCA intervals — add.interval.col","text":"NULL (Calling function side effect changing available intervals calculations)","code":""},{"path":"http://billdenney.github.io/pknca/reference/add.interval.col.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add columns for calculations within PKNCA intervals — add.interval.col","text":"formalsmap argument enables mapping alternate formal argument names parameters.  used generalize functions may use multiple similar arguments (variants mean residence time). names list correspond function formal parameter names values one following: current interval: character strings NCA parameter name value parameter calculated current interval. \"conc\" Concentration measurements current interval. \"time\" Times associated concentration measurements current interval (values start 0 beginning current interval). \"volume\" Volume associated concentration measurements current interval (typically applies excretion parameters like urine). \"duration.conc\" Durations associated concentration measurements current interval. \"dose\" Dose amounts assocuated current interval. \"time.dose\" Time dose start associated current interval (values start 0 beginning current interval). \"duration.dose\" Duration dose (typically infusion duration) doses current interval. \"route\" Route dosing current interval. \"start\" Time interval start. \"end\" Time interval end. \"options\" PKNCA.options governing calculations. current group: \"conc.group\" Concentration measurements current group. \"time.group\" Times associated concentration measurements current group (values start 0 beginning current interval). \"volume.group\" Volume associated concentration measurements current interval (typically applies excretion parameters like urine). \"duration.conc.group\" Durations assocuated concentration measurements current group. \"dose.group\" Dose amounts assocuated current group. \"time.dose.group\" Time dose start associated current group (values start 0 beginning current interval). \"duration.dose.group\" Duration dose (typically infusion duration) doses current group. \"route.group\" Route dosing current group.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/add.interval.col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add columns for calculations within PKNCA intervals — add.interval.col","text":"","code":"if (FALSE) { add.interval.col(\"cmax\",                  FUN=\"pk.calc.cmax\",                  values=c(FALSE, TRUE),                  unit_type=\"conc\",                  pretty_name=\"Cmax\",                  desc=\"Maximum observed concentration\") add.interval.col(\"cmax.dn\",                  FUN=\"pk.calc.dn\",                  values=c(FALSE, TRUE),                  unit_type=\"conc_dosenorm\",                  pretty_name=\"Cmax (dose-normalized)\",                  desc=\"Maximum observed concentration, dose normalized\",                  formalsmap=list(parameter=\"cmax\"),                  depends=\"cmax\") }"},{"path":"http://billdenney.github.io/pknca/reference/addProvenance.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a hash and associated information to enable checking object provenance. — addProvenance","title":"Add a hash and associated information to enable checking object provenance. — addProvenance","text":"Add hash associated information enable checking object provenance.","code":""},{"path":"http://billdenney.github.io/pknca/reference/addProvenance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a hash and associated information to enable checking object provenance. — addProvenance","text":"","code":"addProvenance(object, replace = FALSE)"},{"path":"http://billdenney.github.io/pknca/reference/addProvenance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a hash and associated information to enable checking object provenance. — addProvenance","text":"object object add provenance replace Replace provenance object already provenance attribute.  (object already provenance replace FALSE, error raised.)","code":""},{"path":"http://billdenney.github.io/pknca/reference/addProvenance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a hash and associated information to enable checking object provenance. — addProvenance","text":"object provenance added item","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/add_impute_to_intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the imputation column to the intervals, if it is not already there — add_impute_to_intervals","title":"Add the imputation column to the intervals, if it is not already there — add_impute_to_intervals","text":"Add imputation column intervals, already ","code":""},{"path":"http://billdenney.github.io/pknca/reference/add_impute_to_intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the imputation column to the intervals, if it is not already there — add_impute_to_intervals","text":"","code":"add_impute_to_intervals(object)"},{"path":"http://billdenney.github.io/pknca/reference/add_impute_to_intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the imputation column to the intervals, if it is not already there — add_impute_to_intervals","text":"object PKNCAdata object impute data within","code":""},{"path":"http://billdenney.github.io/pknca/reference/add_impute_to_intervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add the imputation column to the intervals, if it is not already there — add_impute_to_intervals","text":"PKNCAdata object impute column added intervals (already ) object$impute set column name","code":""},{"path":"http://billdenney.github.io/pknca/reference/adj.r.squared.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the adjusted r-squared value — adj.r.squared","title":"Calculate the adjusted r-squared value — adj.r.squared","text":"Calculate adjusted r-squared value","code":""},{"path":"http://billdenney.github.io/pknca/reference/adj.r.squared.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the adjusted r-squared value — adj.r.squared","text":"","code":"adj.r.squared(r.sq, n)"},{"path":"http://billdenney.github.io/pknca/reference/adj.r.squared.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the adjusted r-squared value — adj.r.squared","text":"r.sq r-squared value n number points","code":""},{"path":"http://billdenney.github.io/pknca/reference/adj.r.squared.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the adjusted r-squared value — adj.r.squared","text":"numeric adjusted r-squared value","code":""},{"path":"http://billdenney.github.io/pknca/reference/any_sparse_dense_in_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if there are any sparse or dense calculations requested within an interval — any_sparse_dense_in_interval","title":"Determine if there are any sparse or dense calculations requested within an interval — any_sparse_dense_in_interval","text":"Determine sparse dense calculations requested within interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/any_sparse_dense_in_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if there are any sparse or dense calculations requested within an interval — any_sparse_dense_in_interval","text":"","code":"any_sparse_dense_in_interval(interval, sparse)"},{"path":"http://billdenney.github.io/pknca/reference/any_sparse_dense_in_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if there are any sparse or dense calculations requested within an interval — any_sparse_dense_in_interval","text":"interval interval specification sparse concentration-time data sparse PK (commonly used small nonclinical species terminal difficult sampling) dense PK (commonly used clinical studies larger nonclinical species)?","code":""},{"path":"http://billdenney.github.io/pknca/reference/any_sparse_dense_in_interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if there are any sparse or dense calculations requested within an interval — any_sparse_dense_in_interval","text":"logical value indicating interval requests sparse (sparse=TRUE) dense (sparse=FALSE) calculations.","code":""},{"path":"http://billdenney.github.io/pknca/reference/as.data.frame.PKNCAresults.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the parameter results from a PKNCAresults and return them as a data.frame. — as.data.frame.PKNCAresults","title":"Extract the parameter results from a PKNCAresults and return them as a data.frame. — as.data.frame.PKNCAresults","text":"Extract parameter results PKNCAresults return data.frame.","code":""},{"path":"http://billdenney.github.io/pknca/reference/as.data.frame.PKNCAresults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the parameter results from a PKNCAresults and return them as a data.frame. — as.data.frame.PKNCAresults","text":"","code":"# S3 method for PKNCAresults as.data.frame(   x,   ...,   out_format = c(\"long\", \"wide\"),   filter_requested = FALSE,   filter_excluded = FALSE,   out.format = deprecated() )"},{"path":"http://billdenney.github.io/pknca/reference/as.data.frame.PKNCAresults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the parameter results from a PKNCAresults and return them as a data.frame. — as.data.frame.PKNCAresults","text":"x object extract results ... Ignored (compatibility generic .data.frame()) out_format output 'long' (default) 'wide'? filter_requested return rows parameters specifically requested? filter_excluded excluded values removed? .format Deprecated favor out_format","code":""},{"path":"http://billdenney.github.io/pknca/reference/as.data.frame.PKNCAresults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the parameter results from a PKNCAresults and return them as a data.frame. — as.data.frame.PKNCAresults","text":"data.frame (usually tibble) results","code":""},{"path":"http://billdenney.github.io/pknca/reference/as_PKNCAconc.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object into a PKNCAconc object — as_PKNCAconc","title":"Convert an object into a PKNCAconc object — as_PKNCAconc","text":"Convert object PKNCAconc object","code":""},{"path":"http://billdenney.github.io/pknca/reference/as_PKNCAconc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object into a PKNCAconc object — as_PKNCAconc","text":"","code":"as_PKNCAconc(x, ...)  as_PKNCAdose(x, ...)  as_PKNCAdata(x, ...)  as_PKNCAresults(x, ...)"},{"path":"http://billdenney.github.io/pknca/reference/as_PKNCAconc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object into a PKNCAconc object — as_PKNCAconc","text":"x object convert ... Passed subsequent methods","code":""},{"path":"http://billdenney.github.io/pknca/reference/as_PKNCAconc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object into a PKNCAconc object — as_PKNCAconc","text":"converted object","code":""},{"path":"http://billdenney.github.io/pknca/reference/as_PKNCAconc.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Convert an object into a PKNCAconc object — as_PKNCAconc","text":"as_PKNCAdose(): Convert object PKNCAdose object as_PKNCAdata(): Convert object PKNCAdata object as_PKNCAresults(): Convert object PKNCAresults object","code":""},{"path":"http://billdenney.github.io/pknca/reference/as_sparse_pk.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a sparse_pk object — as_sparse_pk","title":"Generate a sparse_pk object — as_sparse_pk","text":"Generate sparse_pk object","code":""},{"path":"http://billdenney.github.io/pknca/reference/as_sparse_pk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a sparse_pk object — as_sparse_pk","text":"","code":"as_sparse_pk(conc, time, subject)"},{"path":"http://billdenney.github.io/pknca/reference/as_sparse_pk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a sparse_pk object — as_sparse_pk","text":"conc Measured concentrations time Time measurement concentrations subject Subject identifiers (may class; may null)","code":""},{"path":"http://billdenney.github.io/pknca/reference/as_sparse_pk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a sparse_pk object — as_sparse_pk","text":"sparse_pk object list lists.  inner lists elements named: \"time\", time measurement; \"conc\", concentration measured; \"subject\", subject identifiers.  object usually modified future functions add named elements inner list.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/assert_PKNCAdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an object is a PKNCAdata object — assert_PKNCAdata","title":"Assert that an object is a PKNCAdata object — assert_PKNCAdata","text":"Assert object PKNCAdata object","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_PKNCAdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an object is a PKNCAdata object — assert_PKNCAdata","text":"","code":"assert_PKNCAdata(object)"},{"path":"http://billdenney.github.io/pknca/reference/assert_PKNCAdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an object is a PKNCAdata object — assert_PKNCAdata","text":"object PKNCAdata object","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_PKNCAdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that an object is a PKNCAdata object — assert_PKNCAdata","text":"PKNCAdata object (confirmed usable)","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_aucmethod.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that a value is a valid AUC method — assert_aucmethod","title":"Assert that a value is a valid AUC method — assert_aucmethod","text":"Assert value valid AUC method","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_aucmethod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that a value is a valid AUC method — assert_aucmethod","text":"","code":"assert_aucmethod(method = c(\"lin up/log down\", \"linear\", \"lin-log\"))"},{"path":"http://billdenney.github.io/pknca/reference/assert_aucmethod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that a value is a valid AUC method — assert_aucmethod","text":"method method integration (one 'lin /log ', 'lin-log', 'linear')","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_aucmethod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that a value is a valid AUC method — assert_aucmethod","text":"method informative error","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_conc_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify that concentration measurements are valid — assert_conc","title":"Verify that concentration measurements are valid — assert_conc","text":"concentrations times invalid, provide error. Reasons invalid time number conc number time value NA time monotonically increasing conc time length","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_conc_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify that concentration measurements are valid — assert_conc","text":"","code":"assert_conc(conc, any_missing_conc = TRUE)  assert_time(time, sorted_time = TRUE)  assert_conc_time(conc, time, any_missing_conc = TRUE, sorted_time = TRUE)"},{"path":"http://billdenney.github.io/pknca/reference/assert_conc_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify that concentration measurements are valid — assert_conc","text":"conc Measured concentrations any_missing_conc concentration values allowed NA? time Time measurement concentrations sorted_time Must time unique monotonically increasing?","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_conc_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify that concentration measurements are valid — assert_conc","text":"conc give informative error time give informative error data.frame columns named \"conc\" \"time\" informative error","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_conc_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Verify that concentration measurements are valid — assert_conc","text":"cases may generate warnings allow data proceed. negative concentration often always error; generate warning.","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_dosetau.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that a value is a dosing interval — assert_dosetau","title":"Assert that a value is a dosing interval — assert_dosetau","text":"Assert value dosing interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_dosetau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that a value is a dosing interval — assert_dosetau","text":"","code":"assert_dosetau(tau)"},{"path":"http://billdenney.github.io/pknca/reference/assert_dosetau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that a value is a dosing interval — assert_dosetau","text":"tau dosing interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_dosetau.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that a value is a dosing interval — assert_dosetau","text":"tau informative error","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_intervaltime_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an interval is accurately defined as an interval, and return the interval — assert_intervaltime_single","title":"Assert that an interval is accurately defined as an interval, and return the interval — assert_intervaltime_single","text":"Assert interval accurately defined interval, return interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_intervaltime_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an interval is accurately defined as an interval, and return the interval — assert_intervaltime_single","text":"","code":"assert_intervaltime_single(interval = NULL, start = NULL, end = NULL)"},{"path":"http://billdenney.github.io/pknca/reference/assert_intervaltime_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an interval is accurately defined as an interval, and return the interval — assert_intervaltime_single","text":"interval Numeric vector two numbers start end time integration start start time interval end end time interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_intervaltime_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that an interval is accurately defined as an interval, and return the interval — assert_intervaltime_single","text":"interval (c(start, end))","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_lambdaz.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that a lambda.z value is valid — assert_lambdaz","title":"Assert that a lambda.z value is valid — assert_lambdaz","text":"Assert lambda.z value valid","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_lambdaz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that a lambda.z value is valid — assert_lambdaz","text":"","code":"assert_lambdaz(   lambda.z,   any.missing = TRUE,   .var.name = checkmate::vname(lambda.z) )"},{"path":"http://billdenney.github.io/pknca/reference/assert_lambdaz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that a lambda.z value is valid — assert_lambdaz","text":"lambda.z elimination rate (units inverse time) extrapolation .missing [logical(1)] vectors missing values allowed? Default TRUE. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname.","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_lambdaz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that a lambda.z value is valid — assert_lambdaz","text":"lambda.z informative error","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_number_between.html","id":null,"dir":"Reference","previous_headings":"","what":"Confirm that a value is greater than another value — assert_number_between","title":"Confirm that a value is greater than another value — assert_number_between","text":"Confirm value greater another value","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_number_between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confirm that a value is greater than another value — assert_number_between","text":"","code":"assert_number_between(   x,   ...,   na.ok = FALSE,   len = 1,   .var.name = checkmate::vname(x) )"},{"path":"http://billdenney.github.io/pknca/reference/assert_number_between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confirm that a value is greater than another value — assert_number_between","text":"x [] Object check. ... Passed assert_numeric_between() na.ok [logical(1)] missing values allowed? Default FALSE. len Ignored (must 1) .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname.","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_number_between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confirm that a value is greater than another value — assert_number_between","text":"x informative error","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_numeric_between.html","id":null,"dir":"Reference","previous_headings":"","what":"Confirm that a value is greater than another value — assert_numeric_between","title":"Confirm that a value is greater than another value — assert_numeric_between","text":"Confirm value greater another value","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_numeric_between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confirm that a value is greater than another value — assert_numeric_between","text":"","code":"assert_numeric_between(   x,   any.missing = FALSE,   null.ok = FALSE,   lower_eq = -Inf,   lower = -Inf,   upper = Inf,   upper_eq = Inf,   ...,   .var.name = checkmate::vname(x) )"},{"path":"http://billdenney.github.io/pknca/reference/assert_numeric_between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confirm that a value is greater than another value — assert_numeric_between","text":"x [] Object check. .missing [logical(1)] vectors missing values allowed? Default TRUE. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. lower_eq, upper_eq Values equality allowed lower [numeric(1)] Lower value elements x must greater equal . upper [numeric(1)] Upper value elements x must lower equal . ... Passed checkmate::assert_numeric() .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname.","code":""},{"path":"http://billdenney.github.io/pknca/reference/assert_numeric_between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confirm that a value is greater than another value — assert_numeric_between","text":"x","code":""},{"path":"http://billdenney.github.io/pknca/reference/auc_integrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Support function for AUC integration — auc_integrate","title":"Support function for AUC integration — auc_integrate","text":"Support function AUC integration","code":""},{"path":"http://billdenney.github.io/pknca/reference/auc_integrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Support function for AUC integration — auc_integrate","text":"","code":"auc_integrate(   conc,   time,   clast,   tlast,   lambda.z,   interval_method,   fun_linear,   fun_log,   fun_inf )"},{"path":"http://billdenney.github.io/pknca/reference/auc_integrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Support function for AUC integration — auc_integrate","text":"conc Measured concentrations time Time measurement concentrations clast last concentration limit quantification tlast Time last concentration limit quantification (calculated, provided) lambda.z elimination rate (units inverse time) extrapolation interval_method method integrating interval conc fun_linear function use integration linear part curve (required AUC AUMC functions) fun_log function use integration logarithmic part curve (log integration used; required AUC AUMC functions) fun_inf function use extrapolation final measurement infinite time (required AUC AUMC functions.","code":""},{"path":"http://billdenney.github.io/pknca/reference/business.mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate functions to do the named function (e.g. mean) applying the business rules. — business.mean","title":"Generate functions to do the named function (e.g. mean) applying the business rules. — business.mean","text":"Generate functions named function (e.g. mean) applying business rules.","code":""},{"path":"http://billdenney.github.io/pknca/reference/business.mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate functions to do the named function (e.g. mean) applying the business rules. — business.mean","text":"","code":"business.mean(x, ...)  business.sd(x, ...)  business.cv(x, ...)  business.geomean(x, ...)  business.geocv(x, ...)  business.min(x, ...)  business.max(x, ...)  business.median(x, ...)  business.range(x, ...)"},{"path":"http://billdenney.github.io/pknca/reference/business.mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate functions to do the named function (e.g. mean) applying the business rules. — business.mean","text":"x vector passed various functions ... Additional arguments passed underlying function.","code":""},{"path":"http://billdenney.github.io/pknca/reference/business.mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate functions to do the named function (e.g. mean) applying the business rules. — business.mean","text":"value various functions NA many values missing","code":""},{"path":"http://billdenney.github.io/pknca/reference/business.mean.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Generate functions to do the named function (e.g. mean) applying the business rules. — business.mean","text":"business.sd(): Compute standard deviation business rules. business.cv(): Compute coefficient variation business rules. business.geomean(): Compute geometric mean business rules. business.geocv(): Compute geometric coefficient variation business rules. business.min(): Compute minimum business rules. business.max(): Compute maximum business rules. business.median(): Compute median business rules. business.range(): Compute range business rules.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/check.conversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the conversion to a data type does not change the number of NA values — check.conversion","title":"Check that the conversion to a data type does not change the number of NA values — check.conversion","text":"Check conversion data type change number NA values","code":""},{"path":"http://billdenney.github.io/pknca/reference/check.conversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the conversion to a data type does not change the number of NA values — check.conversion","text":"","code":"check.conversion(x, FUN, ...)"},{"path":"http://billdenney.github.io/pknca/reference/check.conversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the conversion to a data type does not change the number of NA values — check.conversion","text":"x value convert FUN function use conversion ... arguments passed FUN","code":""},{"path":"http://billdenney.github.io/pknca/reference/check.conversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that the conversion to a data type does not change the number of NA values — check.conversion","text":"FUN(x, ...) error set NAs change.","code":""},{"path":"http://billdenney.github.io/pknca/reference/check.interval.deps.html","id":null,"dir":"Reference","previous_headings":"","what":"Take in a single row of an interval specification and return that row updated with any additional calculations that must be done to fulfill all dependencies. — check.interval.deps","title":"Take in a single row of an interval specification and return that row updated with any additional calculations that must be done to fulfill all dependencies. — check.interval.deps","text":"Take single row interval specification return row updated additional calculations must done fulfill dependencies.","code":""},{"path":"http://billdenney.github.io/pknca/reference/check.interval.deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take in a single row of an interval specification and return that row updated with any additional calculations that must be done to fulfill all dependencies. — check.interval.deps","text":"","code":"check.interval.deps(x)"},{"path":"http://billdenney.github.io/pknca/reference/check.interval.deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take in a single row of an interval specification and return that row updated with any additional calculations that must be done to fulfill all dependencies. — check.interval.deps","text":"x data frame one rows PKNCA interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/check.interval.deps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take in a single row of an interval specification and return that row updated with any additional calculations that must be done to fulfill all dependencies. — check.interval.deps","text":"interval specification additional calculations added requested outputs require .","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/check.interval.specification.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the formatting of a calculation interval specification data frame. — check.interval.specification","title":"Check the formatting of a calculation interval specification data frame. — check.interval.specification","text":"Calculation interval specifications data frames defining calculations required summarized time intervals. Note: parameters requested may calculated required (computed time ) requested parameter.","code":""},{"path":"http://billdenney.github.io/pknca/reference/check.interval.specification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the formatting of a calculation interval specification data frame. — check.interval.specification","text":"","code":"check.interval.specification(x)"},{"path":"http://billdenney.github.io/pknca/reference/check.interval.specification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the formatting of a calculation interval specification data frame. — check.interval.specification","text":"x data frame specifying calculate time interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/check.interval.specification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the formatting of a calculation interval specification data frame. — check.interval.specification","text":"x potentially updated data frame interval calculation specification.","code":""},{"path":"http://billdenney.github.io/pknca/reference/check.interval.specification.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check the formatting of a calculation interval specification data frame. — check.interval.specification","text":"start end time must always given columns, start must end.  columns define parameters calculated groupings apply intervals .","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/checkProvenance.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the hash of an object to confirm its provenance. — checkProvenance","title":"Check the hash of an object to confirm its provenance. — checkProvenance","text":"Check hash object confirm provenance.","code":""},{"path":"http://billdenney.github.io/pknca/reference/checkProvenance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the hash of an object to confirm its provenance. — checkProvenance","text":"","code":"checkProvenance(object)"},{"path":"http://billdenney.github.io/pknca/reference/checkProvenance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the hash of an object to confirm its provenance. — checkProvenance","text":"object object check provenance ","code":""},{"path":"http://billdenney.github.io/pknca/reference/checkProvenance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the hash of an object to confirm its provenance. — checkProvenance","text":"TRUE provenance confirmed consistent, FALSE provenance consistent, NA provenance present.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/choose.auc.intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose intervals to compute AUCs from time and dosing information — choose.auc.intervals","title":"Choose intervals to compute AUCs from time and dosing information — choose.auc.intervals","text":"Intervals AUC selected following metrics: one dose administered, use PKNCA.options(\"single.dose.aucs\") one dose administered, estimate AUC two doses PK taken dosing times least one time  doses. final dose multiple doses, try determine dosing interval (\\(\\tau\\)) estimate AUC interval multiple samples taken interval. samples \\(> \\tau\\) last dose, calculate half life last dose.","code":""},{"path":"http://billdenney.github.io/pknca/reference/choose.auc.intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose intervals to compute AUCs from time and dosing information — choose.auc.intervals","text":"","code":"choose.auc.intervals(   time.conc,   time.dosing,   options = list(),   single.dose.aucs = NULL )"},{"path":"http://billdenney.github.io/pknca/reference/choose.auc.intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose intervals to compute AUCs from time and dosing information — choose.auc.intervals","text":"time.conc Time concentration measurement time.dosing Time dosing options List changes default PKNCA options (see PKNCA.options()) single.dose.aucs AUC specification single dosing.","code":""},{"path":"http://billdenney.github.io/pknca/reference/choose.auc.intervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose intervals to compute AUCs from time and dosing information — choose.auc.intervals","text":"data frame columns start, end, auc.type, half.life.  See check.interval.specification() column definitions. data frame may zero rows intervals found.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/choose_interval_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose how to interpolate, extrapolate, or integrate data in each concentration interval — choose_interval_method","title":"Choose how to interpolate, extrapolate, or integrate data in each concentration interval — choose_interval_method","text":"Choose interpolate, extrapolate, integrate data concentration interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/choose_interval_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose how to interpolate, extrapolate, or integrate data in each concentration interval — choose_interval_method","text":"","code":"choose_interval_method(conc, time, tlast, method, auc.type, options)"},{"path":"http://billdenney.github.io/pknca/reference/choose_interval_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose how to interpolate, extrapolate, or integrate data in each concentration interval — choose_interval_method","text":"conc Measured concentrations time Time measurement concentrations tlast Time last concentration limit quantification (calculated, provided) method method integration (one 'lin /log ', 'lin-log', 'linear') auc.type type AUC compute.  Choices 'AUCinf', 'AUClast', 'AUCall'. options List changes default PKNCA options (see PKNCA.options())","code":""},{"path":"http://billdenney.github.io/pknca/reference/choose_interval_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose how to interpolate, extrapolate, or integrate data in each concentration interval — choose_interval_method","text":"character vector methods interpolation/extrapolation methods length conc indicates interpolate/integrate concentrations (last value vector) extrapolate tlast (last item vector).  Possible values vector : 'zero', 'linear', 'log', 'extrap_log'","code":""},{"path":"http://billdenney.github.io/pknca/reference/clean.conc.blq.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle BLQ values in the concentration measurements as requested by the user. — clean.conc.blq","title":"Handle BLQ values in the concentration measurements as requested by the user. — clean.conc.blq","text":"Handle BLQ values concentration measurements requested user.","code":""},{"path":"http://billdenney.github.io/pknca/reference/clean.conc.blq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle BLQ values in the concentration measurements as requested by the user. — clean.conc.blq","text":"","code":"clean.conc.blq(   conc,   time,   ...,   options = list(),   conc.blq = NULL,   conc.na = NULL,   check = TRUE )"},{"path":"http://billdenney.github.io/pknca/reference/clean.conc.blq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle BLQ values in the concentration measurements as requested by the user. — clean.conc.blq","text":"conc Measured concentrations time Time measurement concentrations ... Additional arguments passed clean.conc.na options List changes default PKNCA options (see PKNCA.options()) conc.blq handle BLQ value LOQ values? See details description. conc.na handle NA concentrations.  (See clean.conc.na()) check Run assert_conc_time()?","code":""},{"path":"http://billdenney.github.io/pknca/reference/clean.conc.blq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle BLQ values in the concentration measurements as requested by the user. — clean.conc.blq","text":"concentration time measurements (data frame) filtered cleaned requested relative BLQ middle.","code":""},{"path":"http://billdenney.github.io/pknca/reference/clean.conc.blq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handle BLQ values in the concentration measurements as requested by the user. — clean.conc.blq","text":"NA concentrations (associated times) handled described clean.conc.na() working BLQ values.  method handling NA concentrations can affect output points considered BLQ considered \"middle\".  Values considered BLQ 0. conc.blq can set either scalar indicating done BLQ values list elements named \"first\", \"middle\", \"last\" set scalar. meaning list elements : first Values first non-BLQ value.  Note values BLQ, includes values. middle Values BLQ first last non-BLQ values. last Values BLQ last non-BLQ value valid settings : \"drop\" Drop BLQ values \"keep\" Keep BLQ values number Set BLQ values number","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/clean.conc.na.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle NA values in the concentration measurements as requested by the user. — clean.conc.na","title":"Handle NA values in the concentration measurements as requested by the user. — clean.conc.na","text":"NA concentrations (associated times) removed BLQ values middle","code":""},{"path":"http://billdenney.github.io/pknca/reference/clean.conc.na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle NA values in the concentration measurements as requested by the user. — clean.conc.na","text":"","code":"clean.conc.na(conc, time, ..., options = list(), conc.na = NULL, check = TRUE)"},{"path":"http://billdenney.github.io/pknca/reference/clean.conc.na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle NA values in the concentration measurements as requested by the user. — clean.conc.na","text":"conc Measured concentrations time Time measurement concentrations ... Additional items add data frame options List changes default PKNCA options (see PKNCA.options()) conc.na handle NA concentrations?  Either 'drop' number impute. check Run assert_conc_time()?","code":""},{"path":"http://billdenney.github.io/pknca/reference/clean.conc.na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle NA values in the concentration measurements as requested by the user. — clean.conc.na","text":"concentration time measurements (data frame) filtered cleaned requested relative NA concentration.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/cov_holder.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the covariance for two time points with sparse sampling — cov_holder","title":"Calculate the covariance for two time points with sparse sampling — cov_holder","text":"calculation follows equation A3 Holder 2001 (see references ):","code":""},{"path":"http://billdenney.github.io/pknca/reference/cov_holder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the covariance for two time points with sparse sampling — cov_holder","text":"","code":"cov_holder(sparse_pk)"},{"path":"http://billdenney.github.io/pknca/reference/cov_holder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the covariance for two time points with sparse sampling — cov_holder","text":"sparse_pk sparse_pk object as_sparse_pk()","code":""},{"path":"http://billdenney.github.io/pknca/reference/cov_holder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the covariance for two time points with sparse sampling — cov_holder","text":"matrix one row one column element sparse_pk_attribute.  covariances diagonals, simplicity use, also calculates variance diagonal elements.","code":""},{"path":"http://billdenney.github.io/pknca/reference/cov_holder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the covariance for two time points with sparse sampling — cov_holder","text":"$$\\hat{\\sigma}_{ij} = \\sum\\limits_{k=1}^{r_{ij}}{\\frac{\\left(x_{ik} - \\bar{x}_i\\right)\\left(x_{jk} - \\bar{x}_j\\right)}{\\left(r_{ij} - 1\\right) + \\left(1 - \\frac{r_{ij}}{r_i}\\right)\\left(1 - \\frac{r_{ij}}{r_j}\\right)}}$$ \\(r_{ij} = 0\\), \\(\\hat{\\sigma}_{ij}\\) defined zero (rather dividing zero). : \\(\\hat{\\sigma}_{ij}\\) covariance times j \\(r_i\\) \\(r_j\\) number subjects (usually animals) times j, respectively \\(r_{ij}{r_ij}\\) number subjects (usually animals) times j \\(x_{ik}\\) \\(x_{jk}\\) concentration measured animal k times j, respectively \\(\\bar{x}_i\\) \\(\\bar{x}_j\\) mean concentrations times j, respectively Cauchy-Schwartz inequality enforced covariances keep correlation coefficients -1 1, inclusive, described equations 8 9 Nedelman Jia 1998.","code":""},{"path":"http://billdenney.github.io/pknca/reference/cov_holder.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the covariance for two time points with sparse sampling — cov_holder","text":"Holder DJ. Comments Nedelman Jia’s Extension Satterthwaite’s Approximation Applied Pharmacokinetics. Journal Biopharmaceutical Statistics. 2001;11(1-2):75-79. doi:10.1081/BIP-100104199 Nedelman JR, Jia X. extension Satterthwaite’s approximation applied pharmacokinetics. Journal Biopharmaceutical Statistics. 1998;8(2):317-328. doi:10.1080/10543409808835241","code":""},{"path":"http://billdenney.github.io/pknca/reference/defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"The following functions are defunct — defunct","title":"The following functions are defunct — defunct","text":"following functions defunct","code":""},{"path":"http://billdenney.github.io/pknca/reference/defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The following functions are defunct — defunct","text":"","code":"check.conc.time(...)"},{"path":"http://billdenney.github.io/pknca/reference/defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The following functions are defunct — defunct","text":"... Ignored","code":""},{"path":"http://billdenney.github.io/pknca/reference/defunct.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"The following functions are defunct — defunct","text":"check.conc.time(): Defunct version 0.11","code":""},{"path":"http://billdenney.github.io/pknca/reference/exclude.html","id":null,"dir":"Reference","previous_headings":"","what":"Exclude data points or results from calculations or summarization. — exclude","title":"Exclude data points or results from calculations or summarization. — exclude","text":"Exclude data points results calculations summarization.","code":""},{"path":"http://billdenney.github.io/pknca/reference/exclude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exclude data points or results from calculations or summarization. — exclude","text":"","code":"exclude(object, reason, mask, FUN)  # S3 method for default exclude(object, reason, mask, FUN)"},{"path":"http://billdenney.github.io/pknca/reference/exclude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exclude data points or results from calculations or summarization. — exclude","text":"object object exclude data . reason reason add reason exclusion. mask logical vector numeric index values exclude (see details). FUN function operate data (one group time) select reasons exclusions (see details).","code":""},{"path":"http://billdenney.github.io/pknca/reference/exclude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exclude data points or results from calculations or summarization. — exclude","text":"object updated information exclude column. exclude column contain reason mask FUN indicate.  previous reason exclusion given, subsequent reasons exclusion added first semicolon space (\"; \") separator.","code":""},{"path":"http://billdenney.github.io/pknca/reference/exclude.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exclude data points or results from calculations or summarization. — exclude","text":"one mask FUN may given.  FUN given, called two arguments:  data.frame (similar object) consists single group data full object (e.g. PKNCAconc object), FUN(current_group, object), must return logical vector equivalent mask character vector reason text given data excluded NA_character_ data included (current exclusion test).","code":""},{"path":"http://billdenney.github.io/pknca/reference/exclude.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Exclude data points or results from calculations or summarization. — exclude","text":"exclude(default): general case data exclusion","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/exclude.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exclude data points or results from calculations or summarization. — exclude","text":"","code":"myconc <- PKNCAconc(data.frame(subject=1,                                time=0:6,                                conc=c(1, 2, 3, 2, 1, 0.5, 0.25)),                     conc~time|subject) exclude(myconc,         reason=\"Carryover\",         mask=c(TRUE, rep(FALSE, 6))) #> Formula for concentration: #>  conc ~ time | subject #> <environment: 0x56536422de30> #> Data are dense PK. #> With 1 subjects defined in the 'subject' column. #> Nominal time column is not specified. #>  #> First 6 rows of concentration data: #>  subject time conc   exclude volume duration #>        1    0  1.0 Carryover     NA        0 #>        1    1  2.0      <NA>     NA        0 #>        1    2  3.0      <NA>     NA        0 #>        1    3  2.0      <NA>     NA        0 #>        1    4  1.0      <NA>     NA        0 #>        1    5  0.5      <NA>     NA        0"},{"path":"http://billdenney.github.io/pknca/reference/exclude_nca.html","id":null,"dir":"Reference","previous_headings":"","what":"Exclude NCA parameters based on examining the parameter set. — exclude_nca","title":"Exclude NCA parameters based on examining the parameter set. — exclude_nca","text":"Exclude NCA parameters based examining parameter set.","code":""},{"path":"http://billdenney.github.io/pknca/reference/exclude_nca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exclude NCA parameters based on examining the parameter set. — exclude_nca","text":"","code":"exclude_nca_span.ratio(min.span.ratio)  exclude_nca_max.aucinf.pext(max.aucinf.pext)  exclude_nca_min.hl.r.squared(min.hl.r.squared)"},{"path":"http://billdenney.github.io/pknca/reference/exclude_nca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exclude NCA parameters based on examining the parameter set. — exclude_nca","text":"min.span.ratio minimum acceptable span ratio (uses PKNCA.options(\"min.span.ratio\") provided). max.aucinf.pext maximum acceptable percent AUC extrapolation (uses PKNCA.options(\"max.aucinf.pext\") provided). min.hl.r.squared minimum acceptable r-squared value half-life (uses PKNCA.options(\"min.hl.r.squared\") provided).","code":""},{"path":"http://billdenney.github.io/pknca/reference/exclude_nca.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Exclude NCA parameters based on examining the parameter set. — exclude_nca","text":"exclude_nca_span.ratio(): Exclude based span.ratio exclude_nca_max.aucinf.pext(): Exclude based AUC percent extrapolated (observed predicted) exclude_nca_min.hl.r.squared(): Exclude based half-life r-squared","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/exclude_nca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exclude NCA parameters based on examining the parameter set. — exclude_nca","text":"","code":"my_conc <- PKNCAconc(data.frame(conc=1.1^(3:0),                                 time=0:3,                                 subject=1),                      conc~time|subject) my_data <- PKNCAdata(my_conc,                      intervals=data.frame(start=0, end=Inf,                                           aucinf.obs=TRUE,                                           aucpext.obs=TRUE)) my_result <- pk.nca(my_data) #> No dose information provided, calculations requiring dose will return NA. my_result_excluded <- exclude(my_result,                               FUN=exclude_nca_max.aucinf.pext()) as.data.frame(my_result_excluded) #> # A tibble: 14 × 6 #>    subject start   end PPTESTCD            PPORRES exclude                       #>      <dbl> <dbl> <dbl> <chr>                 <dbl> <chr>                         #>  1       1     0   Inf auclast              3.47   NA                            #>  2       1     0   Inf tmax                 0      NA                            #>  3       1     0   Inf tlast                3      NA                            #>  4       1     0   Inf clast.obs            1      NA                            #>  5       1     0   Inf lambda.z             0.0953 NA                            #>  6       1     0   Inf r.squared            1      NA                            #>  7       1     0   Inf adj.r.squared        1      NA                            #>  8       1     0   Inf lambda.z.time.first  1      NA                            #>  9       1     0   Inf lambda.z.n.points    3      NA                            #> 10       1     0   Inf clast.pred           1      NA                            #> 11       1     0   Inf half.life            7.27   NA                            #> 12       1     0   Inf span.ratio           0.275  NA                            #> 13       1     0   Inf aucinf.obs          14.0    AUC percent extrapolated > 20 #> 14       1     0   Inf aucpext.obs         75.1    AUC percent extrapolated > 20"},{"path":"http://billdenney.github.io/pknca/reference/filter.PKNCAresults.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr filtering for PKNCA — filter.PKNCAresults","title":"dplyr filtering for PKNCA — filter.PKNCAresults","text":"dplyr filtering PKNCA","code":""},{"path":"http://billdenney.github.io/pknca/reference/filter.PKNCAresults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dplyr filtering for PKNCA — filter.PKNCAresults","text":"","code":"# S3 method for PKNCAresults filter(.data, ..., .preserve = FALSE)  # S3 method for PKNCAconc filter(.data, ..., .preserve = FALSE)  # S3 method for PKNCAdose filter(.data, ..., .preserve = FALSE)"},{"path":"http://billdenney.github.io/pknca/reference/filter.PKNCAresults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dplyr filtering for PKNCA — filter.PKNCAresults","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Expressions return logical value, defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept. .preserve Relevant .data input grouped. .preserve = FALSE (default), grouping structure recalculated based resulting data, otherwise grouping kept .","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/find.tau.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the repeating interval within a vector of doses — find.tau","title":"Find the repeating interval within a vector of doses — find.tau","text":"intended find interval x repeats rule unique(mod(x, interval)) minimized.","code":""},{"path":"http://billdenney.github.io/pknca/reference/find.tau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the repeating interval within a vector of doses — find.tau","text":"","code":"find.tau(x, na.action = stats::na.omit, options = list(), tau.choices = NULL)"},{"path":"http://billdenney.github.io/pknca/reference/find.tau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the repeating interval within a vector of doses — find.tau","text":"x vector find interval within na.action NAs x options List changes default PKNCA options (see PKNCA.options()) tau.choices intervals look doses equally spaced.","code":""},{"path":"http://billdenney.github.io/pknca/reference/find.tau.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the repeating interval within a vector of doses — find.tau","text":"scalar indicating repeating interval repetition. values NA NA returned. values , 0 returned. values equally spaced, spacing returned. one choices can minimize number unique values, returned. none choices can minimize number unique values, -1 returned.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/findOperator.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the first occurrence of an operator in a formula and return the left, right, or both sides of the operator. — findOperator","title":"Find the first occurrence of an operator in a formula and return the left, right, or both sides of the operator. — findOperator","text":"Find first occurrence operator formula return left, right, sides operator.","code":""},{"path":"http://billdenney.github.io/pknca/reference/findOperator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the first occurrence of an operator in a formula and return the left, right, or both sides of the operator. — findOperator","text":"","code":"findOperator(x, op, side)"},{"path":"http://billdenney.github.io/pknca/reference/findOperator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the first occurrence of an operator in a formula and return the left, right, or both sides of the operator. — findOperator","text":"x formula parse op operator search (e.g. +, -, *, /, ...) side side operator like see: 'left', 'right', ''.","code":""},{"path":"http://billdenney.github.io/pknca/reference/findOperator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the first occurrence of an operator in a formula and return the left, right, or both sides of the operator. — findOperator","text":"side operator requested, NA requesting left side unary operator, NULL operator found.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/fit_half_life.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform the half-life fit given the data. The function simply fits the data without any validation. No selection of points or any other components are done. — fit_half_life","title":"Perform the half-life fit given the data. The function simply fits the data without any validation. No selection of points or any other components are done. — fit_half_life","text":"Perform half-life fit given data.  function simply fits data without validation.  selection points components done.","code":""},{"path":"http://billdenney.github.io/pknca/reference/fit_half_life.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform the half-life fit given the data. The function simply fits the data without any validation. No selection of points or any other components are done. — fit_half_life","text":"","code":"fit_half_life(data, tlast, conc_units)"},{"path":"http://billdenney.github.io/pknca/reference/fit_half_life.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform the half-life fit given the data. The function simply fits the data without any validation. No selection of points or any other components are done. — fit_half_life","text":"data data fit.  Must two columns named \"log_conc\" \"time\" tlast time last observed concentration limit quantification. conc_units NULL units set concentration measures","code":""},{"path":"http://billdenney.github.io/pknca/reference/fit_half_life.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform the half-life fit given the data. The function simply fits the data without any validation. No selection of points or any other components are done. — fit_half_life","text":"data.frame one row columns named \"r.squared\", \"adj.r.squared\", \"PROB\", \"lambda.z\", \"clast.pred\", \"lambda.z.n.points\", \"half.life\", \"span.ratio\"","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/formula.PKNCAconc.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the formula from a PKNCAconc object. — formula.PKNCAconc","title":"Extract the formula from a PKNCAconc object. — formula.PKNCAconc","text":"Extract formula PKNCAconc object.","code":""},{"path":"http://billdenney.github.io/pknca/reference/formula.PKNCAconc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the formula from a PKNCAconc object. — formula.PKNCAconc","text":"","code":"# S3 method for PKNCAconc formula(x, ...)  # S3 method for PKNCAdose formula(x, ...)"},{"path":"http://billdenney.github.io/pknca/reference/formula.PKNCAconc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the formula from a PKNCAconc object. — formula.PKNCAconc","text":"x object extract formula . ... Unused","code":""},{"path":"http://billdenney.github.io/pknca/reference/formula.PKNCAconc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the formula from a PKNCAconc object. — formula.PKNCAconc","text":"formula object","code":""},{"path":"http://billdenney.github.io/pknca/reference/geomean.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the geometric mean, sd, and CV — geomean","title":"Compute the geometric mean, sd, and CV — geomean","text":"Compute geometric mean, sd, CV","code":""},{"path":"http://billdenney.github.io/pknca/reference/geomean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the geometric mean, sd, and CV — geomean","text":"","code":"geomean(x, na.rm = FALSE)  geosd(x, na.rm = FALSE)  geocv(x, na.rm = FALSE)"},{"path":"http://billdenney.github.io/pknca/reference/geomean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the geometric mean, sd, and CV — geomean","text":"x vector compute geometric mean na.rm missing values removed?","code":""},{"path":"http://billdenney.github.io/pknca/reference/geomean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the geometric mean, sd, and CV — geomean","text":"scalar value geometric mean, geometric standard deviation, geometric coefficient variation.","code":""},{"path":"http://billdenney.github.io/pknca/reference/geomean.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Compute the geometric mean, sd, and CV — geomean","text":"geosd(): Compute geometric standard deviation, exp(sd(log(x))). geocv(): Compute geometric coefficient variation, sqrt(exp(sd(log(x))^2)-1)*100.","code":""},{"path":"http://billdenney.github.io/pknca/reference/geomean.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the geometric mean, sd, and CV — geomean","text":"Kirkwood T. B.L. Geometric means measures dispersion. Biometrics 1979; 35: 908-909","code":""},{"path":"http://billdenney.github.io/pknca/reference/geomean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the geometric mean, sd, and CV — geomean","text":"","code":"geomean(1:3) #> [1] 1.817121 geosd(1:3) #> [1] 1.742896 geocv(1:3) #> [1] 60.13019"},{"path":"http://billdenney.github.io/pknca/reference/get.best.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the best model from a list of models using the AIC. — get.best.model","title":"Extract the best model from a list of models using the AIC. — get.best.model","text":"Extract best model list models using AIC.","code":""},{"path":"http://billdenney.github.io/pknca/reference/get.best.model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the best model from a list of models using the AIC. — get.best.model","text":"","code":"get.best.model(object, ...)"},{"path":"http://billdenney.github.io/pknca/reference/get.best.model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the best model from a list of models using the AIC. — get.best.model","text":"object list models ... Parameters passed AIC.list","code":""},{"path":"http://billdenney.github.io/pknca/reference/get.best.model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the best model from a list of models using the AIC. — get.best.model","text":"model assessed best.  one equal, first chosen.","code":""},{"path":"http://billdenney.github.io/pknca/reference/get.first.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the first model from a list of models — get.first.model","title":"Get the first model from a list of models — get.first.model","text":"Get first model list models","code":""},{"path":"http://billdenney.github.io/pknca/reference/get.first.model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the first model from a list of models — get.first.model","text":"","code":"get.first.model(object)"},{"path":"http://billdenney.github.io/pknca/reference/get.first.model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the first model from a list of models — get.first.model","text":"object list (lists , ...) models","code":""},{"path":"http://billdenney.github.io/pknca/reference/get.first.model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the first model from a list of models — get.first.model","text":"first item object list NA.  NA passed list (lists) NA, NA returned.","code":""},{"path":"http://billdenney.github.io/pknca/reference/get.interval.cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the columns that can be used in an interval specification — get.interval.cols","title":"Get the columns that can be used in an interval specification — get.interval.cols","text":"Get columns can used interval specification","code":""},{"path":"http://billdenney.github.io/pknca/reference/get.interval.cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the columns that can be used in an interval specification — get.interval.cols","text":"","code":"get.interval.cols()"},{"path":"http://billdenney.github.io/pknca/reference/get.interval.cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the columns that can be used in an interval specification — get.interval.cols","text":"list named elements parameter.  list element contains parameter definition.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/get.interval.cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the columns that can be used in an interval specification — get.interval.cols","text":"","code":"get.interval.cols() #> $start #> $start$FUN #> [1] NA #>  #> $start$values #> function (x, ...)  .Primitive(\"as.double\") #>  #> $start$unit_type #> [1] \"time\" #>  #> $start$pretty_name #> [1] \"Interval Start\" #>  #> $start$desc #> [1] \"Starting time of the interval\" #>  #> $start$sparse #> [1] FALSE #>  #> $start$formalsmap #> list() #>  #> $start$depends #> NULL #>  #> $start$datatype #> [1] \"interval\" #>  #>  #> $end #> $end$FUN #> [1] NA #>  #> $end$values #> function (x, ...)  .Primitive(\"as.double\") #>  #> $end$unit_type #> [1] \"time\" #>  #> $end$pretty_name #> [1] \"Interval End\" #>  #> $end$desc #> [1] \"Ending time of the interval (potentially infinity)\" #>  #> $end$sparse #> [1] FALSE #>  #> $end$formalsmap #> list() #>  #> $end$depends #> NULL #>  #> $end$datatype #> [1] \"interval\" #>  #>  #> $auclast #> $auclast$FUN #> [1] \"pk.calc.auc.last\" #>  #> $auclast$values #> [1] FALSE  TRUE #>  #> $auclast$unit_type #> [1] \"auc\" #>  #> $auclast$pretty_name #> [1] \"AUClast\" #>  #> $auclast$desc #> [1] \"The area under the concentration time curve from the beginning of the interval to the last concentration above the limit of quantification\" #>  #> $auclast$sparse #> [1] FALSE #>  #> $auclast$formalsmap #> list() #>  #> $auclast$depends #> NULL #>  #> $auclast$datatype #> [1] \"interval\" #>  #>  #> $aucall #> $aucall$FUN #> [1] \"pk.calc.auc.all\" #>  #> $aucall$values #> [1] FALSE  TRUE #>  #> $aucall$unit_type #> [1] \"auc\" #>  #> $aucall$pretty_name #> [1] \"AUCall\" #>  #> $aucall$desc #> [1] \"The area under the concentration time curve from the beginning of the interval to the last concentration above the limit of quantification plus the triangle from that last concentration to 0 at the first concentration below the limit of quantification\" #>  #> $aucall$sparse #> [1] FALSE #>  #> $aucall$formalsmap #> list() #>  #> $aucall$depends #> NULL #>  #> $aucall$datatype #> [1] \"interval\" #>  #>  #> $aumclast #> $aumclast$FUN #> [1] \"pk.calc.aumc.last\" #>  #> $aumclast$values #> [1] FALSE  TRUE #>  #> $aumclast$unit_type #> [1] \"aumc\" #>  #> $aumclast$pretty_name #> [1] \"AUMC,last\" #>  #> $aumclast$desc #> [1] \"The area under the concentration time moment curve from the beginning of the interval to the last concentration above the limit of quantification\" #>  #> $aumclast$sparse #> [1] FALSE #>  #> $aumclast$formalsmap #> list() #>  #> $aumclast$depends #> NULL #>  #> $aumclast$datatype #> [1] \"interval\" #>  #>  #> $aumcall #> $aumcall$FUN #> [1] \"pk.calc.aumc.all\" #>  #> $aumcall$values #> [1] FALSE  TRUE #>  #> $aumcall$unit_type #> [1] \"aumc\" #>  #> $aumcall$pretty_name #> [1] \"AUMC,all\" #>  #> $aumcall$desc #> [1] \"The area under the concentration time moment curve from the beginning of the interval to the last concentration above the limit of quantification plus the moment of the triangle from that last concentration to 0 at the first concentration below the limit of quantification\" #>  #> $aumcall$sparse #> [1] FALSE #>  #> $aumcall$formalsmap #> list() #>  #> $aumcall$depends #> NULL #>  #> $aumcall$datatype #> [1] \"interval\" #>  #>  #> $aucint.last #> $aucint.last$FUN #> [1] \"pk.calc.aucint.last\" #>  #> $aucint.last$values #> [1] FALSE  TRUE #>  #> $aucint.last$unit_type #> [1] \"auc\" #>  #> $aucint.last$pretty_name #> [1] \"AUCint (based on AUClast extrapolation)\" #>  #> $aucint.last$desc #> [1] \"The area under the concentration time curve in the interval extrapolating from Tlast to infinity with zeros (matching AUClast)\" #>  #> $aucint.last$sparse #> [1] FALSE #>  #> $aucint.last$formalsmap #> $aucint.last$formalsmap$conc #> [1] \"conc.group\" #>  #> $aucint.last$formalsmap$time #> [1] \"time.group\" #>  #> $aucint.last$formalsmap$time.dose #> NULL #>  #>  #> $aucint.last$depends #> NULL #>  #> $aucint.last$datatype #> [1] \"interval\" #>  #>  #> $aucint.last.dose #> $aucint.last.dose$FUN #> [1] \"pk.calc.aucint.last\" #>  #> $aucint.last.dose$values #> [1] FALSE  TRUE #>  #> $aucint.last.dose$unit_type #> [1] \"auc\" #>  #> $aucint.last.dose$pretty_name #> [1] \"AUCint (based on AUClast extrapolation, dose-aware)\" #>  #> $aucint.last.dose$desc #> [1] \"The area under the concentration time curve in the interval extrapolating from Tlast to infinity with zeros (matching AUClast) with dose-aware interpolation/extrapolation of concentrations\" #>  #> $aucint.last.dose$sparse #> [1] FALSE #>  #> $aucint.last.dose$formalsmap #> $aucint.last.dose$formalsmap$conc #> [1] \"conc.group\" #>  #> $aucint.last.dose$formalsmap$time #> [1] \"time.group\" #>  #> $aucint.last.dose$formalsmap$time.dose #> [1] \"time.dose.group\" #>  #>  #> $aucint.last.dose$depends #> NULL #>  #> $aucint.last.dose$datatype #> [1] \"interval\" #>  #>  #> $aucint.all #> $aucint.all$FUN #> [1] \"pk.calc.aucint.all\" #>  #> $aucint.all$values #> [1] FALSE  TRUE #>  #> $aucint.all$unit_type #> [1] \"auc\" #>  #> $aucint.all$pretty_name #> [1] \"AUCint (based on AUCall extrapolation)\" #>  #> $aucint.all$desc #> [1] \"The area under the concentration time curve in the interval extrapolating from Tlast to infinity with the triangle from Tlast to the next point and zero thereafter (matching AUCall)\" #>  #> $aucint.all$sparse #> [1] FALSE #>  #> $aucint.all$formalsmap #> $aucint.all$formalsmap$conc #> [1] \"conc.group\" #>  #> $aucint.all$formalsmap$time #> [1] \"time.group\" #>  #> $aucint.all$formalsmap$time.dose #> NULL #>  #>  #> $aucint.all$depends #> NULL #>  #> $aucint.all$datatype #> [1] \"interval\" #>  #>  #> $aucint.all.dose #> $aucint.all.dose$FUN #> [1] \"pk.calc.aucint.all\" #>  #> $aucint.all.dose$values #> [1] FALSE  TRUE #>  #> $aucint.all.dose$unit_type #> [1] \"auc\" #>  #> $aucint.all.dose$pretty_name #> [1] \"AUCint (based on AUCall extrapolation, dose-aware)\" #>  #> $aucint.all.dose$desc #> [1] \"The area under the concentration time curve in the interval extrapolating from Tlast to infinity with the triangle from Tlast to the next point and zero thereafter (matching AUCall) with dose-aware interpolation/extrapolation of concentrations\" #>  #> $aucint.all.dose$sparse #> [1] FALSE #>  #> $aucint.all.dose$formalsmap #> $aucint.all.dose$formalsmap$conc #> [1] \"conc.group\" #>  #> $aucint.all.dose$formalsmap$time #> [1] \"time.group\" #>  #> $aucint.all.dose$formalsmap$time.dose #> [1] \"time.dose.group\" #>  #>  #> $aucint.all.dose$depends #> NULL #>  #> $aucint.all.dose$datatype #> [1] \"interval\" #>  #>  #> $c0 #> $c0$FUN #> [1] \"pk.calc.c0\" #>  #> $c0$values #> [1] FALSE  TRUE #>  #> $c0$unit_type #> [1] \"conc\" #>  #> $c0$pretty_name #> [1] \"C0\" #>  #> $c0$desc #> [1] \"Initial concentration after an IV bolus\" #>  #> $c0$sparse #> [1] FALSE #>  #> $c0$formalsmap #> list() #>  #> $c0$depends #> NULL #>  #> $c0$datatype #> [1] \"interval\" #>  #>  #> $cmax #> $cmax$FUN #> [1] \"pk.calc.cmax\" #>  #> $cmax$values #> [1] FALSE  TRUE #>  #> $cmax$unit_type #> [1] \"conc\" #>  #> $cmax$pretty_name #> [1] \"Cmax\" #>  #> $cmax$desc #> [1] \"Maximum observed concentration\" #>  #> $cmax$sparse #> [1] FALSE #>  #> $cmax$formalsmap #> list() #>  #> $cmax$depends #> NULL #>  #> $cmax$datatype #> [1] \"interval\" #>  #>  #> $cmin #> $cmin$FUN #> [1] \"pk.calc.cmin\" #>  #> $cmin$values #> [1] FALSE  TRUE #>  #> $cmin$unit_type #> [1] \"conc\" #>  #> $cmin$pretty_name #> [1] \"Cmin\" #>  #> $cmin$desc #> [1] \"Minimum observed concentration\" #>  #> $cmin$sparse #> [1] FALSE #>  #> $cmin$formalsmap #> list() #>  #> $cmin$depends #> NULL #>  #> $cmin$datatype #> [1] \"interval\" #>  #>  #> $tmax #> $tmax$FUN #> [1] \"pk.calc.tmax\" #>  #> $tmax$values #> [1] FALSE  TRUE #>  #> $tmax$unit_type #> [1] \"time\" #>  #> $tmax$pretty_name #> [1] \"Tmax\" #>  #> $tmax$desc #> [1] \"Time of the maximum observed concentration\" #>  #> $tmax$sparse #> [1] FALSE #>  #> $tmax$formalsmap #> list() #>  #> $tmax$depends #> NULL #>  #> $tmax$datatype #> [1] \"interval\" #>  #>  #> $tlast #> $tlast$FUN #> [1] \"pk.calc.tlast\" #>  #> $tlast$values #> [1] FALSE  TRUE #>  #> $tlast$unit_type #> [1] \"time\" #>  #> $tlast$pretty_name #> [1] \"Tlast\" #>  #> $tlast$desc #> [1] \"Time of the last concentration observed above the limit of quantification\" #>  #> $tlast$sparse #> [1] FALSE #>  #> $tlast$formalsmap #> list() #>  #> $tlast$depends #> NULL #>  #> $tlast$datatype #> [1] \"interval\" #>  #>  #> $tfirst #> $tfirst$FUN #> [1] \"pk.calc.tfirst\" #>  #> $tfirst$values #> [1] FALSE  TRUE #>  #> $tfirst$unit_type #> [1] \"time\" #>  #> $tfirst$pretty_name #> [1] \"Tfirst\" #>  #> $tfirst$desc #> [1] \"Time of the first concentration above the limit of quantification\" #>  #> $tfirst$sparse #> [1] FALSE #>  #> $tfirst$formalsmap #> list() #>  #> $tfirst$depends #> NULL #>  #> $tfirst$datatype #> [1] \"interval\" #>  #>  #> $clast.obs #> $clast.obs$FUN #> [1] \"pk.calc.clast.obs\" #>  #> $clast.obs$values #> [1] FALSE  TRUE #>  #> $clast.obs$unit_type #> [1] \"conc\" #>  #> $clast.obs$pretty_name #> [1] \"Clast\" #>  #> $clast.obs$desc #> [1] \"The last concentration observed above the limit of quantification\" #>  #> $clast.obs$sparse #> [1] FALSE #>  #> $clast.obs$formalsmap #> list() #>  #> $clast.obs$depends #> NULL #>  #> $clast.obs$datatype #> [1] \"interval\" #>  #>  #> $cl.last #> $cl.last$FUN #> [1] \"pk.calc.cl\" #>  #> $cl.last$values #> [1] FALSE  TRUE #>  #> $cl.last$unit_type #> [1] \"clearance\" #>  #> $cl.last$pretty_name #> [1] \"CL (based on AUClast)\" #>  #> $cl.last$desc #> [1] \"Clearance or observed oral clearance calculated to Clast\" #>  #> $cl.last$sparse #> [1] FALSE #>  #> $cl.last$formalsmap #> $cl.last$formalsmap$auc #> [1] \"auclast\" #>  #>  #> $cl.last$depends #> [1] \"auclast\" #>  #> $cl.last$datatype #> [1] \"interval\" #>  #>  #> $cl.all #> $cl.all$FUN #> [1] \"pk.calc.cl\" #>  #> $cl.all$values #> [1] FALSE  TRUE #>  #> $cl.all$unit_type #> [1] \"clearance\" #>  #> $cl.all$pretty_name #> [1] \"CL (based on AUCall)\" #>  #> $cl.all$desc #> [1] \"Clearance or observed oral clearance calculated with AUCall\" #>  #> $cl.all$sparse #> [1] FALSE #>  #> $cl.all$formalsmap #> $cl.all$formalsmap$auc #> [1] \"aucall\" #>  #>  #> $cl.all$depends #> [1] \"aucall\" #>  #> $cl.all$datatype #> [1] \"interval\" #>  #>  #> $f #> $f$FUN #> [1] \"pk.calc.f\" #>  #> $f$values #> [1] FALSE  TRUE #>  #> $f$unit_type #> [1] \"fraction\" #>  #> $f$pretty_name #> [1] \"Bioavailability\" #>  #> $f$desc #> [1] \"Bioavailability or relative bioavailability\" #>  #> $f$sparse #> [1] FALSE #>  #> $f$formalsmap #> list() #>  #> $f$depends #> NULL #>  #> $f$datatype #> [1] \"interval\" #>  #>  #> $mrt.last #> $mrt.last$FUN #> [1] \"pk.calc.mrt\" #>  #> $mrt.last$values #> [1] FALSE  TRUE #>  #> $mrt.last$unit_type #> [1] \"time\" #>  #> $mrt.last$pretty_name #> [1] \"MRT (based on AUClast)\" #>  #> $mrt.last$desc #> [1] \"The mean residence time to the last observed concentration above the LOQ\" #>  #> $mrt.last$sparse #> [1] FALSE #>  #> $mrt.last$formalsmap #> $mrt.last$formalsmap$auc #> [1] \"auclast\" #>  #> $mrt.last$formalsmap$aumc #> [1] \"aumclast\" #>  #>  #> $mrt.last$depends #> [1] \"auclast\"  \"aumclast\" #>  #> $mrt.last$datatype #> [1] \"interval\" #>  #>  #> $mrt.iv.last #> $mrt.iv.last$FUN #> [1] \"pk.calc.mrt.iv\" #>  #> $mrt.iv.last$values #> [1] FALSE  TRUE #>  #> $mrt.iv.last$unit_type #> [1] \"time\" #>  #> $mrt.iv.last$pretty_name #> [1] \"MRT (for IV dosing, based on AUClast)\" #>  #> $mrt.iv.last$desc #> [1] \"The mean residence time to the last observed concentration above the LOQ correcting for dosing duration\" #>  #> $mrt.iv.last$sparse #> [1] FALSE #>  #> $mrt.iv.last$formalsmap #> $mrt.iv.last$formalsmap$auc #> [1] \"auclast\" #>  #> $mrt.iv.last$formalsmap$aumc #> [1] \"aumclast\" #>  #>  #> $mrt.iv.last$depends #> [1] \"auclast\"  \"aumclast\" #>  #> $mrt.iv.last$datatype #> [1] \"interval\" #>  #>  #> $vss.last #> $vss.last$FUN #> [1] \"pk.calc.vss\" #>  #> $vss.last$values #> [1] FALSE  TRUE #>  #> $vss.last$unit_type #> [1] \"volume\" #>  #> $vss.last$pretty_name #> [1] \"Vss (based on AUClast)\" #>  #> $vss.last$desc #> [1] \"The steady-state volume of distribution calculating through Tlast\" #>  #> $vss.last$sparse #> [1] FALSE #>  #> $vss.last$formalsmap #> $vss.last$formalsmap$cl #> [1] \"cl.last\" #>  #> $vss.last$formalsmap$mrt #> [1] \"mrt.last\" #>  #>  #> $vss.last$depends #> [1] \"cl.last\"  \"mrt.last\" #>  #> $vss.last$datatype #> [1] \"interval\" #>  #>  #> $vss.iv.last #> $vss.iv.last$FUN #> [1] \"pk.calc.vss\" #>  #> $vss.iv.last$values #> [1] FALSE  TRUE #>  #> $vss.iv.last$unit_type #> [1] \"volume\" #>  #> $vss.iv.last$pretty_name #> [1] \"Vss (for IV dosing, based on AUClast)\" #>  #> $vss.iv.last$desc #> [1] \"The steady-state volume of distribution with intravenous infusion calculating through Tlast\" #>  #> $vss.iv.last$sparse #> [1] FALSE #>  #> $vss.iv.last$formalsmap #> $vss.iv.last$formalsmap$cl #> [1] \"cl.last\" #>  #> $vss.iv.last$formalsmap$mrt #> [1] \"mrt.iv.last\" #>  #>  #> $vss.iv.last$depends #> [1] \"cl.last\"     \"mrt.iv.last\" #>  #> $vss.iv.last$datatype #> [1] \"interval\" #>  #>  #> $cav #> $cav$FUN #> [1] \"pk.calc.cav\" #>  #> $cav$values #> [1] FALSE  TRUE #>  #> $cav$unit_type #> [1] \"conc\" #>  #> $cav$pretty_name #> [1] \"Cav\" #>  #> $cav$desc #> [1] \"The average concentration during an interval (calculated with AUClast)\" #>  #> $cav$sparse #> [1] FALSE #>  #> $cav$formalsmap #> $cav$formalsmap$auc #> [1] \"auclast\" #>  #>  #> $cav$depends #> [1] \"auclast\" #>  #> $cav$datatype #> [1] \"interval\" #>  #>  #> $cav.int.last #> $cav.int.last$FUN #> [1] \"pk.calc.cav\" #>  #> $cav.int.last$values #> [1] FALSE  TRUE #>  #> $cav.int.last$unit_type #> [1] \"conc\" #>  #> $cav.int.last$pretty_name #> [1] \"Cav\" #>  #> $cav.int.last$desc #> [1] \"The average concentration during an interval (calculated with AUCint.last)\" #>  #> $cav.int.last$sparse #> [1] FALSE #>  #> $cav.int.last$formalsmap #> $cav.int.last$formalsmap$auc #> [1] \"aucint.last\" #>  #>  #> $cav.int.last$depends #> [1] \"aucint.last\" #>  #> $cav.int.last$datatype #> [1] \"interval\" #>  #>  #> $cav.int.all #> $cav.int.all$FUN #> [1] \"pk.calc.cav\" #>  #> $cav.int.all$values #> [1] FALSE  TRUE #>  #> $cav.int.all$unit_type #> [1] \"conc\" #>  #> $cav.int.all$pretty_name #> [1] \"Cav\" #>  #> $cav.int.all$desc #> [1] \"The average concentration during an interval (calculated with AUCint.all)\" #>  #> $cav.int.all$sparse #> [1] FALSE #>  #> $cav.int.all$formalsmap #> $cav.int.all$formalsmap$auc #> [1] \"aucint.all\" #>  #>  #> $cav.int.all$depends #> [1] \"aucint.all\" #>  #> $cav.int.all$datatype #> [1] \"interval\" #>  #>  #> $ctrough #> $ctrough$FUN #> [1] \"pk.calc.ctrough\" #>  #> $ctrough$values #> [1] FALSE  TRUE #>  #> $ctrough$unit_type #> [1] \"conc\" #>  #> $ctrough$pretty_name #> [1] \"Ctrough\" #>  #> $ctrough$desc #> [1] \"The trough (end of interval) concentration\" #>  #> $ctrough$sparse #> [1] FALSE #>  #> $ctrough$formalsmap #> list() #>  #> $ctrough$depends #> NULL #>  #> $ctrough$datatype #> [1] \"interval\" #>  #>  #> $cstart #> $cstart$FUN #> [1] \"pk.calc.cstart\" #>  #> $cstart$values #> [1] FALSE  TRUE #>  #> $cstart$unit_type #> [1] \"conc\" #>  #> $cstart$pretty_name #> [1] \"Cstart\" #>  #> $cstart$desc #> [1] \"The predose concentration\" #>  #> $cstart$sparse #> [1] FALSE #>  #> $cstart$formalsmap #> list() #>  #> $cstart$depends #> NULL #>  #> $cstart$datatype #> [1] \"interval\" #>  #>  #> $ptr #> $ptr$FUN #> [1] \"pk.calc.ptr\" #>  #> $ptr$values #> [1] FALSE  TRUE #>  #> $ptr$unit_type #> [1] \"fraction\" #>  #> $ptr$pretty_name #> [1] \"Peak-to-trough ratio\" #>  #> $ptr$desc #> [1] \"Peak-to-Trough ratio (fraction)\" #>  #> $ptr$sparse #> [1] FALSE #>  #> $ptr$formalsmap #> list() #>  #> $ptr$depends #> [1] \"cmax\"    \"ctrough\" #>  #> $ptr$datatype #> [1] \"interval\" #>  #>  #> $tlag #> $tlag$FUN #> [1] \"pk.calc.tlag\" #>  #> $tlag$values #> [1] FALSE  TRUE #>  #> $tlag$unit_type #> [1] \"time\" #>  #> $tlag$pretty_name #> [1] \"Tlag\" #>  #> $tlag$desc #> [1] \"Lag time\" #>  #> $tlag$sparse #> [1] FALSE #>  #> $tlag$formalsmap #> list() #>  #> $tlag$depends #> NULL #>  #> $tlag$datatype #> [1] \"interval\" #>  #>  #> $deg.fluc #> $deg.fluc$FUN #> [1] \"pk.calc.deg.fluc\" #>  #> $deg.fluc$values #> [1] FALSE  TRUE #>  #> $deg.fluc$unit_type #> [1] \"%\" #>  #> $deg.fluc$pretty_name #> [1] \"Degree of fluctuation\" #>  #> $deg.fluc$desc #> [1] \"Degree of fluctuation\" #>  #> $deg.fluc$sparse #> [1] FALSE #>  #> $deg.fluc$formalsmap #> list() #>  #> $deg.fluc$depends #> [1] \"cmax\" \"cmin\" \"cav\"  #>  #> $deg.fluc$datatype #> [1] \"interval\" #>  #>  #> $swing #> $swing$FUN #> [1] \"pk.calc.swing\" #>  #> $swing$values #> [1] FALSE  TRUE #>  #> $swing$unit_type #> [1] \"%\" #>  #> $swing$pretty_name #> [1] \"Swing\" #>  #> $swing$desc #> [1] \"Swing relative to Cmin\" #>  #> $swing$sparse #> [1] FALSE #>  #> $swing$formalsmap #> list() #>  #> $swing$depends #> [1] \"cmax\" \"cmin\" #>  #> $swing$datatype #> [1] \"interval\" #>  #>  #> $ceoi #> $ceoi$FUN #> [1] \"pk.calc.ceoi\" #>  #> $ceoi$values #> [1] FALSE  TRUE #>  #> $ceoi$unit_type #> [1] \"conc\" #>  #> $ceoi$pretty_name #> [1] \"Ceoi\" #>  #> $ceoi$desc #> [1] \"Concentration at the end of infusion\" #>  #> $ceoi$sparse #> [1] FALSE #>  #> $ceoi$formalsmap #> list() #>  #> $ceoi$depends #> NULL #>  #> $ceoi$datatype #> [1] \"interval\" #>  #>  #> $aucabove.predose.all #> $aucabove.predose.all$FUN #> [1] \"pk.calc.aucabove\" #>  #> $aucabove.predose.all$values #> [1] FALSE  TRUE #>  #> $aucabove.predose.all$unit_type #> [1] \"auc\" #>  #> $aucabove.predose.all$pretty_name #> [1] \"AUC,above\" #>  #> $aucabove.predose.all$desc #> [1] \"The area under the concentration time the beginning of the interval to the last concentration above the limit of quantification plus the triangle from that last concentration to 0 at the first concentration below the limit of quantification, with a concentration subtracted from all concentrations and values below zero after subtraction set to zero\" #>  #> $aucabove.predose.all$sparse #> [1] FALSE #>  #> $aucabove.predose.all$formalsmap #> $aucabove.predose.all$formalsmap$conc_above #> [1] \"cstart\" #>  #>  #> $aucabove.predose.all$depends #> [1] \"cstart\" #>  #> $aucabove.predose.all$datatype #> [1] \"interval\" #>  #>  #> $aucabove.trough.all #> $aucabove.trough.all$FUN #> [1] \"pk.calc.aucabove\" #>  #> $aucabove.trough.all$values #> [1] FALSE  TRUE #>  #> $aucabove.trough.all$unit_type #> [1] \"auc\" #>  #> $aucabove.trough.all$pretty_name #> [1] \"AUC,above\" #>  #> $aucabove.trough.all$desc #> [1] \"The area under the concentration time the beginning of the interval to the last concentration above the limit of quantification plus the triangle from that last concentration to 0 at the first concentration below the limit of quantification, with a concentration subtracted from all concentrations and values below zero after subtraction set to zero\" #>  #> $aucabove.trough.all$sparse #> [1] FALSE #>  #> $aucabove.trough.all$formalsmap #> $aucabove.trough.all$formalsmap$conc_above #> [1] \"ctrough\" #>  #>  #> $aucabove.trough.all$depends #> [1] \"ctrough\" #>  #> $aucabove.trough.all$datatype #> [1] \"interval\" #>  #>  #> $count_conc #> $count_conc$FUN #> [1] \"pk.calc.count_conc\" #>  #> $count_conc$values #> [1] FALSE  TRUE #>  #> $count_conc$unit_type #> [1] \"count\" #>  #> $count_conc$pretty_name #> [1] \"Concentration count\" #>  #> $count_conc$desc #> [1] \"Number of non-missing concentrations for a subject\" #>  #> $count_conc$sparse #> [1] FALSE #>  #> $count_conc$formalsmap #> list() #>  #> $count_conc$depends #> NULL #>  #> $count_conc$datatype #> [1] \"interval\" #>  #>  #> $totdose #> $totdose$FUN #> [1] \"pk.calc.totdose\" #>  #> $totdose$values #> [1] FALSE  TRUE #>  #> $totdose$unit_type #> [1] \"dose\" #>  #> $totdose$pretty_name #> [1] \"Total dose\" #>  #> $totdose$desc #> [1] \"Total dose administered during an interval\" #>  #> $totdose$sparse #> [1] FALSE #>  #> $totdose$formalsmap #> list() #>  #> $totdose$depends #> NULL #>  #> $totdose$datatype #> [1] \"interval\" #>  #>  #> $ae #> $ae$FUN #> [1] \"pk.calc.ae\" #>  #> $ae$values #> [1] FALSE  TRUE #>  #> $ae$unit_type #> [1] \"amount\" #>  #> $ae$pretty_name #> [1] \"Amount excreted\" #>  #> $ae$desc #> [1] \"The amount excreted (typically into urine or feces)\" #>  #> $ae$sparse #> [1] FALSE #>  #> $ae$formalsmap #> list() #>  #> $ae$depends #> NULL #>  #> $ae$datatype #> [1] \"interval\" #>  #>  #> $clr.last #> $clr.last$FUN #> [1] \"pk.calc.clr\" #>  #> $clr.last$values #> [1] FALSE  TRUE #>  #> $clr.last$unit_type #> [1] \"renal_clearance\" #>  #> $clr.last$pretty_name #> [1] \"Renal clearance (from AUClast)\" #>  #> $clr.last$desc #> [1] \"The renal clearance calculated using AUClast\" #>  #> $clr.last$sparse #> [1] FALSE #>  #> $clr.last$formalsmap #> $clr.last$formalsmap$auc #> [1] \"auclast\" #>  #>  #> $clr.last$depends #> NULL #>  #> $clr.last$datatype #> [1] \"interval\" #>  #>  #> $clr.obs #> $clr.obs$FUN #> [1] \"pk.calc.clr\" #>  #> $clr.obs$values #> [1] FALSE  TRUE #>  #> $clr.obs$unit_type #> [1] \"renal_clearance\" #>  #> $clr.obs$pretty_name #> [1] \"Renal clearance (from AUCinf,obs)\" #>  #> $clr.obs$desc #> [1] \"The renal clearance calculated using AUCinf,obs\" #>  #> $clr.obs$sparse #> [1] FALSE #>  #> $clr.obs$formalsmap #> $clr.obs$formalsmap$auc #> [1] \"aucinf.obs\" #>  #>  #> $clr.obs$depends #> NULL #>  #> $clr.obs$datatype #> [1] \"interval\" #>  #>  #> $clr.pred #> $clr.pred$FUN #> [1] \"pk.calc.clr\" #>  #> $clr.pred$values #> [1] FALSE  TRUE #>  #> $clr.pred$unit_type #> [1] \"renal_clearance\" #>  #> $clr.pred$pretty_name #> [1] \"Renal clearance (from AUCinf,pred)\" #>  #> $clr.pred$desc #> [1] \"The renal clearance calculated using AUCinf,pred\" #>  #> $clr.pred$sparse #> [1] FALSE #>  #> $clr.pred$formalsmap #> $clr.pred$formalsmap$auc #> [1] \"aucinf.pred\" #>  #>  #> $clr.pred$depends #> NULL #>  #> $clr.pred$datatype #> [1] \"interval\" #>  #>  #> $fe #> $fe$FUN #> [1] \"pk.calc.fe\" #>  #> $fe$values #> [1] FALSE  TRUE #>  #> $fe$unit_type #> [1] \"fraction\" #>  #> $fe$pretty_name #> [1] \"Fraction excreted\" #>  #> $fe$desc #> [1] \"The fraction of the dose excreted\" #>  #> $fe$sparse #> [1] FALSE #>  #> $fe$formalsmap #> list() #>  #> $fe$depends #> NULL #>  #> $fe$datatype #> [1] \"interval\" #>  #>  #> $sparse_auclast #> $sparse_auclast$FUN #> [1] \"pk.calc.sparse_auclast\" #>  #> $sparse_auclast$values #> [1] FALSE  TRUE #>  #> $sparse_auclast$unit_type #> [1] \"auc\" #>  #> $sparse_auclast$pretty_name #> [1] \"Sparse AUClast\" #>  #> $sparse_auclast$desc #> [1] \"For sparse PK sampling, the area under the concentration time curve from the beginning of the interval to the last concentration above the limit of quantification\" #>  #> $sparse_auclast$sparse #> [1] TRUE #>  #> $sparse_auclast$formalsmap #> list() #>  #> $sparse_auclast$depends #> NULL #>  #> $sparse_auclast$datatype #> [1] \"interval\" #>  #>  #> $sparse_auc_se #> $sparse_auc_se$FUN #> [1] NA #>  #> $sparse_auc_se$values #> [1] FALSE  TRUE #>  #> $sparse_auc_se$unit_type #> [1] \"auc\" #>  #> $sparse_auc_se$pretty_name #> [1] \"Sparse AUClast standard error\" #>  #> $sparse_auc_se$desc #> [1] \"For sparse PK sampling, the standard error of the area under the concentration time curve from the beginning of the interval to the last concentration above the limit of quantification\" #>  #> $sparse_auc_se$sparse #> [1] FALSE #>  #> $sparse_auc_se$formalsmap #> list() #>  #> $sparse_auc_se$depends #> [1] \"sparse_auclast\" #>  #> $sparse_auc_se$datatype #> [1] \"interval\" #>  #>  #> $sparse_auc_df #> $sparse_auc_df$FUN #> [1] NA #>  #> $sparse_auc_df$values #> [1] FALSE  TRUE #>  #> $sparse_auc_df$unit_type #> [1] \"count\" #>  #> $sparse_auc_df$pretty_name #> [1] \"Sparse AUClast degrees of freedom\" #>  #> $sparse_auc_df$desc #> [1] \"For sparse PK sampling, the standard error degrees of freedom of the area under the concentration time curve from the beginning of the interval to the last concentration above the limit of quantification\" #>  #> $sparse_auc_df$sparse #> [1] FALSE #>  #> $sparse_auc_df$formalsmap #> list() #>  #> $sparse_auc_df$depends #> [1] \"sparse_auclast\" #>  #> $sparse_auc_df$datatype #> [1] \"interval\" #>  #>  #> $time_above #> $time_above$FUN #> [1] \"pk.calc.time_above\" #>  #> $time_above$values #> [1] FALSE  TRUE #>  #> $time_above$unit_type #> [1] \"time\" #>  #> $time_above$pretty_name #> [1] \"Time above Concentration\" #>  #> $time_above$desc #> [1] \"Time above a given concentration\" #>  #> $time_above$sparse #> [1] FALSE #>  #> $time_above$formalsmap #> list() #>  #> $time_above$depends #> NULL #>  #> $time_above$datatype #> [1] \"interval\" #>  #>  #> $aucivlast #> $aucivlast$FUN #> [1] \"pk.calc.auciv\" #>  #> $aucivlast$values #> [1] FALSE  TRUE #>  #> $aucivlast$unit_type #> [1] \"auc\" #>  #> $aucivlast$pretty_name #> [1] \"AUClast (IV dosing)\" #>  #> $aucivlast$desc #> [1] \"The AUClast calculated with back-extrapolation for intravenous dosing using extrapolated C0\" #>  #> $aucivlast$sparse #> [1] FALSE #>  #> $aucivlast$formalsmap #> $aucivlast$formalsmap$auc #> [1] \"auclast\" #>  #>  #> $aucivlast$depends #> [1] \"auclast\" \"c0\"      #>  #> $aucivlast$datatype #> [1] \"interval\" #>  #>  #> $aucivall #> $aucivall$FUN #> [1] \"pk.calc.auciv\" #>  #> $aucivall$values #> [1] FALSE  TRUE #>  #> $aucivall$unit_type #> [1] \"auc\" #>  #> $aucivall$pretty_name #> [1] \"AUCall (IV dosing)\" #>  #> $aucivall$desc #> [1] \"The AUCall calculated with back-extrapolation for intravenous dosing using extrapolated C0\" #>  #> $aucivall$sparse #> [1] FALSE #>  #> $aucivall$formalsmap #> $aucivall$formalsmap$auc #> [1] \"aucall\" #>  #>  #> $aucivall$depends #> [1] \"aucall\" \"c0\"     #>  #> $aucivall$datatype #> [1] \"interval\" #>  #>  #> $aucivint.last #> $aucivint.last$FUN #> [1] \"pk.calc.auciv\" #>  #> $aucivint.last$values #> [1] FALSE  TRUE #>  #> $aucivint.last$unit_type #> [1] \"auc\" #>  #> $aucivint.last$pretty_name #> [1] \"AUCint,last (IV dosing)\" #>  #> $aucivint.last$desc #> [1] \"The AUCint,last calculated with back-extrapolation for intravenous dosing using extrapolated C0\" #>  #> $aucivint.last$sparse #> [1] FALSE #>  #> $aucivint.last$formalsmap #> $aucivint.last$formalsmap$auc #> [1] \"aucint.last\" #>  #>  #> $aucivint.last$depends #> [1] \"aucint.last\" \"c0\"          #>  #> $aucivint.last$datatype #> [1] \"interval\" #>  #>  #> $aucivint.all #> $aucivint.all$FUN #> [1] \"pk.calc.auciv\" #>  #> $aucivint.all$values #> [1] FALSE  TRUE #>  #> $aucivint.all$unit_type #> [1] \"auc\" #>  #> $aucivint.all$pretty_name #> [1] \"AUCint,all (IV dosing)\" #>  #> $aucivint.all$desc #> [1] \"The AUCint,all calculated with back-extrapolation for intravenous dosing using extrapolated C0\" #>  #> $aucivint.all$sparse #> [1] FALSE #>  #> $aucivint.all$formalsmap #> $aucivint.all$formalsmap$auc #> [1] \"aucint.all\" #>  #>  #> $aucivint.all$depends #> [1] \"aucint.all\" \"c0\"         #>  #> $aucivint.all$datatype #> [1] \"interval\" #>  #>  #> $aucivpbextlast #> $aucivpbextlast$FUN #> [1] \"pk.calc.auciv_pbext\" #>  #> $aucivpbextlast$values #> [1] FALSE  TRUE #>  #> $aucivpbextlast$unit_type #> [1] \"%\" #>  #> $aucivpbextlast$pretty_name #> [1] \"AUCbext (based on AUClast)\" #>  #> $aucivpbextlast$desc #> [1] \"The back-extrapolation percent for intravenous dosing based on AUClast\" #>  #> $aucivpbextlast$sparse #> [1] FALSE #>  #> $aucivpbextlast$formalsmap #> $aucivpbextlast$formalsmap$auc #> [1] \"auclast\" #>  #> $aucivpbextlast$formalsmap$auciv #> [1] \"aucivlast\" #>  #>  #> $aucivpbextlast$depends #> [1] \"auclast\"   \"aucivlast\" #>  #> $aucivpbextlast$datatype #> [1] \"interval\" #>  #>  #> $aucivpbextall #> $aucivpbextall$FUN #> [1] \"pk.calc.auciv_pbext\" #>  #> $aucivpbextall$values #> [1] FALSE  TRUE #>  #> $aucivpbextall$unit_type #> [1] \"%\" #>  #> $aucivpbextall$pretty_name #> [1] \"AUCbext (based on AUCall)\" #>  #> $aucivpbextall$desc #> [1] \"The back-extrapolation percent for intravenous dosing based on AUCall\" #>  #> $aucivpbextall$sparse #> [1] FALSE #>  #> $aucivpbextall$formalsmap #> $aucivpbextall$formalsmap$auc #> [1] \"aucall\" #>  #> $aucivpbextall$formalsmap$auciv #> [1] \"aucivall\" #>  #>  #> $aucivpbextall$depends #> [1] \"aucall\"   \"aucivall\" #>  #> $aucivpbextall$datatype #> [1] \"interval\" #>  #>  #> $aucivpbextint.last #> $aucivpbextint.last$FUN #> [1] \"pk.calc.auciv_pbext\" #>  #> $aucivpbextint.last$values #> [1] FALSE  TRUE #>  #> $aucivpbextint.last$unit_type #> [1] \"%\" #>  #> $aucivpbextint.last$pretty_name #> [1] \"AUCbext (based on AUCint,last)\" #>  #> $aucivpbextint.last$desc #> [1] \"The back-extrapolation percent for intravenous dosing based on AUCint,last\" #>  #> $aucivpbextint.last$sparse #> [1] FALSE #>  #> $aucivpbextint.last$formalsmap #> $aucivpbextint.last$formalsmap$auc #> [1] \"aucint.last\" #>  #> $aucivpbextint.last$formalsmap$auciv #> [1] \"aucivint.last\" #>  #>  #> $aucivpbextint.last$depends #> [1] \"aucint.last\"   \"aucivint.last\" #>  #> $aucivpbextint.last$datatype #> [1] \"interval\" #>  #>  #> $aucivpbextint.all #> $aucivpbextint.all$FUN #> [1] \"pk.calc.auciv_pbext\" #>  #> $aucivpbextint.all$values #> [1] FALSE  TRUE #>  #> $aucivpbextint.all$unit_type #> [1] \"%\" #>  #> $aucivpbextint.all$pretty_name #> [1] \"AUCbext (based on AUCint,all)\" #>  #> $aucivpbextint.all$desc #> [1] \"The back-extrapolation percent for intravenous dosing based on AUCint,all\" #>  #> $aucivpbextint.all$sparse #> [1] FALSE #>  #> $aucivpbextint.all$formalsmap #> $aucivpbextint.all$formalsmap$auc #> [1] \"aucint.all\" #>  #> $aucivpbextint.all$formalsmap$auciv #> [1] \"aucivint.all\" #>  #>  #> $aucivpbextint.all$depends #> [1] \"aucint.all\"   \"aucivint.all\" #>  #> $aucivpbextint.all$datatype #> [1] \"interval\" #>  #>  #> $half.life #> $half.life$FUN #> [1] \"pk.calc.half.life\" #>  #> $half.life$values #> [1] FALSE  TRUE #>  #> $half.life$unit_type #> [1] \"time\" #>  #> $half.life$pretty_name #> [1] \"Half-life\" #>  #> $half.life$desc #> [1] \"The (terminal) half-life\" #>  #> $half.life$sparse #> [1] FALSE #>  #> $half.life$formalsmap #> list() #>  #> $half.life$depends #> [1] \"tmax\"  \"tlast\" #>  #> $half.life$datatype #> [1] \"interval\" #>  #>  #> $r.squared #> $r.squared$FUN #> [1] NA #>  #> $r.squared$values #> [1] FALSE  TRUE #>  #> $r.squared$unit_type #> [1] \"unitless\" #>  #> $r.squared$pretty_name #> [1] \"$r^2$\" #>  #> $r.squared$desc #> [1] \"The r^2 value of the half-life calculation\" #>  #> $r.squared$sparse #> [1] FALSE #>  #> $r.squared$formalsmap #> list() #>  #> $r.squared$depends #> [1] \"half.life\" #>  #> $r.squared$datatype #> [1] \"interval\" #>  #>  #> $adj.r.squared #> $adj.r.squared$FUN #> [1] NA #>  #> $adj.r.squared$values #> [1] FALSE  TRUE #>  #> $adj.r.squared$unit_type #> [1] \"unitless\" #>  #> $adj.r.squared$pretty_name #> [1] \"$r^2_{adj}$\" #>  #> $adj.r.squared$desc #> [1] \"The adjusted r^2 value of the half-life calculation\" #>  #> $adj.r.squared$sparse #> [1] FALSE #>  #> $adj.r.squared$formalsmap #> list() #>  #> $adj.r.squared$depends #> [1] \"half.life\" #>  #> $adj.r.squared$datatype #> [1] \"interval\" #>  #>  #> $lambda.z #> $lambda.z$FUN #> [1] NA #>  #> $lambda.z$values #> [1] FALSE  TRUE #>  #> $lambda.z$unit_type #> [1] \"inverse_time\" #>  #> $lambda.z$pretty_name #> [1] \"$\\\\lambda_z$\" #>  #> $lambda.z$desc #> [1] \"The elimination rate of the terminal half-life\" #>  #> $lambda.z$sparse #> [1] FALSE #>  #> $lambda.z$formalsmap #> list() #>  #> $lambda.z$depends #> [1] \"half.life\" #>  #> $lambda.z$datatype #> [1] \"interval\" #>  #>  #> $lambda.z.time.first #> $lambda.z.time.first$FUN #> [1] NA #>  #> $lambda.z.time.first$values #> [1] FALSE  TRUE #>  #> $lambda.z.time.first$unit_type #> [1] \"time\" #>  #> $lambda.z.time.first$pretty_name #> [1] \"First time for $\\\\lambda_z$\" #>  #> $lambda.z.time.first$desc #> [1] \"The first time point used for the calculation of half-life\" #>  #> $lambda.z.time.first$sparse #> [1] FALSE #>  #> $lambda.z.time.first$formalsmap #> list() #>  #> $lambda.z.time.first$depends #> [1] \"half.life\" #>  #> $lambda.z.time.first$datatype #> [1] \"interval\" #>  #>  #> $lambda.z.n.points #> $lambda.z.n.points$FUN #> [1] NA #>  #> $lambda.z.n.points$values #> [1] FALSE  TRUE #>  #> $lambda.z.n.points$unit_type #> [1] \"count\" #>  #> $lambda.z.n.points$pretty_name #> [1] \"Number of points used for lambda_z\" #>  #> $lambda.z.n.points$desc #> [1] \"The number of points used for the calculation of half-life\" #>  #> $lambda.z.n.points$sparse #> [1] FALSE #>  #> $lambda.z.n.points$formalsmap #> list() #>  #> $lambda.z.n.points$depends #> [1] \"half.life\" #>  #> $lambda.z.n.points$datatype #> [1] \"interval\" #>  #>  #> $clast.pred #> $clast.pred$FUN #> [1] NA #>  #> $clast.pred$values #> [1] FALSE  TRUE #>  #> $clast.pred$unit_type #> [1] \"conc\" #>  #> $clast.pred$pretty_name #> [1] \"Clast,pred\" #>  #> $clast.pred$desc #> [1] \"The concentration at Tlast as predicted by the half-life\" #>  #> $clast.pred$sparse #> [1] FALSE #>  #> $clast.pred$formalsmap #> list() #>  #> $clast.pred$depends #> [1] \"half.life\" #>  #> $clast.pred$datatype #> [1] \"interval\" #>  #>  #> $span.ratio #> $span.ratio$FUN #> [1] NA #>  #> $span.ratio$values #> [1] FALSE  TRUE #>  #> $span.ratio$unit_type #> [1] \"fraction\" #>  #> $span.ratio$pretty_name #> [1] \"Span ratio\" #>  #> $span.ratio$desc #> [1] \"The ratio of the half-life to the duration used for half-life calculation\" #>  #> $span.ratio$sparse #> [1] FALSE #>  #> $span.ratio$formalsmap #> list() #>  #> $span.ratio$depends #> [1] \"half.life\" #>  #> $span.ratio$datatype #> [1] \"interval\" #>  #>  #> $thalf.eff.last #> $thalf.eff.last$FUN #> [1] \"pk.calc.thalf.eff\" #>  #> $thalf.eff.last$values #> [1] FALSE  TRUE #>  #> $thalf.eff.last$unit_type #> [1] \"time\" #>  #> $thalf.eff.last$pretty_name #> [1] \"Effective half-life (based on MRT,last)\" #>  #> $thalf.eff.last$desc #> [1] \"The effective half-life (as determined from the MRTlast)\" #>  #> $thalf.eff.last$sparse #> [1] FALSE #>  #> $thalf.eff.last$formalsmap #> $thalf.eff.last$formalsmap$mrt #> [1] \"mrt.last\" #>  #>  #> $thalf.eff.last$depends #> [1] \"mrt.last\" #>  #> $thalf.eff.last$datatype #> [1] \"interval\" #>  #>  #> $thalf.eff.iv.last #> $thalf.eff.iv.last$FUN #> [1] \"pk.calc.thalf.eff\" #>  #> $thalf.eff.iv.last$values #> [1] FALSE  TRUE #>  #> $thalf.eff.iv.last$unit_type #> [1] \"time\" #>  #> $thalf.eff.iv.last$pretty_name #> [1] \"Effective half-life (for IV dosing, based on MRTlast)\" #>  #> $thalf.eff.iv.last$desc #> [1] \"The effective half-life (as determined from the intravenous MRTlast)\" #>  #> $thalf.eff.iv.last$sparse #> [1] FALSE #>  #> $thalf.eff.iv.last$formalsmap #> $thalf.eff.iv.last$formalsmap$mrt #> [1] \"mrt.iv.last\" #>  #>  #> $thalf.eff.iv.last$depends #> [1] \"mrt.iv.last\" #>  #> $thalf.eff.iv.last$datatype #> [1] \"interval\" #>  #>  #> $kel.last #> $kel.last$FUN #> [1] \"pk.calc.kel\" #>  #> $kel.last$values #> [1] FALSE  TRUE #>  #> $kel.last$unit_type #> [1] \"inverse_time\" #>  #> $kel.last$pretty_name #> [1] \"Kel (based on AUClast)\" #>  #> $kel.last$desc #> [1] \"Elimination rate (as calculated from the MRT using AUClast)\" #>  #> $kel.last$sparse #> [1] FALSE #>  #> $kel.last$formalsmap #> $kel.last$formalsmap$mrt #> [1] \"mrt.last\" #>  #>  #> $kel.last$depends #> [1] \"mrt.last\" #>  #> $kel.last$datatype #> [1] \"interval\" #>  #>  #> $kel.iv.last #> $kel.iv.last$FUN #> [1] \"pk.calc.kel\" #>  #> $kel.iv.last$values #> [1] FALSE  TRUE #>  #> $kel.iv.last$unit_type #> [1] \"inverse_time\" #>  #> $kel.iv.last$pretty_name #> [1] \"Kel (for IV dosing, based on AUClast)\" #>  #> $kel.iv.last$desc #> [1] \"Elimination rate (as calculated from the intravenous MRTlast)\" #>  #> $kel.iv.last$sparse #> [1] FALSE #>  #> $kel.iv.last$formalsmap #> $kel.iv.last$formalsmap$mrt #> [1] \"mrt.iv.last\" #>  #>  #> $kel.iv.last$depends #> [1] \"mrt.iv.last\" #>  #> $kel.iv.last$datatype #> [1] \"interval\" #>  #>  #> $aucinf.obs #> $aucinf.obs$FUN #> [1] \"pk.calc.auc.inf.obs\" #>  #> $aucinf.obs$values #> [1] FALSE  TRUE #>  #> $aucinf.obs$unit_type #> [1] \"auc\" #>  #> $aucinf.obs$pretty_name #> [1] \"AUCinf,obs\" #>  #> $aucinf.obs$desc #> [1] \"The area under the concentration time curve from the beginning of the interval to infinity with extrapolation to infinity from the observed Clast\" #>  #> $aucinf.obs$sparse #> [1] FALSE #>  #> $aucinf.obs$formalsmap #> list() #>  #> $aucinf.obs$depends #> [1] \"lambda.z\"  \"clast.obs\" #>  #> $aucinf.obs$datatype #> [1] \"interval\" #>  #>  #> $aucinf.pred #> $aucinf.pred$FUN #> [1] \"pk.calc.auc.inf.pred\" #>  #> $aucinf.pred$values #> [1] FALSE  TRUE #>  #> $aucinf.pred$unit_type #> [1] \"auc\" #>  #> $aucinf.pred$pretty_name #> [1] \"AUCinf,pred\" #>  #> $aucinf.pred$desc #> [1] \"The area under the concentration time curve from the beginning of the interval to infinity with extrapolation to infinity from the predicted Clast\" #>  #> $aucinf.pred$sparse #> [1] FALSE #>  #> $aucinf.pred$formalsmap #> list() #>  #> $aucinf.pred$depends #> [1] \"lambda.z\"   \"clast.pred\" #>  #> $aucinf.pred$datatype #> [1] \"interval\" #>  #>  #> $aumcinf.obs #> $aumcinf.obs$FUN #> [1] \"pk.calc.aumc.inf.obs\" #>  #> $aumcinf.obs$values #> [1] FALSE  TRUE #>  #> $aumcinf.obs$unit_type #> [1] \"aumc\" #>  #> $aumcinf.obs$pretty_name #> [1] \"AUMC,inf,obs\" #>  #> $aumcinf.obs$desc #> [1] \"The area under the concentration time moment curve from the beginning of the interval to infinity with extrapolation to infinity from the observed Clast\" #>  #> $aumcinf.obs$sparse #> [1] FALSE #>  #> $aumcinf.obs$formalsmap #> list() #>  #> $aumcinf.obs$depends #> [1] \"lambda.z\"  \"clast.obs\" #>  #> $aumcinf.obs$datatype #> [1] \"interval\" #>  #>  #> $aumcinf.pred #> $aumcinf.pred$FUN #> [1] \"pk.calc.aumc.inf.pred\" #>  #> $aumcinf.pred$values #> [1] FALSE  TRUE #>  #> $aumcinf.pred$unit_type #> [1] \"aumc\" #>  #> $aumcinf.pred$pretty_name #> [1] \"AUMC,inf,pred\" #>  #> $aumcinf.pred$desc #> [1] \"The area under the concentration time moment curve from the beginning of the interval to infinity with extrapolation to infinity from the predicted Clast\" #>  #> $aumcinf.pred$sparse #> [1] FALSE #>  #> $aumcinf.pred$formalsmap #> list() #>  #> $aumcinf.pred$depends #> [1] \"lambda.z\"   \"clast.pred\" #>  #> $aumcinf.pred$datatype #> [1] \"interval\" #>  #>  #> $aucint.inf.obs #> $aucint.inf.obs$FUN #> [1] \"pk.calc.aucint.inf.obs\" #>  #> $aucint.inf.obs$values #> [1] FALSE  TRUE #>  #> $aucint.inf.obs$unit_type #> [1] \"auc\" #>  #> $aucint.inf.obs$pretty_name #> [1] \"AUCint (based on AUCinf,obs extrapolation)\" #>  #> $aucint.inf.obs$desc #> [1] \"The area under the concentration time curve in the interval extrapolating from Tlast to infinity with zeros (matching AUClast)\" #>  #> $aucint.inf.obs$sparse #> [1] FALSE #>  #> $aucint.inf.obs$formalsmap #> $aucint.inf.obs$formalsmap$conc #> [1] \"conc.group\" #>  #> $aucint.inf.obs$formalsmap$time #> [1] \"time.group\" #>  #> $aucint.inf.obs$formalsmap$time.dose #> NULL #>  #>  #> $aucint.inf.obs$depends #> [1] \"lambda.z\"  \"clast.obs\" #>  #> $aucint.inf.obs$datatype #> [1] \"interval\" #>  #>  #> $aucint.inf.obs.dose #> $aucint.inf.obs.dose$FUN #> [1] \"pk.calc.aucint.inf.obs\" #>  #> $aucint.inf.obs.dose$values #> [1] FALSE  TRUE #>  #> $aucint.inf.obs.dose$unit_type #> [1] \"auc\" #>  #> $aucint.inf.obs.dose$pretty_name #> [1] \"AUCint (based on AUCinf,obs extrapolation, dose-aware)\" #>  #> $aucint.inf.obs.dose$desc #> [1] \"The area under the concentration time curve in the interval extrapolating from Tlast to infinity with zeros (matching AUClast) with dose-aware interpolation/extrapolation of concentrations\" #>  #> $aucint.inf.obs.dose$sparse #> [1] FALSE #>  #> $aucint.inf.obs.dose$formalsmap #> $aucint.inf.obs.dose$formalsmap$conc #> [1] \"conc.group\" #>  #> $aucint.inf.obs.dose$formalsmap$time #> [1] \"time.group\" #>  #> $aucint.inf.obs.dose$formalsmap$time.dose #> [1] \"time.dose.group\" #>  #>  #> $aucint.inf.obs.dose$depends #> [1] \"lambda.z\"  \"clast.obs\" #>  #> $aucint.inf.obs.dose$datatype #> [1] \"interval\" #>  #>  #> $aucint.inf.pred #> $aucint.inf.pred$FUN #> [1] \"pk.calc.aucint.inf.pred\" #>  #> $aucint.inf.pred$values #> [1] FALSE  TRUE #>  #> $aucint.inf.pred$unit_type #> [1] \"auc\" #>  #> $aucint.inf.pred$pretty_name #> [1] \"AUCint (based on AUCinf,pred extrapolation)\" #>  #> $aucint.inf.pred$desc #> [1] \"The area under the concentration time curve in the interval extrapolating from Tlast to infinity with the triangle from Tlast to the next point and zero thereafter (matching AUCall)\" #>  #> $aucint.inf.pred$sparse #> [1] FALSE #>  #> $aucint.inf.pred$formalsmap #> $aucint.inf.pred$formalsmap$conc #> [1] \"conc.group\" #>  #> $aucint.inf.pred$formalsmap$time #> [1] \"time.group\" #>  #> $aucint.inf.pred$formalsmap$time.dose #> NULL #>  #>  #> $aucint.inf.pred$depends #> [1] \"lambda.z\"   \"clast.pred\" #>  #> $aucint.inf.pred$datatype #> [1] \"interval\" #>  #>  #> $aucint.inf.pred.dose #> $aucint.inf.pred.dose$FUN #> [1] \"pk.calc.aucint.inf.pred\" #>  #> $aucint.inf.pred.dose$values #> [1] FALSE  TRUE #>  #> $aucint.inf.pred.dose$unit_type #> [1] \"auc\" #>  #> $aucint.inf.pred.dose$pretty_name #> [1] \"AUCint (based on AUCinf,pred extrapolation, dose-aware)\" #>  #> $aucint.inf.pred.dose$desc #> [1] \"The area under the concentration time curve in the interval extrapolating from Tlast to infinity with the triangle from Tlast to the next point and zero thereafter (matching AUCall) with dose-aware interpolation/extrapolation of concentrations\" #>  #> $aucint.inf.pred.dose$sparse #> [1] FALSE #>  #> $aucint.inf.pred.dose$formalsmap #> $aucint.inf.pred.dose$formalsmap$conc #> [1] \"conc.group\" #>  #> $aucint.inf.pred.dose$formalsmap$time #> [1] \"time.group\" #>  #> $aucint.inf.pred.dose$formalsmap$time.dose #> [1] \"time.dose.group\" #>  #>  #> $aucint.inf.pred.dose$depends #> [1] \"lambda.z\"   \"clast.pred\" #>  #> $aucint.inf.pred.dose$datatype #> [1] \"interval\" #>  #>  #> $aucivinf.obs #> $aucivinf.obs$FUN #> [1] \"pk.calc.auciv\" #>  #> $aucivinf.obs$values #> [1] FALSE  TRUE #>  #> $aucivinf.obs$unit_type #> [1] \"auc\" #>  #> $aucivinf.obs$pretty_name #> [1] \"AUCinf,obs (IV dosing)\" #>  #> $aucivinf.obs$desc #> [1] \"The AUCinf,obs calculated with back-extrapolation for intravenous dosing using extrapolated C0\" #>  #> $aucivinf.obs$sparse #> [1] FALSE #>  #> $aucivinf.obs$formalsmap #> $aucivinf.obs$formalsmap$auc #> [1] \"aucinf.obs\" #>  #>  #> $aucivinf.obs$depends #> [1] \"aucinf.obs\" \"c0\"         #>  #> $aucivinf.obs$datatype #> [1] \"interval\" #>  #>  #> $aucivinf.pred #> $aucivinf.pred$FUN #> [1] \"pk.calc.auciv\" #>  #> $aucivinf.pred$values #> [1] FALSE  TRUE #>  #> $aucivinf.pred$unit_type #> [1] \"auc\" #>  #> $aucivinf.pred$pretty_name #> [1] \"AUCinf,pred (IV dosing)\" #>  #> $aucivinf.pred$desc #> [1] \"The  calculated with back-extrapolation for intravenous dosing using extrapolated C0\" #>  #> $aucivinf.pred$sparse #> [1] FALSE #>  #> $aucivinf.pred$formalsmap #> $aucivinf.pred$formalsmap$auc #> [1] \"aucinf.pred\" #>  #>  #> $aucivinf.pred$depends #> [1] \"aucinf.pred\" \"c0\"          #>  #> $aucivinf.pred$datatype #> [1] \"interval\" #>  #>  #> $aucivpbextinf.obs #> $aucivpbextinf.obs$FUN #> [1] \"pk.calc.auciv_pbext\" #>  #> $aucivpbextinf.obs$values #> [1] FALSE  TRUE #>  #> $aucivpbextinf.obs$unit_type #> [1] \"%\" #>  #> $aucivpbextinf.obs$pretty_name #> [1] \"AUCbext (based on AUCinf,obs)\" #>  #> $aucivpbextinf.obs$desc #> [1] \"The back-extrapolation percent for intravenous dosing based on AUCinf,obs\" #>  #> $aucivpbextinf.obs$sparse #> [1] FALSE #>  #> $aucivpbextinf.obs$formalsmap #> $aucivpbextinf.obs$formalsmap$auc #> [1] \"aucinf.obs\" #>  #> $aucivpbextinf.obs$formalsmap$auciv #> [1] \"aucivinf.obs\" #>  #>  #> $aucivpbextinf.obs$depends #> [1] \"aucinf.obs\"   \"aucivinf.obs\" #>  #> $aucivpbextinf.obs$datatype #> [1] \"interval\" #>  #>  #> $aucivpbextinf.pred #> $aucivpbextinf.pred$FUN #> [1] \"pk.calc.auciv_pbext\" #>  #> $aucivpbextinf.pred$values #> [1] FALSE  TRUE #>  #> $aucivpbextinf.pred$unit_type #> [1] \"%\" #>  #> $aucivpbextinf.pred$pretty_name #> [1] \"AUCbext (based on AUCinf,pred)\" #>  #> $aucivpbextinf.pred$desc #> [1] \"The back-extrapolation percent for intravenous dosing based on AUCinf,pred\" #>  #> $aucivpbextinf.pred$sparse #> [1] FALSE #>  #> $aucivpbextinf.pred$formalsmap #> $aucivpbextinf.pred$formalsmap$auc #> [1] \"aucinf.pred\" #>  #> $aucivpbextinf.pred$formalsmap$auciv #> [1] \"aucivinf.pred\" #>  #>  #> $aucivpbextinf.pred$depends #> [1] \"aucinf.pred\"   \"aucivinf.pred\" #>  #> $aucivpbextinf.pred$datatype #> [1] \"interval\" #>  #>  #> $aucpext.obs #> $aucpext.obs$FUN #> [1] \"pk.calc.aucpext\" #>  #> $aucpext.obs$values #> [1] FALSE  TRUE #>  #> $aucpext.obs$unit_type #> [1] \"%\" #>  #> $aucpext.obs$pretty_name #> [1] \"AUCpext (based on AUCinf,obs)\" #>  #> $aucpext.obs$desc #> [1] \"Percent of the AUCinf that is extrapolated after Tlast calculated from the observed Clast\" #>  #> $aucpext.obs$sparse #> [1] FALSE #>  #> $aucpext.obs$formalsmap #> $aucpext.obs$formalsmap$aucinf #> [1] \"aucinf.obs\" #>  #>  #> $aucpext.obs$depends #> [1] \"auclast\"    \"aucinf.obs\" #>  #> $aucpext.obs$datatype #> [1] \"interval\" #>  #>  #> $aucpext.pred #> $aucpext.pred$FUN #> [1] \"pk.calc.aucpext\" #>  #> $aucpext.pred$values #> [1] FALSE  TRUE #>  #> $aucpext.pred$unit_type #> [1] \"%\" #>  #> $aucpext.pred$pretty_name #> [1] \"AUCpext (based on AUCinf,pred)\" #>  #> $aucpext.pred$desc #> [1] \"Percent of the AUCinf that is extrapolated after Tlast calculated from the predicted Clast\" #>  #> $aucpext.pred$sparse #> [1] FALSE #>  #> $aucpext.pred$formalsmap #> $aucpext.pred$formalsmap$aucinf #> [1] \"aucinf.pred\" #>  #>  #> $aucpext.pred$depends #> [1] \"auclast\"     \"aucinf.pred\" #>  #> $aucpext.pred$datatype #> [1] \"interval\" #>  #>  #> $cl.obs #> $cl.obs$FUN #> [1] \"pk.calc.cl\" #>  #> $cl.obs$values #> [1] FALSE  TRUE #>  #> $cl.obs$unit_type #> [1] \"clearance\" #>  #> $cl.obs$pretty_name #> [1] \"CL (based on AUCinf,obs)\" #>  #> $cl.obs$desc #> [1] \"Clearance or observed oral clearance calculated with observed Clast\" #>  #> $cl.obs$sparse #> [1] FALSE #>  #> $cl.obs$formalsmap #> $cl.obs$formalsmap$auc #> [1] \"aucinf.obs\" #>  #>  #> $cl.obs$depends #> [1] \"aucinf.obs\" #>  #> $cl.obs$datatype #> [1] \"interval\" #>  #>  #> $cl.pred #> $cl.pred$FUN #> [1] \"pk.calc.cl\" #>  #> $cl.pred$values #> [1] FALSE  TRUE #>  #> $cl.pred$unit_type #> [1] \"clearance\" #>  #> $cl.pred$pretty_name #> [1] \"CL (based on AUCinf,pred)\" #>  #> $cl.pred$desc #> [1] \"Clearance or observed oral clearance calculated with predicted Clast\" #>  #> $cl.pred$sparse #> [1] FALSE #>  #> $cl.pred$formalsmap #> $cl.pred$formalsmap$auc #> [1] \"aucinf.pred\" #>  #>  #> $cl.pred$depends #> [1] \"aucinf.pred\" #>  #> $cl.pred$datatype #> [1] \"interval\" #>  #>  #> $mrt.obs #> $mrt.obs$FUN #> [1] \"pk.calc.mrt\" #>  #> $mrt.obs$values #> [1] FALSE  TRUE #>  #> $mrt.obs$unit_type #> [1] \"time\" #>  #> $mrt.obs$pretty_name #> [1] \"MRT (based on AUCinf,obs)\" #>  #> $mrt.obs$desc #> [1] \"The mean residence time to infinity using observed Clast\" #>  #> $mrt.obs$sparse #> [1] FALSE #>  #> $mrt.obs$formalsmap #> $mrt.obs$formalsmap$auc #> [1] \"aucinf.obs\" #>  #> $mrt.obs$formalsmap$aumc #> [1] \"aumcinf.obs\" #>  #>  #> $mrt.obs$depends #> [1] \"aucinf.obs\"  \"aumcinf.obs\" #>  #> $mrt.obs$datatype #> [1] \"interval\" #>  #>  #> $mrt.pred #> $mrt.pred$FUN #> [1] \"pk.calc.mrt\" #>  #> $mrt.pred$values #> [1] FALSE  TRUE #>  #> $mrt.pred$unit_type #> [1] \"time\" #>  #> $mrt.pred$pretty_name #> [1] \"MRT (based on AUCinf,pred)\" #>  #> $mrt.pred$desc #> [1] \"The mean residence time to infinity using predicted Clast\" #>  #> $mrt.pred$sparse #> [1] FALSE #>  #> $mrt.pred$formalsmap #> $mrt.pred$formalsmap$auc #> [1] \"aucinf.pred\" #>  #> $mrt.pred$formalsmap$aumc #> [1] \"aumcinf.pred\" #>  #>  #> $mrt.pred$depends #> [1] \"aucinf.pred\"  \"aumcinf.pred\" #>  #> $mrt.pred$datatype #> [1] \"interval\" #>  #>  #> $mrt.iv.obs #> $mrt.iv.obs$FUN #> [1] \"pk.calc.mrt.iv\" #>  #> $mrt.iv.obs$values #> [1] FALSE  TRUE #>  #> $mrt.iv.obs$unit_type #> [1] \"time\" #>  #> $mrt.iv.obs$pretty_name #> [1] \"MRT (for IV dosing, based on AUCinf,obs)\" #>  #> $mrt.iv.obs$desc #> [1] \"The mean residence time to infinity using observed Clast correcting for dosing duration\" #>  #> $mrt.iv.obs$sparse #> [1] FALSE #>  #> $mrt.iv.obs$formalsmap #> $mrt.iv.obs$formalsmap$auc #> [1] \"aucinf.obs\" #>  #> $mrt.iv.obs$formalsmap$aumc #> [1] \"aumcinf.obs\" #>  #>  #> $mrt.iv.obs$depends #> [1] \"aucinf.obs\"  \"aumcinf.obs\" #>  #> $mrt.iv.obs$datatype #> [1] \"interval\" #>  #>  #> $mrt.iv.pred #> $mrt.iv.pred$FUN #> [1] \"pk.calc.mrt.iv\" #>  #> $mrt.iv.pred$values #> [1] FALSE  TRUE #>  #> $mrt.iv.pred$unit_type #> [1] \"time\" #>  #> $mrt.iv.pred$pretty_name #> [1] \"MRT (for IV dosing, based on AUCinf,pred)\" #>  #> $mrt.iv.pred$desc #> [1] \"The mean residence time to infinity using predicted Clast correcting for dosing duration\" #>  #> $mrt.iv.pred$sparse #> [1] FALSE #>  #> $mrt.iv.pred$formalsmap #> $mrt.iv.pred$formalsmap$auc #> [1] \"aucinf.pred\" #>  #> $mrt.iv.pred$formalsmap$aumc #> [1] \"aumcinf.pred\" #>  #>  #> $mrt.iv.pred$depends #> [1] \"aucinf.pred\"  \"aumcinf.pred\" #>  #> $mrt.iv.pred$datatype #> [1] \"interval\" #>  #>  #> $mrt.md.obs #> $mrt.md.obs$FUN #> [1] \"pk.calc.mrt.md\" #>  #> $mrt.md.obs$values #> [1] FALSE  TRUE #>  #> $mrt.md.obs$unit_type #> [1] \"time\" #>  #> $mrt.md.obs$pretty_name #> [1] \"MRT (for multiple dosing, based on AUCinf,obs)\" #>  #> $mrt.md.obs$desc #> [1] \"The mean residence time with multiple dosing and nonlinear kinetics using observed Clast\" #>  #> $mrt.md.obs$sparse #> [1] FALSE #>  #> $mrt.md.obs$formalsmap #> $mrt.md.obs$formalsmap$auctau #> [1] \"auclast\" #>  #> $mrt.md.obs$formalsmap$aumctau #> [1] \"aumclast\" #>  #> $mrt.md.obs$formalsmap$aucinf #> [1] \"aucinf.obs\" #>  #>  #> $mrt.md.obs$depends #> [1] \"auclast\"    \"aumclast\"   \"aucinf.obs\" #>  #> $mrt.md.obs$datatype #> [1] \"interval\" #>  #>  #> $mrt.md.pred #> $mrt.md.pred$FUN #> [1] \"pk.calc.mrt.md\" #>  #> $mrt.md.pred$values #> [1] FALSE  TRUE #>  #> $mrt.md.pred$unit_type #> [1] \"time\" #>  #> $mrt.md.pred$pretty_name #> [1] \"MRT (for multiple dosing, based on AUCinf,pred)\" #>  #> $mrt.md.pred$desc #> [1] \"The mean residence time with multiple dosing and nonlinear kinetics using predicted Clast\" #>  #> $mrt.md.pred$sparse #> [1] FALSE #>  #> $mrt.md.pred$formalsmap #> $mrt.md.pred$formalsmap$auctau #> [1] \"auclast\" #>  #> $mrt.md.pred$formalsmap$aumctau #> [1] \"aumclast\" #>  #> $mrt.md.pred$formalsmap$aucinf #> [1] \"aucinf.pred\" #>  #>  #> $mrt.md.pred$depends #> [1] \"auclast\"     \"aumclast\"    \"aucinf.pred\" #>  #> $mrt.md.pred$datatype #> [1] \"interval\" #>  #>  #> $vz.obs #> $vz.obs$FUN #> [1] \"pk.calc.vz\" #>  #> $vz.obs$values #> [1] FALSE  TRUE #>  #> $vz.obs$unit_type #> [1] \"volume\" #>  #> $vz.obs$pretty_name #> [1] \"Vz (based on AUCinf,obs)\" #>  #> $vz.obs$desc #> [1] \"The terminal volume of distribution using observed Clast\" #>  #> $vz.obs$sparse #> [1] FALSE #>  #> $vz.obs$formalsmap #> $vz.obs$formalsmap$cl #> [1] \"cl.obs\" #>  #>  #> $vz.obs$depends #> [1] \"cl.obs\"   \"lambda.z\" #>  #> $vz.obs$datatype #> [1] \"interval\" #>  #>  #> $vz.pred #> $vz.pred$FUN #> [1] \"pk.calc.vz\" #>  #> $vz.pred$values #> [1] FALSE  TRUE #>  #> $vz.pred$unit_type #> [1] \"volume\" #>  #> $vz.pred$pretty_name #> [1] \"Vz (based on AUCinf,pred)\" #>  #> $vz.pred$desc #> [1] \"The terminal volume of distribution using predicted Clast\" #>  #> $vz.pred$sparse #> [1] FALSE #>  #> $vz.pred$formalsmap #> $vz.pred$formalsmap$cl #> [1] \"cl.pred\" #>  #>  #> $vz.pred$depends #> [1] \"cl.pred\"  \"lambda.z\" #>  #> $vz.pred$datatype #> [1] \"interval\" #>  #>  #> $vss.obs #> $vss.obs$FUN #> [1] \"pk.calc.vss\" #>  #> $vss.obs$values #> [1] FALSE  TRUE #>  #> $vss.obs$unit_type #> [1] \"volume\" #>  #> $vss.obs$pretty_name #> [1] \"Vss (based on AUCinf,obs)\" #>  #> $vss.obs$desc #> [1] \"The steady-state volume of distribution using observed Clast\" #>  #> $vss.obs$sparse #> [1] FALSE #>  #> $vss.obs$formalsmap #> $vss.obs$formalsmap$cl #> [1] \"cl.obs\" #>  #> $vss.obs$formalsmap$mrt #> [1] \"mrt.obs\" #>  #>  #> $vss.obs$depends #> [1] \"cl.obs\"  \"mrt.obs\" #>  #> $vss.obs$datatype #> [1] \"interval\" #>  #>  #> $vss.pred #> $vss.pred$FUN #> [1] \"pk.calc.vss\" #>  #> $vss.pred$values #> [1] FALSE  TRUE #>  #> $vss.pred$unit_type #> [1] \"volume\" #>  #> $vss.pred$pretty_name #> [1] \"Vss (based on AUCinf,pred)\" #>  #> $vss.pred$desc #> [1] \"The steady-state volume of distribution using predicted Clast\" #>  #> $vss.pred$sparse #> [1] FALSE #>  #> $vss.pred$formalsmap #> $vss.pred$formalsmap$cl #> [1] \"cl.pred\" #>  #> $vss.pred$formalsmap$mrt #> [1] \"mrt.pred\" #>  #>  #> $vss.pred$depends #> [1] \"cl.pred\"  \"mrt.pred\" #>  #> $vss.pred$datatype #> [1] \"interval\" #>  #>  #> $vss.iv.obs #> $vss.iv.obs$FUN #> [1] \"pk.calc.vss\" #>  #> $vss.iv.obs$values #> [1] FALSE  TRUE #>  #> $vss.iv.obs$unit_type #> [1] \"volume\" #>  #> $vss.iv.obs$pretty_name #> [1] \"Vss (for IV dosing, based on AUCinf,obs)\" #>  #> $vss.iv.obs$desc #> [1] \"The steady-state volume of distribution with intravenous infusion using observed Clast\" #>  #> $vss.iv.obs$sparse #> [1] FALSE #>  #> $vss.iv.obs$formalsmap #> $vss.iv.obs$formalsmap$cl #> [1] \"cl.obs\" #>  #> $vss.iv.obs$formalsmap$mrt #> [1] \"mrt.iv.obs\" #>  #>  #> $vss.iv.obs$depends #> [1] \"cl.obs\"     \"mrt.iv.obs\" #>  #> $vss.iv.obs$datatype #> [1] \"interval\" #>  #>  #> $vss.iv.pred #> $vss.iv.pred$FUN #> [1] \"pk.calc.vss\" #>  #> $vss.iv.pred$values #> [1] FALSE  TRUE #>  #> $vss.iv.pred$unit_type #> [1] \"volume\" #>  #> $vss.iv.pred$pretty_name #> [1] \"Vss (for IV dosing, based on AUCinf,pred)\" #>  #> $vss.iv.pred$desc #> [1] \"The steady-state volume of distribution with intravenous infusion using predicted Clast\" #>  #> $vss.iv.pred$sparse #> [1] FALSE #>  #> $vss.iv.pred$formalsmap #> $vss.iv.pred$formalsmap$cl #> [1] \"cl.pred\" #>  #> $vss.iv.pred$formalsmap$mrt #> [1] \"mrt.iv.pred\" #>  #>  #> $vss.iv.pred$depends #> [1] \"cl.pred\"     \"mrt.iv.pred\" #>  #> $vss.iv.pred$datatype #> [1] \"interval\" #>  #>  #> $vss.md.obs #> $vss.md.obs$FUN #> [1] \"pk.calc.vss\" #>  #> $vss.md.obs$values #> [1] FALSE  TRUE #>  #> $vss.md.obs$unit_type #> [1] \"volume\" #>  #> $vss.md.obs$pretty_name #> [1] \"Vss (for multiple-dose, based on Clast,obs)\" #>  #> $vss.md.obs$desc #> [1] \"The steady-state volume of distribution for nonlinear multiple-dose data using observed Clast\" #>  #> $vss.md.obs$sparse #> [1] FALSE #>  #> $vss.md.obs$formalsmap #> $vss.md.obs$formalsmap$cl #> [1] \"cl.last\" #>  #> $vss.md.obs$formalsmap$mrt #> [1] \"mrt.md.obs\" #>  #>  #> $vss.md.obs$depends #> [1] \"cl.last\"    \"mrt.md.obs\" #>  #> $vss.md.obs$datatype #> [1] \"interval\" #>  #>  #> $vss.md.pred #> $vss.md.pred$FUN #> [1] \"pk.calc.vss\" #>  #> $vss.md.pred$values #> [1] FALSE  TRUE #>  #> $vss.md.pred$unit_type #> [1] \"volume\" #>  #> $vss.md.pred$pretty_name #> [1] \"Vss (for multiple-dose, based on Clast,pred)\" #>  #> $vss.md.pred$desc #> [1] \"The steady-state volume of distribution for nonlinear multiple-dose data using predicted Clast\" #>  #> $vss.md.pred$sparse #> [1] FALSE #>  #> $vss.md.pred$formalsmap #> $vss.md.pred$formalsmap$cl #> [1] \"cl.last\" #>  #> $vss.md.pred$formalsmap$mrt #> [1] \"mrt.md.pred\" #>  #>  #> $vss.md.pred$depends #> [1] \"cl.last\"     \"mrt.md.pred\" #>  #> $vss.md.pred$datatype #> [1] \"interval\" #>  #>  #> $cav.int.inf.obs #> $cav.int.inf.obs$FUN #> [1] \"pk.calc.cav\" #>  #> $cav.int.inf.obs$values #> [1] FALSE  TRUE #>  #> $cav.int.inf.obs$unit_type #> [1] \"conc\" #>  #> $cav.int.inf.obs$pretty_name #> [1] \"Cav\" #>  #> $cav.int.inf.obs$desc #> [1] \"The average concentration during an interval (calculated with AUCint.inf.obs)\" #>  #> $cav.int.inf.obs$sparse #> [1] FALSE #>  #> $cav.int.inf.obs$formalsmap #> $cav.int.inf.obs$formalsmap$auc #> [1] \"aucint.inf.obs\" #>  #>  #> $cav.int.inf.obs$depends #> [1] \"aucint.inf.obs\" #>  #> $cav.int.inf.obs$datatype #> [1] \"interval\" #>  #>  #> $cav.int.inf.pred #> $cav.int.inf.pred$FUN #> [1] \"pk.calc.cav\" #>  #> $cav.int.inf.pred$values #> [1] FALSE  TRUE #>  #> $cav.int.inf.pred$unit_type #> [1] \"conc\" #>  #> $cav.int.inf.pred$pretty_name #> [1] \"Cav\" #>  #> $cav.int.inf.pred$desc #> [1] \"The average concentration during an interval (calculated with AUCint.inf.pred)\" #>  #> $cav.int.inf.pred$sparse #> [1] FALSE #>  #> $cav.int.inf.pred$formalsmap #> $cav.int.inf.pred$formalsmap$auc #> [1] \"aucint.inf.pred\" #>  #>  #> $cav.int.inf.pred$depends #> [1] \"aucint.inf.pred\" #>  #> $cav.int.inf.pred$datatype #> [1] \"interval\" #>  #>  #> $thalf.eff.obs #> $thalf.eff.obs$FUN #> [1] \"pk.calc.thalf.eff\" #>  #> $thalf.eff.obs$values #> [1] FALSE  TRUE #>  #> $thalf.eff.obs$unit_type #> [1] \"time\" #>  #> $thalf.eff.obs$pretty_name #> [1] \"Effective half-life (based on MRT,obs)\" #>  #> $thalf.eff.obs$desc #> [1] \"The effective half-life (as determined from the MRTobs)\" #>  #> $thalf.eff.obs$sparse #> [1] FALSE #>  #> $thalf.eff.obs$formalsmap #> $thalf.eff.obs$formalsmap$mrt #> [1] \"mrt.obs\" #>  #>  #> $thalf.eff.obs$depends #> [1] \"mrt.obs\" #>  #> $thalf.eff.obs$datatype #> [1] \"interval\" #>  #>  #> $thalf.eff.pred #> $thalf.eff.pred$FUN #> [1] \"pk.calc.thalf.eff\" #>  #> $thalf.eff.pred$values #> [1] FALSE  TRUE #>  #> $thalf.eff.pred$unit_type #> [1] \"time\" #>  #> $thalf.eff.pred$pretty_name #> [1] \"Effective half-life (based on MRT,pred)\" #>  #> $thalf.eff.pred$desc #> [1] \"The effective half-life (as determined from the MRTpred)\" #>  #> $thalf.eff.pred$sparse #> [1] FALSE #>  #> $thalf.eff.pred$formalsmap #> $thalf.eff.pred$formalsmap$mrt #> [1] \"mrt.pred\" #>  #>  #> $thalf.eff.pred$depends #> [1] \"mrt.pred\" #>  #> $thalf.eff.pred$datatype #> [1] \"interval\" #>  #>  #> $thalf.eff.iv.obs #> $thalf.eff.iv.obs$FUN #> [1] \"pk.calc.thalf.eff\" #>  #> $thalf.eff.iv.obs$values #> [1] FALSE  TRUE #>  #> $thalf.eff.iv.obs$unit_type #> [1] \"time\" #>  #> $thalf.eff.iv.obs$pretty_name #> [1] \"Effective half-life (for IV dosing, based on MRT,obs)\" #>  #> $thalf.eff.iv.obs$desc #> [1] \"The effective half-life (as determined from the intravenous MRTobs)\" #>  #> $thalf.eff.iv.obs$sparse #> [1] FALSE #>  #> $thalf.eff.iv.obs$formalsmap #> $thalf.eff.iv.obs$formalsmap$mrt #> [1] \"mrt.iv.obs\" #>  #>  #> $thalf.eff.iv.obs$depends #> [1] \"mrt.iv.obs\" #>  #> $thalf.eff.iv.obs$datatype #> [1] \"interval\" #>  #>  #> $thalf.eff.iv.pred #> $thalf.eff.iv.pred$FUN #> [1] \"pk.calc.thalf.eff\" #>  #> $thalf.eff.iv.pred$values #> [1] FALSE  TRUE #>  #> $thalf.eff.iv.pred$unit_type #> [1] \"time\" #>  #> $thalf.eff.iv.pred$pretty_name #> [1] \"Effective half-life (for IV dosing, based on MRT,pred)\" #>  #> $thalf.eff.iv.pred$desc #> [1] \"The effective half-life (as determined from the intravenous MRTpred)\" #>  #> $thalf.eff.iv.pred$sparse #> [1] FALSE #>  #> $thalf.eff.iv.pred$formalsmap #> $thalf.eff.iv.pred$formalsmap$mrt #> [1] \"mrt.iv.pred\" #>  #>  #> $thalf.eff.iv.pred$depends #> [1] \"mrt.iv.pred\" #>  #> $thalf.eff.iv.pred$datatype #> [1] \"interval\" #>  #>  #> $kel.obs #> $kel.obs$FUN #> [1] \"pk.calc.kel\" #>  #> $kel.obs$values #> [1] FALSE  TRUE #>  #> $kel.obs$unit_type #> [1] \"inverse_time\" #>  #> $kel.obs$pretty_name #> [1] \"Kel (based on AUCinf,obs)\" #>  #> $kel.obs$desc #> [1] \"Elimination rate (as calculated from the MRT with observed Clast)\" #>  #> $kel.obs$sparse #> [1] FALSE #>  #> $kel.obs$formalsmap #> $kel.obs$formalsmap$mrt #> [1] \"mrt.obs\" #>  #>  #> $kel.obs$depends #> [1] \"mrt.obs\" #>  #> $kel.obs$datatype #> [1] \"interval\" #>  #>  #> $kel.pred #> $kel.pred$FUN #> [1] \"pk.calc.kel\" #>  #> $kel.pred$values #> [1] FALSE  TRUE #>  #> $kel.pred$unit_type #> [1] \"inverse_time\" #>  #> $kel.pred$pretty_name #> [1] \"Kel (based on AUCinf,pred)\" #>  #> $kel.pred$desc #> [1] \"Elimination rate (as calculated from the MRT with predicted Clast)\" #>  #> $kel.pred$sparse #> [1] FALSE #>  #> $kel.pred$formalsmap #> $kel.pred$formalsmap$mrt #> [1] \"mrt.pred\" #>  #>  #> $kel.pred$depends #> [1] \"mrt.pred\" #>  #> $kel.pred$datatype #> [1] \"interval\" #>  #>  #> $kel.iv.obs #> $kel.iv.obs$FUN #> [1] \"pk.calc.kel\" #>  #> $kel.iv.obs$values #> [1] FALSE  TRUE #>  #> $kel.iv.obs$unit_type #> [1] \"inverse_time\" #>  #> $kel.iv.obs$pretty_name #> [1] \"Kel (for IV dosing, based on AUCinf,obs)\" #>  #> $kel.iv.obs$desc #> [1] \"Elimination rate (as calculated from the intravenous MRTobs)\" #>  #> $kel.iv.obs$sparse #> [1] FALSE #>  #> $kel.iv.obs$formalsmap #> $kel.iv.obs$formalsmap$mrt #> [1] \"mrt.iv.obs\" #>  #>  #> $kel.iv.obs$depends #> [1] \"mrt.iv.obs\" #>  #> $kel.iv.obs$datatype #> [1] \"interval\" #>  #>  #> $kel.iv.pred #> $kel.iv.pred$FUN #> [1] \"pk.calc.kel\" #>  #> $kel.iv.pred$values #> [1] FALSE  TRUE #>  #> $kel.iv.pred$unit_type #> [1] \"inverse_time\" #>  #> $kel.iv.pred$pretty_name #> [1] \"Kel (for IV dosing, based on AUCinf,pred)\" #>  #> $kel.iv.pred$desc #> [1] \"Elimination rate (as calculated from the intravenous MRTpred)\" #>  #> $kel.iv.pred$sparse #> [1] FALSE #>  #> $kel.iv.pred$formalsmap #> $kel.iv.pred$formalsmap$mrt #> [1] \"mrt.iv.pred\" #>  #>  #> $kel.iv.pred$depends #> [1] \"mrt.iv.pred\" #>  #> $kel.iv.pred$datatype #> [1] \"interval\" #>  #>  #> $auclast.dn #> $auclast.dn$FUN #> [1] \"pk.calc.dn\" #>  #> $auclast.dn$values #> [1] FALSE  TRUE #>  #> $auclast.dn$unit_type #> [1] \"auc_dosenorm\" #>  #> $auclast.dn$pretty_name #> [1] \"AUClast (dose-normalized)\" #>  #> $auclast.dn$desc #> [1] \"Dose normalized auclast\" #>  #> $auclast.dn$sparse #> [1] FALSE #>  #> $auclast.dn$formalsmap #> $auclast.dn$formalsmap$parameter #> [1] \"auclast\" #>  #>  #> $auclast.dn$depends #> [1] \"auclast\" #>  #> $auclast.dn$datatype #> [1] \"interval\" #>  #>  #> $aucall.dn #> $aucall.dn$FUN #> [1] \"pk.calc.dn\" #>  #> $aucall.dn$values #> [1] FALSE  TRUE #>  #> $aucall.dn$unit_type #> [1] \"auc_dosenorm\" #>  #> $aucall.dn$pretty_name #> [1] \"AUCall (dose-normalized)\" #>  #> $aucall.dn$desc #> [1] \"Dose normalized aucall\" #>  #> $aucall.dn$sparse #> [1] FALSE #>  #> $aucall.dn$formalsmap #> $aucall.dn$formalsmap$parameter #> [1] \"aucall\" #>  #>  #> $aucall.dn$depends #> [1] \"aucall\" #>  #> $aucall.dn$datatype #> [1] \"interval\" #>  #>  #> $aucinf.obs.dn #> $aucinf.obs.dn$FUN #> [1] \"pk.calc.dn\" #>  #> $aucinf.obs.dn$values #> [1] FALSE  TRUE #>  #> $aucinf.obs.dn$unit_type #> [1] \"auc_dosenorm\" #>  #> $aucinf.obs.dn$pretty_name #> [1] \"AUCinf,obs (dose-normalized)\" #>  #> $aucinf.obs.dn$desc #> [1] \"Dose normalized aucinf.obs\" #>  #> $aucinf.obs.dn$sparse #> [1] FALSE #>  #> $aucinf.obs.dn$formalsmap #> $aucinf.obs.dn$formalsmap$parameter #> [1] \"aucinf.obs\" #>  #>  #> $aucinf.obs.dn$depends #> [1] \"aucinf.obs\" #>  #> $aucinf.obs.dn$datatype #> [1] \"interval\" #>  #>  #> $aucinf.pred.dn #> $aucinf.pred.dn$FUN #> [1] \"pk.calc.dn\" #>  #> $aucinf.pred.dn$values #> [1] FALSE  TRUE #>  #> $aucinf.pred.dn$unit_type #> [1] \"auc_dosenorm\" #>  #> $aucinf.pred.dn$pretty_name #> [1] \"AUCinf,pred (dose-normalized)\" #>  #> $aucinf.pred.dn$desc #> [1] \"Dose normalized aucinf.pred\" #>  #> $aucinf.pred.dn$sparse #> [1] FALSE #>  #> $aucinf.pred.dn$formalsmap #> $aucinf.pred.dn$formalsmap$parameter #> [1] \"aucinf.pred\" #>  #>  #> $aucinf.pred.dn$depends #> [1] \"aucinf.pred\" #>  #> $aucinf.pred.dn$datatype #> [1] \"interval\" #>  #>  #> $aumclast.dn #> $aumclast.dn$FUN #> [1] \"pk.calc.dn\" #>  #> $aumclast.dn$values #> [1] FALSE  TRUE #>  #> $aumclast.dn$unit_type #> [1] \"aumc_dosenorm\" #>  #> $aumclast.dn$pretty_name #> [1] \"AUMC,last (dose-normalized)\" #>  #> $aumclast.dn$desc #> [1] \"Dose normalized aumclast\" #>  #> $aumclast.dn$sparse #> [1] FALSE #>  #> $aumclast.dn$formalsmap #> $aumclast.dn$formalsmap$parameter #> [1] \"aumclast\" #>  #>  #> $aumclast.dn$depends #> [1] \"aumclast\" #>  #> $aumclast.dn$datatype #> [1] \"interval\" #>  #>  #> $aumcall.dn #> $aumcall.dn$FUN #> [1] \"pk.calc.dn\" #>  #> $aumcall.dn$values #> [1] FALSE  TRUE #>  #> $aumcall.dn$unit_type #> [1] \"aumc_dosenorm\" #>  #> $aumcall.dn$pretty_name #> [1] \"AUMC,all (dose-normalized)\" #>  #> $aumcall.dn$desc #> [1] \"Dose normalized aumcall\" #>  #> $aumcall.dn$sparse #> [1] FALSE #>  #> $aumcall.dn$formalsmap #> $aumcall.dn$formalsmap$parameter #> [1] \"aumcall\" #>  #>  #> $aumcall.dn$depends #> [1] \"aumcall\" #>  #> $aumcall.dn$datatype #> [1] \"interval\" #>  #>  #> $aumcinf.obs.dn #> $aumcinf.obs.dn$FUN #> [1] \"pk.calc.dn\" #>  #> $aumcinf.obs.dn$values #> [1] FALSE  TRUE #>  #> $aumcinf.obs.dn$unit_type #> [1] \"aumc_dosenorm\" #>  #> $aumcinf.obs.dn$pretty_name #> [1] \"AUMC,inf,obs (dose-normalized)\" #>  #> $aumcinf.obs.dn$desc #> [1] \"Dose normalized aumcinf.obs\" #>  #> $aumcinf.obs.dn$sparse #> [1] FALSE #>  #> $aumcinf.obs.dn$formalsmap #> $aumcinf.obs.dn$formalsmap$parameter #> [1] \"aumcinf.obs\" #>  #>  #> $aumcinf.obs.dn$depends #> [1] \"aumcinf.obs\" #>  #> $aumcinf.obs.dn$datatype #> [1] \"interval\" #>  #>  #> $aumcinf.pred.dn #> $aumcinf.pred.dn$FUN #> [1] \"pk.calc.dn\" #>  #> $aumcinf.pred.dn$values #> [1] FALSE  TRUE #>  #> $aumcinf.pred.dn$unit_type #> [1] \"aumc_dosenorm\" #>  #> $aumcinf.pred.dn$pretty_name #> [1] \"AUMC,inf,pred (dose-normalized)\" #>  #> $aumcinf.pred.dn$desc #> [1] \"Dose normalized aumcinf.pred\" #>  #> $aumcinf.pred.dn$sparse #> [1] FALSE #>  #> $aumcinf.pred.dn$formalsmap #> $aumcinf.pred.dn$formalsmap$parameter #> [1] \"aumcinf.pred\" #>  #>  #> $aumcinf.pred.dn$depends #> [1] \"aumcinf.pred\" #>  #> $aumcinf.pred.dn$datatype #> [1] \"interval\" #>  #>  #> $cmax.dn #> $cmax.dn$FUN #> [1] \"pk.calc.dn\" #>  #> $cmax.dn$values #> [1] FALSE  TRUE #>  #> $cmax.dn$unit_type #> [1] \"conc_dosenorm\" #>  #> $cmax.dn$pretty_name #> [1] \"Cmax (dose-normalized)\" #>  #> $cmax.dn$desc #> [1] \"Dose normalized cmax\" #>  #> $cmax.dn$sparse #> [1] FALSE #>  #> $cmax.dn$formalsmap #> $cmax.dn$formalsmap$parameter #> [1] \"cmax\" #>  #>  #> $cmax.dn$depends #> [1] \"cmax\" #>  #> $cmax.dn$datatype #> [1] \"interval\" #>  #>  #> $cmin.dn #> $cmin.dn$FUN #> [1] \"pk.calc.dn\" #>  #> $cmin.dn$values #> [1] FALSE  TRUE #>  #> $cmin.dn$unit_type #> [1] \"conc_dosenorm\" #>  #> $cmin.dn$pretty_name #> [1] \"Cmin (dose-normalized)\" #>  #> $cmin.dn$desc #> [1] \"Dose normalized cmin\" #>  #> $cmin.dn$sparse #> [1] FALSE #>  #> $cmin.dn$formalsmap #> $cmin.dn$formalsmap$parameter #> [1] \"cmin\" #>  #>  #> $cmin.dn$depends #> [1] \"cmin\" #>  #> $cmin.dn$datatype #> [1] \"interval\" #>  #>  #> $clast.obs.dn #> $clast.obs.dn$FUN #> [1] \"pk.calc.dn\" #>  #> $clast.obs.dn$values #> [1] FALSE  TRUE #>  #> $clast.obs.dn$unit_type #> [1] \"conc_dosenorm\" #>  #> $clast.obs.dn$pretty_name #> [1] \"Clast (dose-normalized)\" #>  #> $clast.obs.dn$desc #> [1] \"Dose normalized clast.obs\" #>  #> $clast.obs.dn$sparse #> [1] FALSE #>  #> $clast.obs.dn$formalsmap #> $clast.obs.dn$formalsmap$parameter #> [1] \"clast.obs\" #>  #>  #> $clast.obs.dn$depends #> [1] \"clast.obs\" #>  #> $clast.obs.dn$datatype #> [1] \"interval\" #>  #>  #> $clast.pred.dn #> $clast.pred.dn$FUN #> [1] \"pk.calc.dn\" #>  #> $clast.pred.dn$values #> [1] FALSE  TRUE #>  #> $clast.pred.dn$unit_type #> [1] \"conc_dosenorm\" #>  #> $clast.pred.dn$pretty_name #> [1] \"Clast,pred (dose-normalized)\" #>  #> $clast.pred.dn$desc #> [1] \"Dose normalized clast.pred\" #>  #> $clast.pred.dn$sparse #> [1] FALSE #>  #> $clast.pred.dn$formalsmap #> $clast.pred.dn$formalsmap$parameter #> [1] \"clast.pred\" #>  #>  #> $clast.pred.dn$depends #> [1] \"clast.pred\" #>  #> $clast.pred.dn$datatype #> [1] \"interval\" #>  #>  #> $cav.dn #> $cav.dn$FUN #> [1] \"pk.calc.dn\" #>  #> $cav.dn$values #> [1] FALSE  TRUE #>  #> $cav.dn$unit_type #> [1] \"conc_dosenorm\" #>  #> $cav.dn$pretty_name #> [1] \"Cav (dose-normalized)\" #>  #> $cav.dn$desc #> [1] \"Dose normalized cav\" #>  #> $cav.dn$sparse #> [1] FALSE #>  #> $cav.dn$formalsmap #> $cav.dn$formalsmap$parameter #> [1] \"cav\" #>  #>  #> $cav.dn$depends #> [1] \"cav\" #>  #> $cav.dn$datatype #> [1] \"interval\" #>  #>  #> $ctrough.dn #> $ctrough.dn$FUN #> [1] \"pk.calc.dn\" #>  #> $ctrough.dn$values #> [1] FALSE  TRUE #>  #> $ctrough.dn$unit_type #> [1] \"conc_dosenorm\" #>  #> $ctrough.dn$pretty_name #> [1] \"Ctrough (dose-normalized)\" #>  #> $ctrough.dn$desc #> [1] \"Dose normalized ctrough\" #>  #> $ctrough.dn$sparse #> [1] FALSE #>  #> $ctrough.dn$formalsmap #> $ctrough.dn$formalsmap$parameter #> [1] \"ctrough\" #>  #>  #> $ctrough.dn$depends #> [1] \"ctrough\" #>  #> $ctrough.dn$datatype #> [1] \"interval\" #>  #>"},{"path":"http://billdenney.github.io/pknca/reference/get.parameter.deps.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all columns that depend on a parameter — get.parameter.deps","title":"Get all columns that depend on a parameter — get.parameter.deps","text":"Get columns depend parameter","code":""},{"path":"http://billdenney.github.io/pknca/reference/get.parameter.deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all columns that depend on a parameter — get.parameter.deps","text":"","code":"get.parameter.deps(x)"},{"path":"http://billdenney.github.io/pknca/reference/get.parameter.deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all columns that depend on a parameter — get.parameter.deps","text":"x parameter name (character string)","code":""},{"path":"http://billdenney.github.io/pknca/reference/get.parameter.deps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all columns that depend on a parameter — get.parameter.deps","text":"character vector parameter names depend parameter x.  none depend x, result empty vector.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/getAttributeColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the value of an attribute column. — getAttributeColumn","title":"Retrieve the value of an attribute column. — getAttributeColumn","text":"Retrieve value attribute column.","code":""},{"path":"http://billdenney.github.io/pknca/reference/getAttributeColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the value of an attribute column. — getAttributeColumn","text":"","code":"getAttributeColumn(object, attr_name, warn_missing = c(\"attr\", \"column\"))"},{"path":"http://billdenney.github.io/pknca/reference/getAttributeColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the value of an attribute column. — getAttributeColumn","text":"object object extract attribute value . attr_name name attribute extract warn_missing Give warning \"attr\"ibute \"column\" missing. Character vector zero, one, \"attr\" \"column\".","code":""},{"path":"http://billdenney.github.io/pknca/reference/getAttributeColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the value of an attribute column. — getAttributeColumn","text":"value attribute (NULL attribute set column exist)","code":""},{"path":"http://billdenney.github.io/pknca/reference/getColumnValueOrNot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the value from a column in a data frame if the value is a column there, otherwise, the value should be a scalar or the length of the data. — getColumnValueOrNot","title":"Get the value from a column in a data frame if the value is a column there, otherwise, the value should be a scalar or the length of the data. — getColumnValueOrNot","text":"Get value column data frame value column , otherwise, value scalar length data.","code":""},{"path":"http://billdenney.github.io/pknca/reference/getColumnValueOrNot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the value from a column in a data frame if the value is a column there, otherwise, the value should be a scalar or the length of the data. — getColumnValueOrNot","text":"","code":"getColumnValueOrNot(data, value, prefix = \"X\")"},{"path":"http://billdenney.github.io/pknca/reference/getColumnValueOrNot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the value from a column in a data frame if the value is a column there, otherwise, the value should be a scalar or the length of the data. — getColumnValueOrNot","text":"data data.frame similar object value character string giving name column data, scalar, vector length data prefix prefix use column must added (used full column name already dataset prepended maximum column name .)","code":""},{"path":"http://billdenney.github.io/pknca/reference/getColumnValueOrNot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the value from a column in a data frame if the value is a column there, otherwise, the value should be a scalar or the length of the data. — getColumnValueOrNot","text":"list elements named \"data\", \"name\" giving data column named \"name\" value column.","code":""},{"path":"http://billdenney.github.io/pknca/reference/getDataName.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the element containing the data for the current object. — getDataName.PKNCAconc","title":"Get the name of the element containing the data for the current object. — getDataName.PKNCAconc","text":"Get name element containing data current object.","code":""},{"path":"http://billdenney.github.io/pknca/reference/getDataName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the element containing the data for the current object. — getDataName.PKNCAconc","text":"","code":"# S3 method for PKNCAconc getDataName(object)  # S3 method for PKNCAdose getDataName(object)  # S3 method for PKNCAresults getDataName(object)  getDataName(object)  # S3 method for default getDataName(object)"},{"path":"http://billdenney.github.io/pknca/reference/getDataName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the element containing the data for the current object. — getDataName.PKNCAconc","text":"object object get data name .","code":""},{"path":"http://billdenney.github.io/pknca/reference/getDataName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of the element containing the data for the current object. — getDataName.PKNCAconc","text":"character scalar name data object (NULL method apply).","code":""},{"path":"http://billdenney.github.io/pknca/reference/getDataName.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get the name of the element containing the data for the current object. — getDataName.PKNCAconc","text":"getDataName(default): data name exists, returns NULL.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/getDepVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the dependent variable (left hand side of the formula) from a PKNCA object. — getDepVar","title":"Get the dependent variable (left hand side of the formula) from a PKNCA object. — getDepVar","text":"Get dependent variable (left hand side formula) PKNCA object.","code":""},{"path":"http://billdenney.github.io/pknca/reference/getDepVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the dependent variable (left hand side of the formula) from a PKNCA object. — getDepVar","text":"","code":"getDepVar(x, ...)"},{"path":"http://billdenney.github.io/pknca/reference/getDepVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the dependent variable (left hand side of the formula) from a PKNCA object. — getDepVar","text":"x object extract formula ... Unused","code":""},{"path":"http://billdenney.github.io/pknca/reference/getDepVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the dependent variable (left hand side of the formula) from a PKNCA object. — getDepVar","text":"vector dependent variable object.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/getGroups.PKNCAconc.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the groups (right hand side after the | from a PKNCA object). — getGroups.PKNCAconc","title":"Get the groups (right hand side after the | from a PKNCA object). — getGroups.PKNCAconc","text":"Get groups (right hand side | PKNCA object).","code":""},{"path":"http://billdenney.github.io/pknca/reference/getGroups.PKNCAconc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the groups (right hand side after the | from a PKNCA object). — getGroups.PKNCAconc","text":"","code":"# S3 method for PKNCAconc getGroups(   object,   form = stats::formula(object),   level,   data = as.data.frame(object),   sep )  # S3 method for PKNCAdose getGroups(...)  # S3 method for PKNCAresults getGroups(   object,   form = formula(object$data$conc),   level,   data = object$result,   sep )"},{"path":"http://billdenney.github.io/pknca/reference/getGroups.PKNCAconc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the groups (right hand side after the | from a PKNCA object). — getGroups.PKNCAconc","text":"object object extract data form formula extract data (defaults formula object) level optional.  included, specifies level(s) groups include.  numeric scalar, include first level number groups.  numeric vector, include groups specified number.  character vector, include named group levels. data data extract groups (defaults data object) sep Unused (kept compatibility nlme package) ... Arguments passed getGroups functions","code":""},{"path":"http://billdenney.github.io/pknca/reference/getGroups.PKNCAconc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the groups (right hand side after the | from a PKNCA object). — getGroups.PKNCAconc","text":"data frame (selected) group columns.","code":""},{"path":"http://billdenney.github.io/pknca/reference/getIndepVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the independent variable (right hand side of the formula) from a PKNCA object. — getIndepVar","title":"Get the independent variable (right hand side of the formula) from a PKNCA object. — getIndepVar","text":"Get independent variable (right hand side formula) PKNCA object.","code":""},{"path":"http://billdenney.github.io/pknca/reference/getIndepVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the independent variable (right hand side of the formula) from a PKNCA object. — getIndepVar","text":"","code":"getIndepVar(x, ...)"},{"path":"http://billdenney.github.io/pknca/reference/getIndepVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the independent variable (right hand side of the formula) from a PKNCA object. — getIndepVar","text":"x object extract formula ... Unused","code":""},{"path":"http://billdenney.github.io/pknca/reference/getIndepVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the independent variable (right hand side of the formula) from a PKNCA object. — getIndepVar","text":"vector independent variable object.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/get_impute_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the impute function from either the intervals column or from the method — get_impute_method","title":"Get the impute function from either the intervals column or from the method — get_impute_method","text":"Get impute function either intervals column method","code":""},{"path":"http://billdenney.github.io/pknca/reference/get_impute_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the impute function from either the intervals column or from the method — get_impute_method","text":"","code":"get_impute_method(intervals, impute)"},{"path":"http://billdenney.github.io/pknca/reference/get_impute_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the impute function from either the intervals column or from the method — get_impute_method","text":"intervals data.frame intervals impute imputation definition","code":""},{"path":"http://billdenney.github.io/pknca/reference/get_impute_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the impute function from either the intervals column or from the method — get_impute_method","text":"imputation function vector","code":""},{"path":"http://billdenney.github.io/pknca/reference/group_by.PKNCAresults.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr grouping for PKNCA — group_by.PKNCAresults","title":"dplyr grouping for PKNCA — group_by.PKNCAresults","text":"dplyr grouping PKNCA","code":""},{"path":"http://billdenney.github.io/pknca/reference/group_by.PKNCAresults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dplyr grouping for PKNCA — group_by.PKNCAresults","text":"","code":"# S3 method for PKNCAresults group_by(.data, ..., .add = FALSE, .drop = dplyr::group_by_drop_default(.data))  # S3 method for PKNCAconc group_by(.data, ..., .add = FALSE, .drop = dplyr::group_by_drop_default(.data))  # S3 method for PKNCAdose group_by(.data, ..., .add = FALSE, .drop = dplyr::group_by_drop_default(.data))  # S3 method for PKNCAresults ungroup(x, ...)  # S3 method for PKNCAconc ungroup(x, ...)  # S3 method for PKNCAdose ungroup(x, ...)"},{"path":"http://billdenney.github.io/pknca/reference/group_by.PKNCAresults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dplyr grouping for PKNCA — group_by.PKNCAresults","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... group_by(), variables computations group . Computations always done ungrouped data frame. perform computations grouped data, need use separate mutate() step group_by(). Computations allowed nest_by(). ungroup(), variables remove grouping. .add FALSE, default, group_by() override existing groups. add existing groups, use .add = TRUE. argument previously called add, prevented creating new grouping variable called add, conflicts naming conventions. .drop Drop groups formed factor levels appear data? default TRUE except .data previously grouped .drop = FALSE. See group_by_drop_default() details. x tbl()","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/group_vars.PKNCAconc.html","id":null,"dir":"Reference","previous_headings":"","what":"Get grouping variables for a PKNCA object — group_vars.PKNCAconc","title":"Get grouping variables for a PKNCA object — group_vars.PKNCAconc","text":"Get grouping variables PKNCA object","code":""},{"path":"http://billdenney.github.io/pknca/reference/group_vars.PKNCAconc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get grouping variables for a PKNCA object — group_vars.PKNCAconc","text":"","code":"# S3 method for PKNCAconc group_vars(x)  # S3 method for PKNCAdose group_vars(x)"},{"path":"http://billdenney.github.io/pknca/reference/group_vars.PKNCAconc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get grouping variables for a PKNCA object — group_vars.PKNCAconc","text":"x PKNCA object","code":""},{"path":"http://billdenney.github.io/pknca/reference/group_vars.PKNCAconc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get grouping variables for a PKNCA object — group_vars.PKNCAconc","text":"character vector (possibly empty) grouping variables","code":""},{"path":"http://billdenney.github.io/pknca/reference/group_vars.PKNCAconc.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get grouping variables for a PKNCA object — group_vars.PKNCAconc","text":"group_vars(PKNCAdose): Get group_vars PKNCAdose object","code":""},{"path":"http://billdenney.github.io/pknca/reference/inner_join.PKNCAresults.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr joins for PKNCA — inner_join.PKNCAresults","title":"dplyr joins for PKNCA — inner_join.PKNCAresults","text":"dplyr joins PKNCA","code":""},{"path":"http://billdenney.github.io/pknca/reference/inner_join.PKNCAresults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dplyr joins for PKNCA — inner_join.PKNCAresults","text":"","code":"# S3 method for PKNCAresults inner_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE )  # S3 method for PKNCAresults left_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE )  # S3 method for PKNCAresults right_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE )  # S3 method for PKNCAresults full_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE )  # S3 method for PKNCAconc inner_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE )  # S3 method for PKNCAconc left_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE )  # S3 method for PKNCAconc right_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE )  # S3 method for PKNCAconc full_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE )  # S3 method for PKNCAdose inner_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE )  # S3 method for PKNCAdose left_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE )  # S3 method for PKNCAdose right_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE )  # S3 method for PKNCAdose full_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = FALSE )"},{"path":"http://billdenney.github.io/pknca/reference/inner_join.PKNCAresults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dplyr joins for PKNCA — inner_join.PKNCAresults","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/interp.extrap.conc.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate concentrations between measurements or extrapolate concentrations after the last measurement. — interp.extrap.conc","title":"Interpolate concentrations between measurements or extrapolate concentrations after the last measurement. — interp.extrap.conc","text":"interpolate.conc() extrapolate.conc() returns interpolated (extrapolated) concentration. interp.extrap.conc() choose whether interpolation extrapolation required also operate many concentrations.  typically used estimate concentration two measured concentrations last measured concentration. note, functions extrapolate prior first point.","code":""},{"path":"http://billdenney.github.io/pknca/reference/interp.extrap.conc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate concentrations between measurements or extrapolate concentrations after the last measurement. — interp.extrap.conc","text":"","code":"interp.extrap.conc(   conc,   time,   time.out,   lambda.z = NA,   clast = pk.calc.clast.obs(conc, time),   options = list(),   method = NULL,   auc.type = \"AUCinf\",   interp.method,   extrap.method,   ...,   conc.blq = NULL,   conc.na = NULL,   check = TRUE )  interpolate.conc(   conc,   time,   time.out,   options = list(),   method = NULL,   interp.method,   conc.blq = NULL,   conc.na = NULL,   conc.origin = 0,   ...,   check = TRUE )  extrapolate.conc(   conc,   time,   time.out,   lambda.z = NA,   clast = pk.calc.clast.obs(conc, time),   auc.type = \"AUCinf\",   extrap.method,   options = list(),   conc.na = NULL,   conc.blq = NULL,   ...,   check = TRUE )  interp.extrap.conc.dose(   conc,   time,   time.dose,   route.dose = \"extravascular\",   duration.dose = NA,   time.out,   out.after = FALSE,   options = list(),   conc.blq = NULL,   conc.na = NULL,   ...,   check = TRUE )"},{"path":"http://billdenney.github.io/pknca/reference/interp.extrap.conc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate concentrations between measurements or extrapolate concentrations after the last measurement. — interp.extrap.conc","text":"conc Measured concentrations time Time measurement concentrations time.Time interpolation requested (vector interp.extrap.conc(), scalar otherwise) lambda.z elimination rate (units inverse time) extrapolation clast last observed concentration limit quantification.  given, clast calculated pk.calc.clast.obs() options List changes default PKNCA options (see PKNCA.options()) method method integration (one 'lin /log ', 'lin-log', 'linear') auc.type type AUC compute.  Choices 'AUCinf', 'AUClast', 'AUCall'. interp.method, extrap.method deprecated favor method auc.type ... Additional arguments passed interpolate.conc() extrapolate.conc(). conc.blq handle BLQ values. (See clean.conc.blq() usage instructions.) conc.na handle NA concentrations.  (See clean.conc.na()) check Run assert_conc_time(), clean.conc.blq(), clean.conc.na()? conc.origin concentration first measurement. conc.origin typically used set predose values zero (default), set predose concentration endogenous compounds, set predose concentrations NA otherwise unknown. time.dose Time dose route.dose route administration (\"intravascular\" \"extravascular\").  See details parameter used. duration.dose duration administration? See details parameter used. .interpolation occur data (FALSE) (TRUE) interpolated point?  See details parameter used.  meaningful effect instant IV bolus dose.","code":""},{"path":"http://billdenney.github.io/pknca/reference/interp.extrap.conc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate concentrations between measurements or extrapolate concentrations after the last measurement. — interp.extrap.conc","text":"interpolated extrapolated concentration value scalar double (vector interp.extrap.conc()).","code":""},{"path":"http://billdenney.github.io/pknca/reference/interp.extrap.conc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interpolate concentrations between measurements or extrapolate concentrations after the last measurement. — interp.extrap.conc","text":"NA value lambda.z parameter prevent extrapolation. extrap.method 'AUCinf' Use lambda.z extrapolate beyond last point half-life. 'AUCall' last point limit quantification missing, identical 'AUCinf'. last point limit quantification, linear interpolation Clast next BLQ used  interval additional points extrapolated 0. 'AUClast' Extrapolates points last  limit quantification 0. duration.dose direction.ignored route.dose == \"extravascular\".  direction.ignored duration.dose > 0. route.dose duration.dose affect interpolation/extrapolation concentration occurs time dosing.  route.dose == \"intravascular\" duration.dose == 0 extrapolation occurs IV bolus using pk.calc.c0() data dosing.  Otherwise (either route.dose == \"extravascular\" duration.dose > 0), extrapolation occurs using concentrations dosing estimating half-life (precisely, estimating lambda.z).  Finally, direction.can change direction interpolation cases route.dose == \"intravascular\" duration.dose == 0.  direction.== \"\" interpolation occurs data dose (case route.dose == \"extravascular\"), direction.== \"\" interpolation occurs data dosing.","code":""},{"path":"http://billdenney.github.io/pknca/reference/interp.extrap.conc.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Interpolate concentrations between measurements or extrapolate concentrations after the last measurement. — interp.extrap.conc","text":"interpolate.conc(): Interpolate concentrations Tlast (inclusive) extrapolate.conc(): Extrapolate concentrations Tlast interp.extrap.conc.dose(): Interpolate extrapolate concentrations without interpolating extrapolating beyond doses.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/interp_extrap_conc_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate or extrapolate concentrations using the provided method — interp_extrap_conc_method","title":"Interpolate or extrapolate concentrations using the provided method — interp_extrap_conc_method","text":"Interpolate extrapolate concentrations using provided method","code":""},{"path":"http://billdenney.github.io/pknca/reference/interp_extrap_conc_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate or extrapolate concentrations using the provided method — interp_extrap_conc_method","text":"","code":"interpolate_conc_linear(conc_1, conc_2, time_1, time_2, time_out)  interpolate_conc_log(conc_1, conc_2, time_1, time_2, time_out)  extrapolate_conc_lambdaz(clast, lambda.z, tlast, time_out)"},{"path":"http://billdenney.github.io/pknca/reference/interp_extrap_conc_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate or extrapolate concentrations using the provided method — interp_extrap_conc_method","text":"conc_1, conc_2 concentration time1 time2 time_1, time_2 time value associated conc1 conc2 time_out Time interpolation requested clast concentration last time lower LOQ lambda.z elimination rate (units inverse time) extrapolation tlast time last concentration lower limit quantification (LOQ)","code":""},{"path":"http://billdenney.github.io/pknca/reference/interp_extrap_conc_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate or extrapolate concentrations using the provided method — interp_extrap_conc_method","text":"interpolated extrapolated value using correct method","code":""},{"path":"http://billdenney.github.io/pknca/reference/is_sparse_pk.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a PKNCA object used for sparse PK? — is_sparse_pk.PKNCAconc","title":"Is a PKNCA object used for sparse PK? — is_sparse_pk.PKNCAconc","text":"PKNCA object used sparse PK?","code":""},{"path":"http://billdenney.github.io/pknca/reference/is_sparse_pk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a PKNCA object used for sparse PK? — is_sparse_pk.PKNCAconc","text":"","code":"# S3 method for PKNCAconc is_sparse_pk(object)  # S3 method for PKNCAdata is_sparse_pk(object)  # S3 method for PKNCAresults is_sparse_pk(object)  is_sparse_pk(object)"},{"path":"http://billdenney.github.io/pknca/reference/is_sparse_pk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a PKNCA object used for sparse PK? — is_sparse_pk.PKNCAconc","text":"object object see includes sparse PK","code":""},{"path":"http://billdenney.github.io/pknca/reference/is_sparse_pk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a PKNCA object used for sparse PK? — is_sparse_pk.PKNCAconc","text":"TRUE sparse FALSE dense (sparse)","code":""},{"path":"http://billdenney.github.io/pknca/reference/model.frame.PKNCAconc.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the columns used in the formula (in order) from a PKNCAconc or PKNCAdose object. — model.frame.PKNCAconc","title":"Extract the columns used in the formula (in order) from a PKNCAconc or PKNCAdose object. — model.frame.PKNCAconc","text":"Extract columns used formula (order) PKNCAconc PKNCAdose object.","code":""},{"path":"http://billdenney.github.io/pknca/reference/model.frame.PKNCAconc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the columns used in the formula (in order) from a PKNCAconc or PKNCAdose object. — model.frame.PKNCAconc","text":"","code":"# S3 method for PKNCAconc model.frame(formula, ...)  # S3 method for PKNCAdose model.frame(formula, ...)"},{"path":"http://billdenney.github.io/pknca/reference/model.frame.PKNCAconc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the columns used in the formula (in order) from a PKNCAconc or PKNCAdose object. — model.frame.PKNCAconc","text":"formula object use (parameter name formula use generic function) ... Unused","code":""},{"path":"http://billdenney.github.io/pknca/reference/model.frame.PKNCAconc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the columns used in the formula (in order) from a PKNCAconc or PKNCAdose object. — model.frame.PKNCAconc","text":"data frame columns object formula order.","code":""},{"path":"http://billdenney.github.io/pknca/reference/mutate.PKNCAresults.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr mutate-based modification for PKNCA — mutate.PKNCAresults","title":"dplyr mutate-based modification for PKNCA — mutate.PKNCAresults","text":"dplyr mutate-based modification PKNCA","code":""},{"path":"http://billdenney.github.io/pknca/reference/mutate.PKNCAresults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dplyr mutate-based modification for PKNCA — mutate.PKNCAresults","text":"","code":"# S3 method for PKNCAresults mutate(.data, ...)  # S3 method for PKNCAconc mutate(.data, ...)  # S3 method for PKNCAdose mutate(.data, ...)"},{"path":"http://billdenney.github.io/pknca/reference/mutate.PKNCAresults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dplyr mutate-based modification for PKNCA — mutate.PKNCAresults","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Name-value pairs. name gives name column output. value can : vector length 1, recycled correct length. vector length current group (whole data frame ungrouped). NULL, remove column. data frame tibble, create multiple columns output.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/normalize_exclude.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize the exclude column by setting blanks to NA — normalize_exclude","title":"Normalize the exclude column by setting blanks to NA — normalize_exclude","text":"Normalize exclude column setting blanks NA","code":""},{"path":"http://billdenney.github.io/pknca/reference/normalize_exclude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize the exclude column by setting blanks to NA — normalize_exclude","text":"","code":"normalize_exclude(object)"},{"path":"http://billdenney.github.io/pknca/reference/normalize_exclude.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize the exclude column by setting blanks to NA — normalize_exclude","text":"object object extract exclude column ","code":""},{"path":"http://billdenney.github.io/pknca/reference/normalize_exclude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize the exclude column by setting blanks to NA — normalize_exclude","text":"exclude vector NA indicates exclude anything else indicates exclude.","code":""},{"path":"http://billdenney.github.io/pknca/reference/parse_formula_to_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a formula representation to the columns for input data — parse_formula_to_cols","title":"Convert a formula representation to the columns for input data — parse_formula_to_cols","text":"Convert formula representation columns input data","code":""},{"path":"http://billdenney.github.io/pknca/reference/parse_formula_to_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a formula representation to the columns for input data — parse_formula_to_cols","text":"","code":"parse_formula_to_cols(form)"},{"path":"http://billdenney.github.io/pknca/reference/parse_formula_to_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a formula representation to the columns for input data — parse_formula_to_cols","text":"form formula (something coercible formula) extract parts","code":""},{"path":"http://billdenney.github.io/pknca/reference/parse_formula_to_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a formula representation to the columns for input data — parse_formula_to_cols","text":"list column names various formula parts","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.business.html","id":null,"dir":"Reference","previous_headings":"","what":"Run any function with a maximum missing fraction of X and 0s possibly counting as missing. The maximum fraction missing comes from PKNCA.options(","title":"Run any function with a maximum missing fraction of X and 0s possibly counting as missing. The maximum fraction missing comes from PKNCA.options(","text":"Note missing values removed prior calling function.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.business.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run any function with a maximum missing fraction of X and 0s possibly counting as missing. The maximum fraction missing comes from PKNCA.options(","text":"","code":"pk.business(FUN, zero.missing = FALSE, max.missing)"},{"path":"http://billdenney.github.io/pknca/reference/pk.business.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run any function with a maximum missing fraction of X and 0s possibly counting as missing. The maximum fraction missing comes from PKNCA.options(","text":"FUN function run.  function called FUN(x, ...) missing values removed. zero.missing zeros counted missing?  TRUE include missing count. max.missing maximum fraction data allowed missing (number 0 1, inclusive).","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.business.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run any function with a maximum missing fraction of X and 0s possibly counting as missing. The maximum fraction missing comes from PKNCA.options(","text":"version FUN can called parameters checked missingness (zeros) missing (zeros) removed call.  max.missing exceeded, NA returned.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.business.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run any function with a maximum missing fraction of X and 0s possibly counting as missing. The maximum fraction missing comes from PKNCA.options(","text":"","code":"my_mean <- pk.business(FUN=mean) mean(c(1:3, NA)) #> [1] NA # Less than half missing results in the summary statistic of the available # values. my_mean(c(1:3, NA)) #> [1] 2 #> attr(,\"n\") #> [1] 3 # More than half missing results in a missing value my_mean(c(1:3, rep(NA, 4))) #> [1] NA"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ae.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate amount excreted (typically in urine or feces) — pk.calc.ae","title":"Calculate amount excreted (typically in urine or feces) — pk.calc.ae","text":"Calculate amount excreted (typically urine feces)","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate amount excreted (typically in urine or feces) — pk.calc.ae","text":"","code":"pk.calc.ae(conc, volume, check = TRUE)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate amount excreted (typically in urine or feces) — pk.calc.ae","text":"conc Measured concentrations volume volume (mass) sample check concentration volume data checked?","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate amount excreted (typically in urine or feces) — pk.calc.ae","text":"amount excreted interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ae.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate amount excreted (typically in urine or feces) — pk.calc.ae","text":"ae sum(conc*volume). units concentration volume match sum(conc*volume) units mass moles.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.aucabove.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the AUC above a given concentration — pk.calc.aucabove","title":"Calculate the AUC above a given concentration — pk.calc.aucabove","text":"Concentrations given concentration (conc_above) set zero.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.aucabove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the AUC above a given concentration — pk.calc.aucabove","text":"","code":"pk.calc.aucabove(conc, time, conc_above = NA_real_, ..., options = list())"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.aucabove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the AUC above a given concentration — pk.calc.aucabove","text":"conc Measured concentrations time Time measurement concentrations conc_above concentration ... Extra arguments.  Currently, extra argument used method described details section. options List changes default PKNCA options (see PKNCA.options())","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.aucabove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the AUC above a given concentration — pk.calc.aucabove","text":"AUC concentration limit","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.aucint.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the AUC over an interval with interpolation and/or extrapolation of concentrations for the beginning and end of the interval. — pk.calc.aucint","title":"Calculate the AUC over an interval with interpolation and/or extrapolation of concentrations for the beginning and end of the interval. — pk.calc.aucint","text":"Calculate AUC interval interpolation /extrapolation concentrations beginning end interval.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.aucint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the AUC over an interval with interpolation and/or extrapolation of concentrations for the beginning and end of the interval. — pk.calc.aucint","text":"","code":"pk.calc.aucint(   conc,   time,   interval = NULL,   start = NULL,   end = NULL,   clast = pk.calc.clast.obs(conc, time),   lambda.z = NA,   time.dose = NULL,   route = \"extravascular\",   duration.dose = 0,   method = NULL,   auc.type = \"AUClast\",   conc.blq = NULL,   conc.na = NULL,   check = TRUE,   ...,   options = list() )  pk.calc.aucint.last(   conc,   time,   start = NULL,   end = NULL,   time.dose,   ...,   options = list() )  pk.calc.aucint.all(   conc,   time,   start = NULL,   end = NULL,   time.dose,   ...,   options = list() )  pk.calc.aucint.inf.obs(   conc,   time,   start = NULL,   end = NULL,   time.dose,   lambda.z,   clast.obs,   ...,   options = list() )  pk.calc.aucint.inf.pred(   conc,   time,   start = NULL,   end = NULL,   time.dose,   lambda.z,   clast.pred,   ...,   options = list() )"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.aucint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the AUC over an interval with interpolation and/or extrapolation of concentrations for the beginning and end of the interval. — pk.calc.aucint","text":"conc Measured concentrations time Time measurement concentrations interval Numeric vector two numbers start end time integration start start time interval end end time interval clast, clast.obs, clast.pred last concentration limit quantification; used AUCinf calculations.  provided clast.obs (observed clast value, default), AUCinf AUCinf,obs. provided clast.pred, AUCinf AUCinf,pred. lambda.z elimination rate (units inverse time) extrapolation time.dose, route, duration.dose time doses, route administration, duration dose used interpolation extrapolation concentration data (see interp.extrap.conc.dose()).  NULL, interp.extrap.conc() used instead (assuming doses affecting concentrations interval). method method integration (one 'lin /log ', 'lin-log', 'linear') auc.type type AUC compute.  Choices 'AUCinf', 'AUClast', 'AUCall'. conc.blq handle BLQ values first last LOQ concentrations. (See clean.conc.blq() usage instructions.) conc.na handle missing concentration values.  (See clean.conc.na() usage instructions.) check Run assert_conc_time(), clean.conc.blq(), clean.conc.na()? ... Additional arguments passed pk.calc.auxc interp.extrap.conc options List changes default PKNCA options (see PKNCA.options())","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.aucint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the AUC over an interval with interpolation and/or extrapolation of concentrations for the beginning and end of the interval. — pk.calc.aucint","text":"AUC interval time number","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.aucint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the AUC over an interval with interpolation and/or extrapolation of concentrations for the beginning and end of the interval. — pk.calc.aucint","text":"pk.calc.aucint() needs extrapolate using lambda.z (words, using half-life), always extrapolate using logarithmic trapezoidal rule align using half-life calculation extrapolation.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.aucint.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calculate the AUC over an interval with interpolation and/or extrapolation of concentrations for the beginning and end of the interval. — pk.calc.aucint","text":"pk.calc.aucint.last(): Interpolate extrapolate concentrations AUClast pk.calc.aucint.(): Interpolate extrapolate concentrations AUCall pk.calc.aucint.inf.obs(): Interpolate extrapolate concentrations AUCinf.obs pk.calc.aucint.inf.pred(): Interpolate extrapolate concentrations AUCinf.pred","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.auciv.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate AUC for intravenous dosing — pk.calc.auciv","title":"Calculate AUC for intravenous dosing — pk.calc.auciv","text":"Calculate AUC intravenous dosing","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.auciv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate AUC for intravenous dosing — pk.calc.auciv","text":"","code":"pk.calc.auciv(conc, time, c0, auc, ..., check = TRUE)  pk.calc.auciv_pbext(auc, auciv)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.auciv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate AUC for intravenous dosing — pk.calc.auciv","text":"conc Measured concentrations time Time measurement concentrations c0 concentration time 0, typically calculated using pk.calc.c0() auc AUC calculated using conc time without c0 (may calculated using method) ... functions pk.calc.auxc, values passed pk.calc.auxc check Run assert_conc_time(), clean.conc.blq(), clean.conc.na()? auciv AUC calculated using c0","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.auciv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate AUC for intravenous dosing — pk.calc.auciv","text":"pk.calc.auciv: AUC calculated using c0 pk.calc.auciv_pctbackextrap: AUC percent back-extrapolated","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.auciv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate AUC for intravenous dosing — pk.calc.auciv","text":"AUC intravenous (IV) dosing extrapolates AUC back first measurement time 0 using c0 AUC calculated another method (example auclast). calculation method takes following steps: time = 0 must present data measured concentration. AUC time = 0 next time point calculated (auc_first). AUC time = 0 c0 next time point calculated (auc_second). final AUC initial AUC plus difference two AUCs (auc_final <- auc + auc_second - auc_first). calculation back-extrapolation 100*(1 - auc/auciv).","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.auciv.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calculate AUC for intravenous dosing — pk.calc.auciv","text":"pk.calc.auciv_pbext(): Calculate percent back-extrapolated AUC IV administration","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.aucpext.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the AUC percent extrapolated — pk.calc.aucpext","title":"Calculate the AUC percent extrapolated — pk.calc.aucpext","text":"Calculate AUC percent extrapolated","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.aucpext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the AUC percent extrapolated — pk.calc.aucpext","text":"","code":"pk.calc.aucpext(auclast, aucinf)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.aucpext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the AUC percent extrapolated — pk.calc.aucpext","text":"auclast area curve time 0 last measurement limit quantification aucinf area curve time 0 infinity","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.aucpext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the AUC percent extrapolated — pk.calc.aucpext","text":"numeric value AUC percent extrapolated NA_real_ following true .na(aucinf), .na(auclast), aucinf <= 0, auclast <= 0.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.aucpext.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the AUC percent extrapolated — pk.calc.aucpext","text":"aucpext 100*(1-auclast/aucinf).","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.auxc.html","id":null,"dir":"Reference","previous_headings":"","what":"A compute the Area Under the (Moment) Curve — pk.calc.auxc","title":"A compute the Area Under the (Moment) Curve — pk.calc.auxc","text":"Compute area curve (AUC) area moment curve (AUMC) pharmacokinetic (PK) data.  AUC AUMC used many purposes analyzing PK drug development.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.auxc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A compute the Area Under the (Moment) Curve — pk.calc.auxc","text":"","code":"pk.calc.auxc(   conc,   time,   interval = c(0, Inf),   clast = pk.calc.clast.obs(conc, time, check = FALSE),   lambda.z = NA,   auc.type = c(\"AUClast\", \"AUCinf\", \"AUCall\"),   options = list(),   method = NULL,   conc.blq = NULL,   conc.na = NULL,   check = TRUE,   fun_linear,   fun_log,   fun_inf )  pk.calc.auc(conc, time, ..., options = list())  pk.calc.auc.last(conc, time, ..., options = list())  pk.calc.auc.inf(conc, time, ..., options = list(), lambda.z)  pk.calc.auc.inf.obs(conc, time, clast.obs, ..., options = list(), lambda.z)  pk.calc.auc.inf.pred(conc, time, clast.pred, ..., options = list(), lambda.z)  pk.calc.auc.all(conc, time, ..., options = list())  pk.calc.aumc(conc, time, ..., options = list())  pk.calc.aumc.last(conc, time, ..., options = list())  pk.calc.aumc.inf(conc, time, ..., options = list(), lambda.z)  pk.calc.aumc.inf.obs(conc, time, clast.obs, ..., options = list(), lambda.z)  pk.calc.aumc.inf.pred(conc, time, clast.pred, ..., options = list(), lambda.z)  pk.calc.aumc.all(conc, time, ..., options = list())"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.auxc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A compute the Area Under the (Moment) Curve — pk.calc.auxc","text":"conc Measured concentrations time Time measurement concentrations interval Numeric vector two numbers start end time integration clast, clast.obs, clast.pred last concentration limit quantification; used AUCinf calculations.  provided clast.obs (observed clast value, default), AUCinf AUCinf,obs. provided clast.pred, AUCinf AUCinf,pred. lambda.z elimination rate (units inverse time) extrapolation auc.type type AUC compute.  Choices 'AUCinf', 'AUClast', 'AUCall'. options List changes default PKNCA options (see PKNCA.options()) method method integration (one 'lin /log ', 'lin-log', 'linear') conc.blq handle BLQ values first last LOQ concentrations. (See clean.conc.blq() usage instructions.) conc.na handle missing concentration values.  (See clean.conc.na() usage instructions.) check Run assert_conc_time(), clean.conc.blq(), clean.conc.na()? fun_linear function use integration linear part curve (required AUC AUMC functions) fun_log function use integration logarithmic part curve (log integration used; required AUC AUMC functions) fun_inf function use extrapolation final measurement infinite time (required AUC AUMC functions. ... functions pk.calc.auxc, values passed pk.calc.auxc","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.auxc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A compute the Area Under the (Moment) Curve — pk.calc.auxc","text":"numeric value AU(M)C.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.auxc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A compute the Area Under the (Moment) Curve — pk.calc.auxc","text":"pk.calc.auc.last simply shortcut setting interval parameter c(0, \"last\"). Extrapolation beyond Clast occurs using half-life Clast,obs; Clast,pred yet supported. conc input zero, AU(M)C zero.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.auxc.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"A compute the Area Under the (Moment) Curve — pk.calc.auxc","text":"pk.calc.auc(): Compute area curve pk.calc.auc.last(): Compute AUClast. pk.calc.auc.inf(): Compute AUCinf pk.calc.auc.inf.obs(): Compute AUCinf observed Clast. pk.calc.auc.inf.pred(): Compute AUCinf predicted Clast. pk.calc.auc.(): Compute AUCall. pk.calc.aumc(): Compute area moment curve pk.calc.aumc.last(): Compute AUMClast. pk.calc.aumc.inf(): Compute AUMCinf pk.calc.aumc.inf.obs(): Compute AUMCinf observed Clast. pk.calc.aumc.inf.pred(): Compute AUMCinf predicted Clast. pk.calc.aumc.(): Compute AUMCall.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.auxc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A compute the Area Under the (Moment) Curve — pk.calc.auxc","text":"Gabrielsson J, Weiner D.  \"Section 2.8.1 Computation methods - Linear trapezoidal rule.\"  Pharmacokinetic & Pharmacodynamic Data Analysis: Concepts Applications, 4th Edition.  Stockholm, Sweden: Swedish Pharmaceutical Press, 2000.  162-4. Gabrielsson J, Weiner D.  \"Section 2.8.3 Computation methods - Log-linear trapezoidal rule.\"  Pharmacokinetic & Pharmacodynamic Data Analysis: Concepts Applications, 4th Edition.  Stockholm, Sweden: Swedish Pharmaceutical Press, 2000.  164-7.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.auxc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A compute the Area Under the (Moment) Curve — pk.calc.auxc","text":"","code":"myconc <- c(0, 1, 2, 1, 0.5, 0.25, 0) mytime <- c(0, 1, 2, 3, 4,   5,    6) pk.calc.auc(myconc, mytime, interval=c(0, 6)) #> [1] 4.524716 pk.calc.auc(myconc, mytime, interval=c(0, Inf)) #> [1] 4.524716"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.c0.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the concentration at dosing time for an IV bolus dose. — pk.calc.c0","title":"Estimate the concentration at dosing time for an IV bolus dose. — pk.calc.c0","text":"Estimate concentration dosing time IV bolus dose.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.c0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the concentration at dosing time for an IV bolus dose. — pk.calc.c0","text":"","code":"pk.calc.c0(   conc,   time,   time.dose = 0,   method = c(\"c0\", \"logslope\", \"c1\", \"cmin\", \"set0\"),   check = TRUE )  pk.calc.c0.method.logslope(conc, time, time.dose = 0, check = TRUE)  pk.calc.c0.method.c0(conc, time, time.dose = 0, check = TRUE)  pk.calc.c0.method.c1(conc, time, time.dose = 0, check = TRUE)  pk.calc.c0.method.set0(conc, time, time.dose = 0, check = TRUE)  pk.calc.c0.method.cmin(conc, time, time.dose = 0, check = TRUE)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.c0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the concentration at dosing time for an IV bolus dose. — pk.calc.c0","text":"conc Measured concentrations time Time measurement concentrations time.dose time dosing occurred method order methods test (see details) check Check conc time inputs","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.c0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the concentration at dosing time for an IV bolus dose. — pk.calc.c0","text":"estimated concentration time 0.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.c0.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the concentration at dosing time for an IV bolus dose. — pk.calc.c0","text":"Methods available interpolation , specific function. c0 observed conc time.dose nonzero, return .  method usually used first single-dose IV bolus data case nominal time zero measured. logslope Compute semilog line first two measured times, use line extrapolate backward time.dose c1 Use first point time.dose cmin Set c0 cmin interval.  method usually used multiple-dose oral data IV infusion data. set0 Set c0 zero (regardless data).  method usually used first single-dose oral data.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.c0.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Estimate the concentration at dosing time for an IV bolus dose. — pk.calc.c0","text":"pk.calc.c0.method.logslope(): Semilog regress first second points time.dose.  method return NA second conc time.dose 0 greater first. pk.calc.c0.method.c0(): Use C0 = conc[time %% time.dose] nonzero. pk.calc.c0.method.c1(): Use C0 = C1. pk.calc.c0.method.set0(): Use C0 = 0 (typically used single dose oral IV infusion) pk.calc.c0.method.cmin(): Use C0 = Cmin (typically used multiple dose oral IV infusion IV bolus)","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cav.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the average concentration during an interval. — pk.calc.cav","title":"Calculate the average concentration during an interval. — pk.calc.cav","text":"Calculate average concentration interval.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cav.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the average concentration during an interval. — pk.calc.cav","text":"","code":"pk.calc.cav(auc, start, end)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cav.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the average concentration during an interval. — pk.calc.cav","text":"auc area curve interval start start time interval end end time interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cav.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the average concentration during an interval. — pk.calc.cav","text":"Cav (average concentration interval)","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cav.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the average concentration during an interval. — pk.calc.cav","text":"cav auc/(end-start).","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ceoi.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the concentration at the end of infusion — pk.calc.ceoi","title":"Determine the concentration at the end of infusion — pk.calc.ceoi","text":"Determine concentration end infusion","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ceoi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the concentration at the end of infusion — pk.calc.ceoi","text":"","code":"pk.calc.ceoi(conc, time, duration.dose = NA, check = TRUE)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ceoi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the concentration at the end of infusion — pk.calc.ceoi","text":"conc Measured concentrations time Time measurement concentrations duration.dose duration dosing administration (typically IV infusion) check Run assert_conc_time()?","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ceoi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the concentration at the end of infusion — pk.calc.ceoi","text":"concentration end infusion, NA duration.dose NA, NA time != duration.dose","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cl.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the (observed oral) clearance — pk.calc.cl","title":"Calculate the (observed oral) clearance — pk.calc.cl","text":"Calculate (observed oral) clearance","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the (observed oral) clearance — pk.calc.cl","text":"","code":"pk.calc.cl(dose, auc)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the (observed oral) clearance — pk.calc.cl","text":"dose dose administered auc area concentration-time curve.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the (observed oral) clearance — pk.calc.cl","text":"numeric value total (CL) observed oral clearance (CL/F)","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the (observed oral) clearance — pk.calc.cl","text":"cl dose/auc. dose length inputs, output length inputs; function assumes calculating multiple intervals simultaneously.  inputs dose scalars dose vector, function assumes multiple doses given single interval, sum doses used calculation.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the (observed oral) clearance — pk.calc.cl","text":"Gabrielsson J, Weiner D. \"Section 2.5.1 Derivation clearance.\" Pharmacokinetic & Pharmacodynamic Data Analysis: Concepts Applications, 4th Edition.  Stockholm, Sweden: Swedish Pharmaceutical Press, 2000. 86-7.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.clast.obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the last observed concentration above the limit of quantification (LOQ). — pk.calc.clast.obs","title":"Determine the last observed concentration above the limit of quantification (LOQ). — pk.calc.clast.obs","text":"concentrations missing, NA_real_ returned.  concentrations zero (limit quantification) missing, zero returned.  Tlast NA (due non-missing LOQ measurements), return NA_real_.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.clast.obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the last observed concentration above the limit of quantification (LOQ). — pk.calc.clast.obs","text":"","code":"pk.calc.clast.obs(conc, time, check = TRUE)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.clast.obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the last observed concentration above the limit of quantification (LOQ). — pk.calc.clast.obs","text":"conc Measured concentrations time Time measurement concentrations check Run assert_conc_time()?","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.clast.obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the last observed concentration above the limit of quantification (LOQ). — pk.calc.clast.obs","text":"last observed concentration LOQ","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.clr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate renal clearance — pk.calc.clr","title":"Calculate renal clearance — pk.calc.clr","text":"Calculate renal clearance","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.clr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate renal clearance — pk.calc.clr","text":"","code":"pk.calc.clr(ae, auc)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.clr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate renal clearance — pk.calc.clr","text":"ae amount excreted urine (numeric scalar vector) auc area curve (numeric scalar vector)","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.clr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate renal clearance — pk.calc.clr","text":"renal clearance number","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.clr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate renal clearance — pk.calc.clr","text":"clr sum(ae)/auc. units ae auc match ae/auc units volume/time.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine maximum observed PK concentration — pk.calc.cmax","title":"Determine maximum observed PK concentration — pk.calc.cmax","text":"Determine maximum observed PK concentration","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine maximum observed PK concentration — pk.calc.cmax","text":"","code":"pk.calc.cmax(conc, check = TRUE)  pk.calc.cmin(conc, check = TRUE)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine maximum observed PK concentration — pk.calc.cmax","text":"conc Measured concentrations check Run assert_conc()?","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine maximum observed PK concentration — pk.calc.cmax","text":"number maximum concentration NA concentrations missing","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cmax.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Determine maximum observed PK concentration — pk.calc.cmax","text":"pk.calc.cmin(): Determine minimum observed PK concentration","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.count_conc.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the number of concentration measurements in an interval — pk.calc.count_conc","title":"Count the number of concentration measurements in an interval — pk.calc.count_conc","text":"count_conc typically used quality control data ensure sufficient number non-missing samples calculation ensure data consistent individuals.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.count_conc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the number of concentration measurements in an interval — pk.calc.count_conc","text":"","code":"pk.calc.count_conc(conc, check = TRUE)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.count_conc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the number of concentration measurements in an interval — pk.calc.count_conc","text":"conc Measured concentrations check Run assert_conc()?","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.count_conc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the number of concentration measurements in an interval — pk.calc.count_conc","text":"count non-missing concentrations (0 concentrations missing)","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cstart.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the concentration at the beginning of the interval — pk.calc.cstart","title":"Determine the concentration at the beginning of the interval — pk.calc.cstart","text":"Determine concentration beginning interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cstart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the concentration at the beginning of the interval — pk.calc.cstart","text":"","code":"pk.calc.cstart(conc, time, start)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cstart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the concentration at the beginning of the interval — pk.calc.cstart","text":"conc Measured concentrations time Time measurement concentrations start start time interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.cstart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the concentration at the beginning of the interval — pk.calc.cstart","text":"concentration time == end.  none match, NA","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ctrough.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the trough (end of interval) concentration — pk.calc.ctrough","title":"Determine the trough (end of interval) concentration — pk.calc.ctrough","text":"Determine trough (end interval) concentration","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ctrough.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the trough (end of interval) concentration — pk.calc.ctrough","text":"","code":"pk.calc.ctrough(conc, time, end)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ctrough.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the trough (end of interval) concentration — pk.calc.ctrough","text":"conc Measured concentrations time Time measurement concentrations end end time interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ctrough.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the trough (end of interval) concentration — pk.calc.ctrough","text":"concentration time == end.  none match, NA","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.deg.fluc.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the degree of fluctuation — pk.calc.deg.fluc","title":"Determine the degree of fluctuation — pk.calc.deg.fluc","text":"Determine degree fluctuation","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.deg.fluc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the degree of fluctuation — pk.calc.deg.fluc","text":"","code":"pk.calc.deg.fluc(cmax, cmin, cav)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.deg.fluc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the degree of fluctuation — pk.calc.deg.fluc","text":"cmax maximum observed concentration cmin minimum observed concentration cav average concentration interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.deg.fluc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the degree of fluctuation — pk.calc.deg.fluc","text":"degree fluctuation around average concentration.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.deg.fluc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine the degree of fluctuation — pk.calc.deg.fluc","text":"deg.fluc 100*(cmax - cmin)/cav.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.dn.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine dose normalized NCA parameter — pk.calc.dn","title":"Determine dose normalized NCA parameter — pk.calc.dn","text":"Determine dose normalized NCA parameter","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.dn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine dose normalized NCA parameter — pk.calc.dn","text":"","code":"pk.calc.dn(parameter, dose)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.dn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine dose normalized NCA parameter — pk.calc.dn","text":"parameter Parameter dose normalize dose Dose units compatible area curve","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.dn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine dose normalized NCA parameter — pk.calc.dn","text":"number dose normalized AUC","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.dn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine dose normalized NCA parameter — pk.calc.dn","text":"","code":"pk.calc.dn(90, 10) #> [1] 9"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.f.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the absolute (or relative) bioavailability — pk.calc.f","title":"Calculate the absolute (or relative) bioavailability — pk.calc.f","text":"Calculate absolute (relative) bioavailability","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.f.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the absolute (or relative) bioavailability — pk.calc.f","text":"","code":"pk.calc.f(dose1, auc1, dose2, auc2)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.f.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the absolute (or relative) bioavailability — pk.calc.f","text":"dose1 dose administered route method 1 auc1 AUC 0 infinity 0 tau administered route method 1 dose2 dose administered route method 2 auc2 AUC 0 infinity 0 tau administered route method 2","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.f.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the absolute (or relative) bioavailability — pk.calc.f","text":"f (auc2/dose2)/(auc1/dose1).","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.fe.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate fraction excreted (typically in urine or feces) — pk.calc.fe","title":"Calculate fraction excreted (typically in urine or feces) — pk.calc.fe","text":"Calculate fraction excreted (typically urine feces)","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.fe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate fraction excreted (typically in urine or feces) — pk.calc.fe","text":"","code":"pk.calc.fe(ae, dose)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.fe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate fraction excreted (typically in urine or feces) — pk.calc.fe","text":"ae amount excreted (numeric scalar vector) dose dose (numeric scalar vector)","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.fe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate fraction excreted (typically in urine or feces) — pk.calc.fe","text":"fraction dose excreted","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.fe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate fraction excreted (typically in urine or feces) — pk.calc.fe","text":"fe sum(ae)/dose units ae dose ae/dose unitless fraction.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.half.life.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the half-life and associated parameters — pk.calc.half.life","title":"Compute the half-life and associated parameters — pk.calc.half.life","text":"terminal elimination half-life estimated final points concentration-time curve using semi-log regression (log(conc)~time) automated selection points calculation (unless manually.selected.points TRUE).","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.half.life.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the half-life and associated parameters — pk.calc.half.life","text":"","code":"pk.calc.half.life(   conc,   time,   tmax,   tlast,   manually.selected.points = FALSE,   options = list(),   min.hl.points = NULL,   adj.r.squared.factor = NULL,   conc.blq = NULL,   conc.na = NULL,   first.tmax = NULL,   allow.tmax.in.half.life = NULL,   check = TRUE )"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.half.life.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the half-life and associated parameters — pk.calc.half.life","text":"conc Measured concentrations time Time measurement concentrations tmax Time maximum concentration (calculated included return data frame given) tlast Time last concentration limit quantification (calculated included return data frame given) manually.selected.points input points (conc time) manually selected?  impact setting TRUE selection best points done.  TRUE, option causes options adj.r.squared.factor, min.hl.points, allow.tmax..half.life ignored. options List changes default PKNCA options (see PKNCA.options()) min.hl.points minimum number points must included calculate half-life adj.r.squared.factor allowance adjusted r-squared adding another point. conc.blq See clean.conc.blq() conc.na See clean.conc.na() first.tmax See pk.calc.tmax(). allow.tmax..half.life Allow concentration point tmax included half-life slope calculation. check Run assert_conc_time(), clean.conc.blq(), clean.conc.na()?","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.half.life.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the half-life and associated parameters — pk.calc.half.life","text":"data frame one row columns tmax Time maximum observed concentration (included given input) tlast Time last observed concentration LOQ (included given input) r.squared coefficient determination adj.r.squared adjusted coefficient determination lambda.z elimination rate lambda.z.time.first first time half-life calculation lambda.z.n.points number points half-life calculation clast.pred Concentration tlast predicted half-life line half.life half-life span.ratio span ratio [ratio half-life time used half-life calculation","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.half.life.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the half-life and associated parameters — pk.calc.half.life","text":"See \"Half-Life Calculation\" vignette details calculation methods used. manually.selected.points FALSE (default), half-life calculated computing best fit line points tmax (based value allow.tmax..half.life).  best half-life chosen following rules order: least min.hl.points points included lambda.z > 0 time best adjusted r-squared (within adj.r.squared.factor) one points included manually.selected.points TRUE, conc time data used -without form selection best-fit half-life.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.half.life.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the half-life and associated parameters — pk.calc.half.life","text":"Gabrielsson J, Weiner D.  \"Section 2.8.4 Strategies estimation lambda-z.\"  Pharmacokinetic & Pharmacodynamic Data Analysis: Concepts Applications, 4th Edition.  Stockholm, Sweden: Swedish Pharmaceutical Press, 2000.  167-9.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.kel.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the elimination rate (Kel) — pk.calc.kel","title":"Calculate the elimination rate (Kel) — pk.calc.kel","text":"Calculate elimination rate (Kel)","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.kel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the elimination rate (Kel) — pk.calc.kel","text":"","code":"pk.calc.kel(mrt)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.kel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the elimination rate (Kel) — pk.calc.kel","text":"mrt mean residence time kel 1/mrt, confused lambda.z.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.kel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the elimination rate (Kel) — pk.calc.kel","text":"numeric value elimination rate","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.mrt.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the mean residence time (MRT) for single-dose data or linear multiple-dose data. — pk.calc.mrt","title":"Calculate the mean residence time (MRT) for single-dose data or linear multiple-dose data. — pk.calc.mrt","text":"Calculate mean residence time (MRT) single-dose data linear multiple-dose data.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.mrt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the mean residence time (MRT) for single-dose data or linear multiple-dose data. — pk.calc.mrt","text":"","code":"pk.calc.mrt(auc, aumc)  pk.calc.mrt.iv(auc, aumc, duration.dose)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.mrt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the mean residence time (MRT) for single-dose data or linear multiple-dose data. — pk.calc.mrt","text":"auc AUC 0 infinity 0 tau aumc AUMC 0 infinity 0 tau duration.dose duration dose (usually infusion duration IV infusion)","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.mrt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the mean residence time (MRT) for single-dose data or linear multiple-dose data. — pk.calc.mrt","text":"numeric value mean residence time","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.mrt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the mean residence time (MRT) for single-dose data or linear multiple-dose data. — pk.calc.mrt","text":"mrt aumc/auc - duration.dose/2 duration.dose = 0 oral administration.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.mrt.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calculate the mean residence time (MRT) for single-dose data or linear multiple-dose data. — pk.calc.mrt","text":"pk.calc.mrt.iv(): MRT IV infusion","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.mrt.md.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the mean residence time (MRT) for multiple-dose data with nonlinear kinetics. — pk.calc.mrt.md","title":"Calculate the mean residence time (MRT) for multiple-dose data with nonlinear kinetics. — pk.calc.mrt.md","text":"Calculate mean residence time (MRT) multiple-dose data nonlinear kinetics.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.mrt.md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the mean residence time (MRT) for multiple-dose data with nonlinear kinetics. — pk.calc.mrt.md","text":"","code":"pk.calc.mrt.md(auctau, aumctau, aucinf, tau)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.mrt.md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the mean residence time (MRT) for multiple-dose data with nonlinear kinetics. — pk.calc.mrt.md","text":"auctau AUC time 0 end dosing interval (tau). aumctau AUMC time 0 end dosing interval (tau). aucinf AUC time 0 infinity (typically using single-dose data) tau dosing interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.mrt.md.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the mean residence time (MRT) for multiple-dose data with nonlinear kinetics. — pk.calc.mrt.md","text":"mrt.md aumctau/auctau + tau*(aucinf-auctau)/auctau used multiple dosing equal intervals doses. Note aucinf == auctau (assumption linear kinetics), equation becomes single-dose MRT.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ptr.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the peak-to-trough ratio — pk.calc.ptr","title":"Determine the peak-to-trough ratio — pk.calc.ptr","text":"Determine peak--trough ratio","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ptr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the peak-to-trough ratio — pk.calc.ptr","text":"","code":"pk.calc.ptr(cmax, ctrough)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ptr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the peak-to-trough ratio — pk.calc.ptr","text":"cmax maximum observed concentration ctrough last concentration interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ptr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the peak-to-trough ratio — pk.calc.ptr","text":"ratio cmax ctrough (ctrough == 0, NA)","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.ptr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine the peak-to-trough ratio — pk.calc.ptr","text":"ptr cmax/ctrough.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.sparse_auc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate AUC and related parameters using sparse NCA methods — pk.calc.sparse_auc","title":"Calculate AUC and related parameters using sparse NCA methods — pk.calc.sparse_auc","text":"AUC calculated :","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.sparse_auc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate AUC and related parameters using sparse NCA methods — pk.calc.sparse_auc","text":"","code":"pk.calc.sparse_auc(   conc,   time,   subject,   method = NULL,   auc.type = \"AUClast\",   ...,   options = list() )  pk.calc.sparse_auclast(conc, time, subject, ..., options = list())"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.sparse_auc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate AUC and related parameters using sparse NCA methods — pk.calc.sparse_auc","text":"conc Measured concentrations time Time measurement concentrations subject Subject identifiers (may class; may null) method method integration (one 'lin /log ', 'lin-log', 'linear') auc.type type AUC compute.  Choices 'AUCinf', 'AUClast', 'AUCall'. ... functions pk.calc.auxc, values passed pk.calc.auxc options List changes default PKNCA options (see PKNCA.options())","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.sparse_auc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate AUC and related parameters using sparse NCA methods — pk.calc.sparse_auc","text":"$$AUC=\\sum\\limits_{} w_i \\bar{C}_i$$ : \\(AUC\\) estimated area concentration-time curve \\(w_i\\) weight applied concentration time (related time affects, see sparse_auc_weight_linear()) \\(\\bar{C}_i\\) average concentration time ","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.sparse_auc.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calculate AUC and related parameters using sparse NCA methods — pk.calc.sparse_auc","text":"pk.calc.sparse_auclast(): Compute AUClast sparse PK","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.swing.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the PK swing — pk.calc.swing","title":"Determine the PK swing — pk.calc.swing","text":"Determine PK swing","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.swing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the PK swing — pk.calc.swing","text":"","code":"pk.calc.swing(cmax, cmin)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.swing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the PK swing — pk.calc.swing","text":"cmax maximum observed concentration cmin minimum observed concentration","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.swing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the PK swing — pk.calc.swing","text":"swing minimum concentration.  cmin zero, result infinity.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.swing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine the PK swing — pk.calc.swing","text":"swing 100*(cmax - cmin)/cmin.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.thalf.eff.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the effective half-life — pk.calc.thalf.eff","title":"Calculate the effective half-life — pk.calc.thalf.eff","text":"Calculate effective half-life","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.thalf.eff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the effective half-life — pk.calc.thalf.eff","text":"","code":"pk.calc.thalf.eff(mrt)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.thalf.eff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the effective half-life — pk.calc.thalf.eff","text":"mrt mean residence time infinity","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.thalf.eff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the effective half-life — pk.calc.thalf.eff","text":"numeric value effective half-life","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.thalf.eff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the effective half-life — pk.calc.thalf.eff","text":"thalf.eff log(2)*mrt.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.time_above.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine time at or above a set value — pk.calc.time_above","title":"Determine time at or above a set value — pk.calc.time_above","text":"Interpolation performed aligning PKNCA.options(\"auc.method\"). Extrapolation outside measured times yet implemented.  method may changed giving named method argument, well.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.time_above.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine time at or above a set value — pk.calc.time_above","text":"","code":"pk.calc.time_above(conc, time, conc_above, ..., options = list(), check = TRUE)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.time_above.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine time at or above a set value — pk.calc.time_above","text":"conc Measured concentrations time Time measurement concentrations conc_above concentration ... Extra arguments.  Currently, extra argument used method described details section. options List changes default PKNCA options (see PKNCA.options()) check Run assert_conc_time(), clean.conc.blq(), clean.conc.na()?","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.time_above.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine time at or above a set value — pk.calc.time_above","text":"time given concentration","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.time_above.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine time at or above a set value — pk.calc.time_above","text":"'lin /log ', clast conc_above concentrations BLQ , linear used extrapolate BLQ concentration (equivalent AUCall).","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.tlag.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the observed lag time (time before the first concentration above the limit of quantification or above the first concentration in the interval) — pk.calc.tlag","title":"Determine the observed lag time (time before the first concentration above the limit of quantification or above the first concentration in the interval) — pk.calc.tlag","text":"Determine observed lag time (time first concentration limit quantification first concentration interval)","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.tlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the observed lag time (time before the first concentration above the limit of quantification or above the first concentration in the interval) — pk.calc.tlag","text":"","code":"pk.calc.tlag(conc, time)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.tlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the observed lag time (time before the first concentration above the limit of quantification or above the first concentration in the interval) — pk.calc.tlag","text":"conc Measured concentrations time Time measurement concentrations","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.tlag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the observed lag time (time before the first concentration above the limit of quantification or above the first concentration in the interval) — pk.calc.tlag","text":"time associated first increasing concentration","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.tlast.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine time of last observed concentration above the limit of quantification. — pk.calc.tlast","title":"Determine time of last observed concentration above the limit of quantification. — pk.calc.tlast","text":"NA returned conc NA 0.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.tlast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine time of last observed concentration above the limit of quantification. — pk.calc.tlast","text":"","code":"pk.calc.tlast(conc, time, check = TRUE)  pk.calc.tfirst(conc, time, check = TRUE)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.tlast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine time of last observed concentration above the limit of quantification. — pk.calc.tlast","text":"conc Measured concentrations time Time measurement concentrations check Run assert_conc_time()?","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.tlast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine time of last observed concentration above the limit of quantification. — pk.calc.tlast","text":"time last observed concentration measurement","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.tlast.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Determine time of last observed concentration above the limit of quantification. — pk.calc.tlast","text":"pk.calc.tfirst(): Determine first concentration limit quantification.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.tmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine time of maximum observed PK concentration — pk.calc.tmax","title":"Determine time of maximum observed PK concentration — pk.calc.tmax","text":"Input restrictions : conc time must length, time may NAs, NA returned : length conc time 0 conc 0 NA","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.tmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine time of maximum observed PK concentration — pk.calc.tmax","text":"","code":"pk.calc.tmax(conc, time, options = list(), first.tmax = NULL, check = TRUE)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.tmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine time of maximum observed PK concentration — pk.calc.tmax","text":"conc Measured concentrations time Time measurement concentrations options List changes default PKNCA options (see PKNCA.options()) first.tmax time matches maximum concentration, first considered Tmax?  , last considered Tmax. check Run assert_conc_time()?","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.tmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine time of maximum observed PK concentration — pk.calc.tmax","text":"time maximum concentration","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.totdose.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the dose used for calculations — pk.calc.totdose","title":"Extract the dose used for calculations — pk.calc.totdose","text":"Extract dose used calculations","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.totdose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the dose used for calculations — pk.calc.totdose","text":"","code":"pk.calc.totdose(dose)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.totdose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the dose used for calculations — pk.calc.totdose","text":"dose dose administered","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.totdose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the dose used for calculations — pk.calc.totdose","text":"total dose interval","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.vss.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the steady-state volume of distribution (Vss) — pk.calc.vss","title":"Calculate the steady-state volume of distribution (Vss) — pk.calc.vss","text":"Calculate steady-state volume distribution (Vss)","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.vss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the steady-state volume of distribution (Vss) — pk.calc.vss","text":"","code":"pk.calc.vss(cl, mrt)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.vss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the steady-state volume of distribution (Vss) — pk.calc.vss","text":"cl clearance mrt mean residence time","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.vss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the steady-state volume of distribution (Vss) — pk.calc.vss","text":"volume distribution steady-state","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.vss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the steady-state volume of distribution (Vss) — pk.calc.vss","text":"vss cl*mrt.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.vz.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the terminal volume of distribution (Vz) — pk.calc.vz","title":"Calculate the terminal volume of distribution (Vz) — pk.calc.vz","text":"Calculate terminal volume distribution (Vz)","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.vz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the terminal volume of distribution (Vz) — pk.calc.vz","text":"","code":"pk.calc.vz(cl, lambda.z)"},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.vz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the terminal volume of distribution (Vz) — pk.calc.vz","text":"cl clearance (apparent observed clearance) lambda.z elimination rate (units inverse time) extrapolation","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.calc.vz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the terminal volume of distribution (Vz) — pk.calc.vz","text":"vz cl/lambda.z.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.nca.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute NCA parameters for each interval for each subject. — pk.nca","title":"Compute NCA parameters for each interval for each subject. — pk.nca","text":"pk.nca function computes NCA parameters PKNCAdata object. options calculation input data set prior functions (PKNCAconc, PKNCAdose, PKNCAdata).  Options calculations set either PKNCAdata current default options PKNCA.options.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.nca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute NCA parameters for each interval for each subject. — pk.nca","text":"","code":"pk.nca(data, verbose = FALSE)"},{"path":"http://billdenney.github.io/pknca/reference/pk.nca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute NCA parameters for each interval for each subject. — pk.nca","text":"data PKNCAdata object verbose Indicate, message(), current state calculation.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.nca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute NCA parameters for each interval for each subject. — pk.nca","text":"PKNCAresults object.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.nca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute NCA parameters for each interval for each subject. — pk.nca","text":"performing calculations, time results relative start interval.  example, interval starts 168 hours, ends 192 hours, maximum concentration 169 hours, tmax=169-168=1.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.nca.interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute all PK parameters for a single concentration-time data set — pk.nca.interval","title":"Compute all PK parameters for a single concentration-time data set — pk.nca.interval","text":"one subject/time range, compute available PK parameters. internal options set PKNCA.options() prior running.  part changes call function concentration time.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.nca.interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute all PK parameters for a single concentration-time data set — pk.nca.interval","text":"","code":"pk.nca.interval(   conc,   time,   volume,   duration.conc,   dose,   time.dose,   duration.dose,   route,   conc.group = NULL,   time.group = NULL,   volume.group = NULL,   duration.conc.group = NULL,   dose.group = NULL,   time.dose.group = NULL,   duration.dose.group = NULL,   route.group = NULL,   impute_method = NA_character_,   include_half.life = NULL,   exclude_half.life = NULL,   subject,   sparse,   interval,   options = list() )"},{"path":"http://billdenney.github.io/pknca/reference/pk.nca.interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute all PK parameters for a single concentration-time data set — pk.nca.interval","text":"conc Measured concentrations time Time measurement concentrations volume, volume.group volume (mass) concentration measurement current interval data group (typically urine fecal measurements) duration.conc, duration.conc.group duration concentration measurement current interval data group (typically urine fecal measurements) dose, dose.group Dose amount (may scalar vector) current interval data group time.dose, time.dose.group Time dose current interval data group (must length dose dose.group) duration.dose, duration.dose.group duration dose administration current interval data group (typically zero extravascular intravascular bolus nonzero intravascular infusion) route, route.group route dosing current interval data group conc.group concentrations measured group time.group Time concentrations measured group impute_method method use imputation character string include_half.life optional boolean vector concentration measurements include half-life calculation. given, half-life point selection occur. exclude_half.life optional boolean vector concentration measurements exclude half-life calculation. subject Subject identifiers (used sparse calculations) sparse sparse calculations performed (TRUE) dense calculations (FALSE)? interval One row interval definition (see check.interval.specification() define interval. options List changes default PKNCA options (see PKNCA.options())","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.nca.interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute all PK parameters for a single concentration-time data set — pk.nca.interval","text":"data frame start end time along PK parameters interval","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.nca.intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute NCA for multiple intervals — pk.nca.intervals","title":"Compute NCA for multiple intervals — pk.nca.intervals","text":"Compute NCA multiple intervals","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.nca.intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute NCA for multiple intervals — pk.nca.intervals","text":"","code":"pk.nca.intervals(   data_conc,   data_dose,   data_intervals,   sparse,   options,   impute,   verbose = FALSE )"},{"path":"http://billdenney.github.io/pknca/reference/pk.nca.intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute NCA for multiple intervals — pk.nca.intervals","text":"data_conc data.frame tibble standardized column names output prepare_PKNCAconc() data_dose data.frame tibble standardized column names output prepare_PKNCAdose() data_intervals data.frame tibble standardized column names output prepare_PKNCAintervals() sparse sparse calculations performed (TRUE) dense calculations (FALSE)? options List changes default PKNCA options (see PKNCA.options()) impute column name data_intervals use imputation verbose Indicate, message(), current state calculation.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.nca.intervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute NCA for multiple intervals — pk.nca.intervals","text":"data.frame NCA results","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.data.prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up the time to steady-state parameters and return a data frame for use by the tss calculators. — pk.tss.data.prep","title":"Clean up the time to steady-state parameters and return a data frame for use by the tss calculators. — pk.tss.data.prep","text":"Clean time steady-state parameters return data frame use tss calculators.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.data.prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up the time to steady-state parameters and return a data frame for use by the tss calculators. — pk.tss.data.prep","text":"","code":"pk.tss.data.prep(   conc,   time,   subject,   treatment,   subject.dosing,   time.dosing,   options = list(),   conc.blq = NULL,   conc.na = NULL,   check = TRUE,   ... )"},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.data.prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up the time to steady-state parameters and return a data frame for use by the tss calculators. — pk.tss.data.prep","text":"conc Measured concentrations time Time measurement concentrations subject Subject identifiers (used random effect model) treatment Treatment description (missing, subjects assumed treatment) subject.dosing Subject number dosing time.dosing Time dosing options List changes default PKNCA options (see PKNCA.options()) conc.blq See clean.conc.blq() conc.na See clean.conc.na() check Run assert_conc_time()? ... Discarded inputs allow generic calls tss methods.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.data.prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up the time to steady-state parameters and return a data frame for use by the tss calculators. — pk.tss.data.prep","text":"data frame columns concentration, time, subject, treatment.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the time to steady-state (tss) — pk.tss","title":"Compute the time to steady-state (tss) — pk.tss","text":"Compute time steady-state (tss)","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the time to steady-state (tss) — pk.tss","text":"","code":"pk.tss(..., type = c(\"monoexponential\", \"stepwise.linear\"), check = TRUE)"},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the time to steady-state (tss) — pk.tss","text":"... Passed pk.tss.monoexponential() pk.tss.stepwise.linear(). type type Tss calculate, either stepwise.linear monoexponential check See pk.tss.data.prep()","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the time to steady-state (tss) — pk.tss","text":"data frame columns defined pk.tss.monoexponential /pk.tss.stepwise.linear.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.monoexponential.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the time to steady state using nonlinear, mixed-effects modeling of trough concentrations. — pk.tss.monoexponential","title":"Compute the time to steady state using nonlinear, mixed-effects modeling of trough concentrations. — pk.tss.monoexponential","text":"Trough concentrations selected concentrations time dosing. exponential curve fit data different magnitude treatment (factor) random steady-state concentration time stead-state subject (see random.effects argument).","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.monoexponential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the time to steady state using nonlinear, mixed-effects modeling of trough concentrations. — pk.tss.monoexponential","text":"","code":"pk.tss.monoexponential(   ...,   tss.fraction = 0.9,   output = c(\"population\", \"popind\", \"individual\", \"single\"),   check = TRUE,   verbose = FALSE )"},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.monoexponential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the time to steady state using nonlinear, mixed-effects modeling of trough concentrations. — pk.tss.monoexponential","text":"... See pk.tss.data.prep() tss.fraction fraction steady-state required calling steady-state output types outputs produced? population population estimate time steady-state (nlme model), popind individual estimate (nlme model), individual fits individual separately gnls model (requires one individual; use single one individual), single fits data single gnls model. check See pk.tss.data.prep(). verbose Describe models run, show convergence model (passed nlme function), additional details running.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.monoexponential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the time to steady state using nonlinear, mixed-effects modeling of trough concentrations. — pk.tss.monoexponential","text":"scalar float first time steady-state achieved NA observed.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.monoexponential.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the time to steady state using nonlinear, mixed-effects modeling of trough concentrations. — pk.tss.monoexponential","text":"Maganti, L., Panebianco, D.L. & Maes, .L. Evaluation Methods Estimating Time Steady State Examples Phase 1 Studies. AAPS J 10, 141–147 (2008). https://doi.org/10.1208/s12248-008-9014-y","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.monoexponential.individual.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to estimate individual and single outputs for monoexponential time to steady-state. — pk.tss.monoexponential.individual","title":"A helper function to estimate individual and single outputs for monoexponential time to steady-state. — pk.tss.monoexponential.individual","text":"function intended called directly.  Please use pk.tss.monoexponential.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.monoexponential.individual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to estimate individual and single outputs for monoexponential time to steady-state. — pk.tss.monoexponential.individual","text":"","code":"pk.tss.monoexponential.individual(   data,   output = c(\"individual\", \"single\"),   verbose = FALSE )"},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.monoexponential.individual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to estimate individual and single outputs for monoexponential time to steady-state. — pk.tss.monoexponential.individual","text":"data data frame prepared pk.tss.data.prep().  must contain least columns subject, time, conc, tss.constant. output character vector requesting output types. verbose Show verbose output.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.monoexponential.individual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function to estimate individual and single outputs for monoexponential time to steady-state. — pk.tss.monoexponential.individual","text":"data frame either one row (population output provided) one row per subject (popind provided).  columns named tss.monoexponential.population /tss.monoexponential.popind.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.monoexponential.individual.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A helper function to estimate individual and single outputs for monoexponential time to steady-state. — pk.tss.monoexponential.individual","text":"model converges, tss.monoexponential.single /tss.monoexponential.individual column set NA.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.monoexponential.population.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to estimate population and popind outputs for monoexponential time to steady-state. — pk.tss.monoexponential.population","title":"A helper function to estimate population and popind outputs for monoexponential time to steady-state. — pk.tss.monoexponential.population","text":"function intended called directly.  Please use pk.tss.monoexponential.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.monoexponential.population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to estimate population and popind outputs for monoexponential time to steady-state. — pk.tss.monoexponential.population","text":"","code":"pk.tss.monoexponential.population(   data,   output = c(\"population\", \"popind\"),   verbose = FALSE )"},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.monoexponential.population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to estimate population and popind outputs for monoexponential time to steady-state. — pk.tss.monoexponential.population","text":"data data frame prepared pk.tss.data.prep().  must contain least columns subject, time, conc, tss.constant. output character vector requesting output types. verbose Show verbose output.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.monoexponential.population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function to estimate population and popind outputs for monoexponential time to steady-state. — pk.tss.monoexponential.population","text":"data frame either one row (population output provided) one row per subject (popind provided).  columns named tss.monoexponential.population /tss.monoexponential.popind.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.monoexponential.population.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A helper function to estimate population and popind outputs for monoexponential time to steady-state. — pk.tss.monoexponential.population","text":"model converges, tss.monoexponential.population column set NA. best model include random effect subject Tss tss.monoexponential.popind column output set NA.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.stepwise.linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the time to steady state using stepwise test of linear trend — pk.tss.stepwise.linear","title":"Compute the time to steady state using stepwise test of linear trend — pk.tss.stepwise.linear","text":"linear slope fit data find becomes non-significant.  Note less preferred pk.tss.monoexponential due fact time subjects performance test changes (see reference).","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.stepwise.linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the time to steady state using stepwise test of linear trend — pk.tss.stepwise.linear","text":"","code":"pk.tss.stepwise.linear(   ...,   min.points = 3,   level = 0.95,   verbose = FALSE,   check = TRUE )"},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.stepwise.linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the time to steady state using stepwise test of linear trend — pk.tss.stepwise.linear","text":"... See pk.tss.data.prep() min.points minimum number points required fit level confidence level required assessment steady-state verbose Describe models run, show convergence model (passed nlme function), additional details running. check See pk.tss.data.prep()","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.stepwise.linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the time to steady state using stepwise test of linear trend — pk.tss.stepwise.linear","text":"scalar float first time steady-state achieved NA observed.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.stepwise.linear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the time to steady state using stepwise test of linear trend — pk.tss.stepwise.linear","text":"model fit different magnitude treatment (factor, given) random slope subject (given).  minimum min.points required fit model.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk.tss.stepwise.linear.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the time to steady state using stepwise test of linear trend — pk.tss.stepwise.linear","text":"Maganti L, Panebianco DL, Maes AL.  Evaluation Methods Estimating Time Steady State Examples Phase 1 Studies. AAPS Journal 10(1):141-7. doi:10.1208/s12248-008-9014-y","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pk_nca_result_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert the grouping info and list of results for each group into a results data.frame — pk_nca_result_to_df","title":"Convert the grouping info and list of results for each group into a results data.frame — pk_nca_result_to_df","text":"Convert grouping info list results group results data.frame","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk_nca_result_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert the grouping info and list of results for each group into a results data.frame — pk_nca_result_to_df","text":"","code":"pk_nca_result_to_df(group_info, result)"},{"path":"http://billdenney.github.io/pknca/reference/pk_nca_result_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert the grouping info and list of results for each group into a results data.frame — pk_nca_result_to_df","text":"group_info data.frame grouping columns result list data.frames results NCA parameter calculations","code":""},{"path":"http://billdenney.github.io/pknca/reference/pk_nca_result_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert the grouping info and list of results for each group into a results data.frame — pk_nca_result_to_df","text":"data.frame group_info result combined, warnings filtered , results unnested.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pknca_find_units_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Find NCA parameters with a given unit type — pknca_find_units_param","title":"Find NCA parameters with a given unit type — pknca_find_units_param","text":"Find NCA parameters given unit type","code":""},{"path":"http://billdenney.github.io/pknca/reference/pknca_find_units_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find NCA parameters with a given unit type — pknca_find_units_param","text":"","code":"pknca_find_units_param(unit_type)"},{"path":"http://billdenney.github.io/pknca/reference/pknca_find_units_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find NCA parameters with a given unit type — pknca_find_units_param","text":"unit_type type unit assigned add.interval.col","code":""},{"path":"http://billdenney.github.io/pknca/reference/pknca_find_units_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find NCA parameters with a given unit type — pknca_find_units_param","text":"character vector parameters given unit type","code":""},{"path":"http://billdenney.github.io/pknca/reference/pknca_unit_conversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform unit conversion (if possible) on PKNCA results — pknca_unit_conversion","title":"Perform unit conversion (if possible) on PKNCA results — pknca_unit_conversion","text":"Perform unit conversion (possible) PKNCA results","code":""},{"path":"http://billdenney.github.io/pknca/reference/pknca_unit_conversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform unit conversion (if possible) on PKNCA results — pknca_unit_conversion","text":"","code":"pknca_unit_conversion(result, units)"},{"path":"http://billdenney.github.io/pknca/reference/pknca_unit_conversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform unit conversion (if possible) on PKNCA results — pknca_unit_conversion","text":"result results data.frame units unit conversion table","code":""},{"path":"http://billdenney.github.io/pknca/reference/pknca_unit_conversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform unit conversion (if possible) on PKNCA results — pknca_unit_conversion","text":"result table units converted","code":""},{"path":"http://billdenney.github.io/pknca/reference/pknca_units_add_paren.html","id":null,"dir":"Reference","previous_headings":"","what":"Add parentheses to a unit value, if needed — pknca_units_add_paren","title":"Add parentheses to a unit value, if needed — pknca_units_add_paren","text":"Add parentheses unit value, needed","code":""},{"path":"http://billdenney.github.io/pknca/reference/pknca_units_add_paren.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add parentheses to a unit value, if needed — pknca_units_add_paren","text":"","code":"pknca_units_add_paren(unit)"},{"path":"http://billdenney.github.io/pknca/reference/pknca_units_add_paren.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add parentheses to a unit value, if needed — pknca_units_add_paren","text":"unit text unit","code":""},{"path":"http://billdenney.github.io/pknca/reference/pknca_units_add_paren.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add parentheses to a unit value, if needed — pknca_units_add_paren","text":"unit parentheses around , needed","code":""},{"path":"http://billdenney.github.io/pknca/reference/pknca_units_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a unit assignment and conversion table — pknca_units_table","title":"Create a unit assignment and conversion table — pknca_units_table","text":"data.frame typically used units argument PKNCAdata(). unit given, units derived unit NA.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pknca_units_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a unit assignment and conversion table — pknca_units_table","text":"","code":"pknca_units_table(   concu,   doseu,   amountu,   timeu,   concu_pref = NULL,   doseu_pref = NULL,   amountu_pref = NULL,   timeu_pref = NULL,   conversions = data.frame() )"},{"path":"http://billdenney.github.io/pknca/reference/pknca_units_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a unit assignment and conversion table — pknca_units_table","text":"concu, doseu, amountu, timeu Units concentration, dose, amount, time source data concu_pref, doseu_pref, amountu_pref, timeu_pref Preferred units reporting; conversions automatically. conversions optional data.frame columns c(\"PPORRESU\", \"PPSTRESU\", \"conversion_factor\") original calculation units, standardized units, conversion factor multiply initial value get standardized value.  argument overrides preferred unit conversions concu_pref, doseu_pref, amountu_pref, timeu_pref.","code":""},{"path":"http://billdenney.github.io/pknca/reference/pknca_units_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a unit assignment and conversion table — pknca_units_table","text":"unit conversion table columns \"PPTESTCD\" \"PPORRESU\" conversions given, adding \"PPSTRESU\" \"conversion_factor\" conversions given.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/pknca_units_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a unit assignment and conversion table — pknca_units_table","text":"","code":"pknca_units_table() # only parameters that are unitless #>     PPORRESU             PPTESTCD #> 1   unitless            r.squared #> 2   unitless        adj.r.squared #> 3   fraction                    f #> 4   fraction                  ptr #> 5   fraction                   fe #> 6   fraction           span.ratio #> 7          %             deg.fluc #> 8          %                swing #> 9          %       aucivpbextlast #> 10         %        aucivpbextall #> 11         %   aucivpbextint.last #> 12         %    aucivpbextint.all #> 13         %    aucivpbextinf.obs #> 14         %   aucivpbextinf.pred #> 15         %          aucpext.obs #> 16         %         aucpext.pred #> 17     count           count_conc #> 18     count        sparse_auc_df #> 19     count    lambda.z.n.points #> 20      <NA>                start #> 21      <NA>                  end #> 22      <NA>                 tmax #> 23      <NA>                tlast #> 24      <NA>               tfirst #> 25      <NA>             mrt.last #> 26      <NA>          mrt.iv.last #> 27      <NA>                 tlag #> 28      <NA>           time_above #> 29      <NA>            half.life #> 30      <NA>  lambda.z.time.first #> 31      <NA>       thalf.eff.last #> 32      <NA>    thalf.eff.iv.last #> 33      <NA>              mrt.obs #> 34      <NA>             mrt.pred #> 35      <NA>           mrt.iv.obs #> 36      <NA>          mrt.iv.pred #> 37      <NA>           mrt.md.obs #> 38      <NA>          mrt.md.pred #> 39      <NA>        thalf.eff.obs #> 40      <NA>       thalf.eff.pred #> 41      <NA>     thalf.eff.iv.obs #> 42      <NA>    thalf.eff.iv.pred #> 43      <NA>             lambda.z #> 44      <NA>             kel.last #> 45      <NA>          kel.iv.last #> 46      <NA>              kel.obs #> 47      <NA>             kel.pred #> 48      <NA>           kel.iv.obs #> 49      <NA>          kel.iv.pred #> 50      <NA>                   c0 #> 51      <NA>                 cmax #> 52      <NA>                 cmin #> 53      <NA>            clast.obs #> 54      <NA>                  cav #> 55      <NA>         cav.int.last #> 56      <NA>          cav.int.all #> 57      <NA>              ctrough #> 58      <NA>               cstart #> 59      <NA>                 ceoi #> 60      <NA>           clast.pred #> 61      <NA>      cav.int.inf.obs #> 62      <NA>     cav.int.inf.pred #> 63      <NA>                   ae #> 64      <NA>              totdose #> 65      <NA>              cmax.dn #> 66      <NA>              cmin.dn #> 67      <NA>         clast.obs.dn #> 68      <NA>        clast.pred.dn #> 69      <NA>               cav.dn #> 70      <NA>           ctrough.dn #> 71      <NA>             vss.last #> 72      <NA>          vss.iv.last #> 73      <NA>               vz.obs #> 74      <NA>              vz.pred #> 75      <NA>              vss.obs #> 76      <NA>             vss.pred #> 77      <NA>           vss.iv.obs #> 78      <NA>          vss.iv.pred #> 79      <NA>           vss.md.obs #> 80      <NA>          vss.md.pred #> 81      <NA>              auclast #> 82      <NA>               aucall #> 83      <NA>          aucint.last #> 84      <NA>     aucint.last.dose #> 85      <NA>           aucint.all #> 86      <NA>      aucint.all.dose #> 87      <NA> aucabove.predose.all #> 88      <NA>  aucabove.trough.all #> 89      <NA>       sparse_auclast #> 90      <NA>        sparse_auc_se #> 91      <NA>            aucivlast #> 92      <NA>             aucivall #> 93      <NA>        aucivint.last #> 94      <NA>         aucivint.all #> 95      <NA>           aucinf.obs #> 96      <NA>          aucinf.pred #> 97      <NA>       aucint.inf.obs #> 98      <NA>  aucint.inf.obs.dose #> 99      <NA>      aucint.inf.pred #> 100     <NA> aucint.inf.pred.dose #> 101     <NA>         aucivinf.obs #> 102     <NA>        aucivinf.pred #> 103     <NA>             aumclast #> 104     <NA>              aumcall #> 105     <NA>          aumcinf.obs #> 106     <NA>         aumcinf.pred #> 107     <NA>           auclast.dn #> 108     <NA>            aucall.dn #> 109     <NA>        aucinf.obs.dn #> 110     <NA>       aucinf.pred.dn #> 111     <NA>          aumclast.dn #> 112     <NA>           aumcall.dn #> 113     <NA>       aumcinf.obs.dn #> 114     <NA>      aumcinf.pred.dn #> 115     <NA>              cl.last #> 116     <NA>               cl.all #> 117     <NA>               cl.obs #> 118     <NA>              cl.pred #> 119     <NA>             clr.last #> 120     <NA>              clr.obs #> 121     <NA>             clr.pred pknca_units_table(   concu=\"ng/mL\", doseu=\"mg/kg\", amountu=\"mg\", timeu=\"hr\" ) #>                 PPORRESU             PPTESTCD #> 1               unitless            r.squared #> 2               unitless        adj.r.squared #> 3               fraction                    f #> 4               fraction                  ptr #> 5               fraction                   fe #> 6               fraction           span.ratio #> 7                      %             deg.fluc #> 8                      %                swing #> 9                      %       aucivpbextlast #> 10                     %        aucivpbextall #> 11                     %   aucivpbextint.last #> 12                     %    aucivpbextint.all #> 13                     %    aucivpbextinf.obs #> 14                     %   aucivpbextinf.pred #> 15                     %          aucpext.obs #> 16                     %         aucpext.pred #> 17                 count           count_conc #> 18                 count        sparse_auc_df #> 19                 count    lambda.z.n.points #> 20                    hr                start #> 21                    hr                  end #> 22                    hr                 tmax #> 23                    hr                tlast #> 24                    hr               tfirst #> 25                    hr             mrt.last #> 26                    hr          mrt.iv.last #> 27                    hr                 tlag #> 28                    hr           time_above #> 29                    hr            half.life #> 30                    hr  lambda.z.time.first #> 31                    hr       thalf.eff.last #> 32                    hr    thalf.eff.iv.last #> 33                    hr              mrt.obs #> 34                    hr             mrt.pred #> 35                    hr           mrt.iv.obs #> 36                    hr          mrt.iv.pred #> 37                    hr           mrt.md.obs #> 38                    hr          mrt.md.pred #> 39                    hr        thalf.eff.obs #> 40                    hr       thalf.eff.pred #> 41                    hr     thalf.eff.iv.obs #> 42                    hr    thalf.eff.iv.pred #> 43                  1/hr             lambda.z #> 44                  1/hr             kel.last #> 45                  1/hr          kel.iv.last #> 46                  1/hr              kel.obs #> 47                  1/hr             kel.pred #> 48                  1/hr           kel.iv.obs #> 49                  1/hr          kel.iv.pred #> 50                 ng/mL                   c0 #> 51                 ng/mL                 cmax #> 52                 ng/mL                 cmin #> 53                 ng/mL            clast.obs #> 54                 ng/mL                  cav #> 55                 ng/mL         cav.int.last #> 56                 ng/mL          cav.int.all #> 57                 ng/mL              ctrough #> 58                 ng/mL               cstart #> 59                 ng/mL                 ceoi #> 60                 ng/mL           clast.pred #> 61                 ng/mL      cav.int.inf.obs #> 62                 ng/mL     cav.int.inf.pred #> 63                    mg                   ae #> 64                 mg/kg              totdose #> 65       (ng/mL)/(mg/kg)              cmax.dn #> 66       (ng/mL)/(mg/kg)              cmin.dn #> 67       (ng/mL)/(mg/kg)         clast.obs.dn #> 68       (ng/mL)/(mg/kg)        clast.pred.dn #> 69       (ng/mL)/(mg/kg)               cav.dn #> 70       (ng/mL)/(mg/kg)           ctrough.dn #> 71       (mg/kg)/(ng/mL)             vss.last #> 72       (mg/kg)/(ng/mL)          vss.iv.last #> 73       (mg/kg)/(ng/mL)               vz.obs #> 74       (mg/kg)/(ng/mL)              vz.pred #> 75       (mg/kg)/(ng/mL)              vss.obs #> 76       (mg/kg)/(ng/mL)             vss.pred #> 77       (mg/kg)/(ng/mL)           vss.iv.obs #> 78       (mg/kg)/(ng/mL)          vss.iv.pred #> 79       (mg/kg)/(ng/mL)           vss.md.obs #> 80       (mg/kg)/(ng/mL)          vss.md.pred #> 81              hr*ng/mL              auclast #> 82              hr*ng/mL               aucall #> 83              hr*ng/mL          aucint.last #> 84              hr*ng/mL     aucint.last.dose #> 85              hr*ng/mL           aucint.all #> 86              hr*ng/mL      aucint.all.dose #> 87              hr*ng/mL aucabove.predose.all #> 88              hr*ng/mL  aucabove.trough.all #> 89              hr*ng/mL       sparse_auclast #> 90              hr*ng/mL        sparse_auc_se #> 91              hr*ng/mL            aucivlast #> 92              hr*ng/mL             aucivall #> 93              hr*ng/mL        aucivint.last #> 94              hr*ng/mL         aucivint.all #> 95              hr*ng/mL           aucinf.obs #> 96              hr*ng/mL          aucinf.pred #> 97              hr*ng/mL       aucint.inf.obs #> 98              hr*ng/mL  aucint.inf.obs.dose #> 99              hr*ng/mL      aucint.inf.pred #> 100             hr*ng/mL aucint.inf.pred.dose #> 101             hr*ng/mL         aucivinf.obs #> 102             hr*ng/mL        aucivinf.pred #> 103           hr^2*ng/mL             aumclast #> 104           hr^2*ng/mL              aumcall #> 105           hr^2*ng/mL          aumcinf.obs #> 106           hr^2*ng/mL         aumcinf.pred #> 107   (hr*ng/mL)/(mg/kg)           auclast.dn #> 108   (hr*ng/mL)/(mg/kg)            aucall.dn #> 109   (hr*ng/mL)/(mg/kg)        aucinf.obs.dn #> 110   (hr*ng/mL)/(mg/kg)       aucinf.pred.dn #> 111 (hr^2*ng/mL)/(mg/kg)          aumclast.dn #> 112 (hr^2*ng/mL)/(mg/kg)           aumcall.dn #> 113 (hr^2*ng/mL)/(mg/kg)       aumcinf.obs.dn #> 114 (hr^2*ng/mL)/(mg/kg)      aumcinf.pred.dn #> 115   (mg/kg)/(hr*ng/mL)              cl.last #> 116   (mg/kg)/(hr*ng/mL)               cl.all #> 117   (mg/kg)/(hr*ng/mL)               cl.obs #> 118   (mg/kg)/(hr*ng/mL)              cl.pred #> 119        mg/(hr*ng/mL)             clr.last #> 120        mg/(hr*ng/mL)              clr.obs #> 121        mg/(hr*ng/mL)             clr.pred pknca_units_table(   concu=\"ng/mL\", doseu=\"mg/kg\", amountu=\"mg\", timeu=\"hr\",   # Convert clearance and volume units to more understandable units with   # automatic unit conversion   conversions=data.frame(     PPORRESU=c(\"(mg/kg)/(hr*ng/mL)\", \"(mg/kg)/(ng/mL)\"),     PPSTRESU=c(\"mL/hr/kg\", \"mL/kg\")   ) ) #>                 PPORRESU             PPTESTCD             PPSTRESU #> 1               unitless            r.squared             unitless #> 2               unitless        adj.r.squared             unitless #> 3               fraction                    f             fraction #> 4               fraction                  ptr             fraction #> 5               fraction                   fe             fraction #> 6               fraction           span.ratio             fraction #> 7                      %             deg.fluc                    % #> 8                      %                swing                    % #> 9                      %       aucivpbextlast                    % #> 10                     %        aucivpbextall                    % #> 11                     %   aucivpbextint.last                    % #> 12                     %    aucivpbextint.all                    % #> 13                     %    aucivpbextinf.obs                    % #> 14                     %   aucivpbextinf.pred                    % #> 15                     %          aucpext.obs                    % #> 16                     %         aucpext.pred                    % #> 17                 count           count_conc                count #> 18                 count        sparse_auc_df                count #> 19                 count    lambda.z.n.points                count #> 20                    hr                start                   hr #> 21                    hr                  end                   hr #> 22                    hr                 tmax                   hr #> 23                    hr                tlast                   hr #> 24                    hr               tfirst                   hr #> 25                    hr             mrt.last                   hr #> 26                    hr          mrt.iv.last                   hr #> 27                    hr                 tlag                   hr #> 28                    hr           time_above                   hr #> 29                    hr            half.life                   hr #> 30                    hr  lambda.z.time.first                   hr #> 31                    hr       thalf.eff.last                   hr #> 32                    hr    thalf.eff.iv.last                   hr #> 33                    hr              mrt.obs                   hr #> 34                    hr             mrt.pred                   hr #> 35                    hr           mrt.iv.obs                   hr #> 36                    hr          mrt.iv.pred                   hr #> 37                    hr           mrt.md.obs                   hr #> 38                    hr          mrt.md.pred                   hr #> 39                    hr        thalf.eff.obs                   hr #> 40                    hr       thalf.eff.pred                   hr #> 41                    hr     thalf.eff.iv.obs                   hr #> 42                    hr    thalf.eff.iv.pred                   hr #> 43                  1/hr             lambda.z                 1/hr #> 44                  1/hr             kel.last                 1/hr #> 45                  1/hr          kel.iv.last                 1/hr #> 46                  1/hr              kel.obs                 1/hr #> 47                  1/hr             kel.pred                 1/hr #> 48                  1/hr           kel.iv.obs                 1/hr #> 49                  1/hr          kel.iv.pred                 1/hr #> 50                 ng/mL                   c0                ng/mL #> 51                 ng/mL                 cmax                ng/mL #> 52                 ng/mL                 cmin                ng/mL #> 53                 ng/mL            clast.obs                ng/mL #> 54                 ng/mL                  cav                ng/mL #> 55                 ng/mL         cav.int.last                ng/mL #> 56                 ng/mL          cav.int.all                ng/mL #> 57                 ng/mL              ctrough                ng/mL #> 58                 ng/mL               cstart                ng/mL #> 59                 ng/mL                 ceoi                ng/mL #> 60                 ng/mL           clast.pred                ng/mL #> 61                 ng/mL      cav.int.inf.obs                ng/mL #> 62                 ng/mL     cav.int.inf.pred                ng/mL #> 63                    mg                   ae                   mg #> 64                 mg/kg              totdose                mg/kg #> 65       (ng/mL)/(mg/kg)              cmax.dn      (ng/mL)/(mg/kg) #> 66       (ng/mL)/(mg/kg)              cmin.dn      (ng/mL)/(mg/kg) #> 67       (ng/mL)/(mg/kg)         clast.obs.dn      (ng/mL)/(mg/kg) #> 68       (ng/mL)/(mg/kg)        clast.pred.dn      (ng/mL)/(mg/kg) #> 69       (ng/mL)/(mg/kg)               cav.dn      (ng/mL)/(mg/kg) #> 70       (ng/mL)/(mg/kg)           ctrough.dn      (ng/mL)/(mg/kg) #> 71       (mg/kg)/(ng/mL)             vss.last                mL/kg #> 72       (mg/kg)/(ng/mL)          vss.iv.last                mL/kg #> 73       (mg/kg)/(ng/mL)               vz.obs                mL/kg #> 74       (mg/kg)/(ng/mL)              vz.pred                mL/kg #> 75       (mg/kg)/(ng/mL)              vss.obs                mL/kg #> 76       (mg/kg)/(ng/mL)             vss.pred                mL/kg #> 77       (mg/kg)/(ng/mL)           vss.iv.obs                mL/kg #> 78       (mg/kg)/(ng/mL)          vss.iv.pred                mL/kg #> 79       (mg/kg)/(ng/mL)           vss.md.obs                mL/kg #> 80       (mg/kg)/(ng/mL)          vss.md.pred                mL/kg #> 81              hr*ng/mL              auclast             hr*ng/mL #> 82              hr*ng/mL               aucall             hr*ng/mL #> 83              hr*ng/mL          aucint.last             hr*ng/mL #> 84              hr*ng/mL     aucint.last.dose             hr*ng/mL #> 85              hr*ng/mL           aucint.all             hr*ng/mL #> 86              hr*ng/mL      aucint.all.dose             hr*ng/mL #> 87              hr*ng/mL aucabove.predose.all             hr*ng/mL #> 88              hr*ng/mL  aucabove.trough.all             hr*ng/mL #> 89              hr*ng/mL       sparse_auclast             hr*ng/mL #> 90              hr*ng/mL        sparse_auc_se             hr*ng/mL #> 91              hr*ng/mL            aucivlast             hr*ng/mL #> 92              hr*ng/mL             aucivall             hr*ng/mL #> 93              hr*ng/mL        aucivint.last             hr*ng/mL #> 94              hr*ng/mL         aucivint.all             hr*ng/mL #> 95              hr*ng/mL           aucinf.obs             hr*ng/mL #> 96              hr*ng/mL          aucinf.pred             hr*ng/mL #> 97              hr*ng/mL       aucint.inf.obs             hr*ng/mL #> 98              hr*ng/mL  aucint.inf.obs.dose             hr*ng/mL #> 99              hr*ng/mL      aucint.inf.pred             hr*ng/mL #> 100             hr*ng/mL aucint.inf.pred.dose             hr*ng/mL #> 101             hr*ng/mL         aucivinf.obs             hr*ng/mL #> 102             hr*ng/mL        aucivinf.pred             hr*ng/mL #> 103           hr^2*ng/mL             aumclast           hr^2*ng/mL #> 104           hr^2*ng/mL              aumcall           hr^2*ng/mL #> 105           hr^2*ng/mL          aumcinf.obs           hr^2*ng/mL #> 106           hr^2*ng/mL         aumcinf.pred           hr^2*ng/mL #> 107   (hr*ng/mL)/(mg/kg)           auclast.dn   (hr*ng/mL)/(mg/kg) #> 108   (hr*ng/mL)/(mg/kg)            aucall.dn   (hr*ng/mL)/(mg/kg) #> 109   (hr*ng/mL)/(mg/kg)        aucinf.obs.dn   (hr*ng/mL)/(mg/kg) #> 110   (hr*ng/mL)/(mg/kg)       aucinf.pred.dn   (hr*ng/mL)/(mg/kg) #> 111 (hr^2*ng/mL)/(mg/kg)          aumclast.dn (hr^2*ng/mL)/(mg/kg) #> 112 (hr^2*ng/mL)/(mg/kg)           aumcall.dn (hr^2*ng/mL)/(mg/kg) #> 113 (hr^2*ng/mL)/(mg/kg)       aumcinf.obs.dn (hr^2*ng/mL)/(mg/kg) #> 114 (hr^2*ng/mL)/(mg/kg)      aumcinf.pred.dn (hr^2*ng/mL)/(mg/kg) #> 115   (mg/kg)/(hr*ng/mL)              cl.last             mL/hr/kg #> 116   (mg/kg)/(hr*ng/mL)               cl.all             mL/hr/kg #> 117   (mg/kg)/(hr*ng/mL)               cl.obs             mL/hr/kg #> 118   (mg/kg)/(hr*ng/mL)              cl.pred             mL/hr/kg #> 119        mg/(hr*ng/mL)             clr.last        mg/(hr*ng/mL) #> 120        mg/(hr*ng/mL)              clr.obs        mg/(hr*ng/mL) #> 121        mg/(hr*ng/mL)             clr.pred        mg/(hr*ng/mL) #>     conversion_factor #> 1               1e+00 #> 2               1e+00 #> 3               1e+00 #> 4               1e+00 #> 5               1e+00 #> 6               1e+00 #> 7               1e+00 #> 8               1e+00 #> 9               1e+00 #> 10              1e+00 #> 11              1e+00 #> 12              1e+00 #> 13              1e+00 #> 14              1e+00 #> 15              1e+00 #> 16              1e+00 #> 17              1e+00 #> 18              1e+00 #> 19              1e+00 #> 20              1e+00 #> 21              1e+00 #> 22              1e+00 #> 23              1e+00 #> 24              1e+00 #> 25              1e+00 #> 26              1e+00 #> 27              1e+00 #> 28              1e+00 #> 29              1e+00 #> 30              1e+00 #> 31              1e+00 #> 32              1e+00 #> 33              1e+00 #> 34              1e+00 #> 35              1e+00 #> 36              1e+00 #> 37              1e+00 #> 38              1e+00 #> 39              1e+00 #> 40              1e+00 #> 41              1e+00 #> 42              1e+00 #> 43              1e+00 #> 44              1e+00 #> 45              1e+00 #> 46              1e+00 #> 47              1e+00 #> 48              1e+00 #> 49              1e+00 #> 50              1e+00 #> 51              1e+00 #> 52              1e+00 #> 53              1e+00 #> 54              1e+00 #> 55              1e+00 #> 56              1e+00 #> 57              1e+00 #> 58              1e+00 #> 59              1e+00 #> 60              1e+00 #> 61              1e+00 #> 62              1e+00 #> 63              1e+00 #> 64              1e+00 #> 65              1e+00 #> 66              1e+00 #> 67              1e+00 #> 68              1e+00 #> 69              1e+00 #> 70              1e+00 #> 71              1e+06 #> 72              1e+06 #> 73              1e+06 #> 74              1e+06 #> 75              1e+06 #> 76              1e+06 #> 77              1e+06 #> 78              1e+06 #> 79              1e+06 #> 80              1e+06 #> 81              1e+00 #> 82              1e+00 #> 83              1e+00 #> 84              1e+00 #> 85              1e+00 #> 86              1e+00 #> 87              1e+00 #> 88              1e+00 #> 89              1e+00 #> 90              1e+00 #> 91              1e+00 #> 92              1e+00 #> 93              1e+00 #> 94              1e+00 #> 95              1e+00 #> 96              1e+00 #> 97              1e+00 #> 98              1e+00 #> 99              1e+00 #> 100             1e+00 #> 101             1e+00 #> 102             1e+00 #> 103             1e+00 #> 104             1e+00 #> 105             1e+00 #> 106             1e+00 #> 107             1e+00 #> 108             1e+00 #> 109             1e+00 #> 110             1e+00 #> 111             1e+00 #> 112             1e+00 #> 113             1e+00 #> 114             1e+00 #> 115             1e+06 #> 116             1e+06 #> 117             1e+06 #> 118             1e+06 #> 119             1e+00 #> 120             1e+00 #> 121             1e+00 pknca_units_table(   concu=\"mg/L\", doseu=\"mg/kg\", amountu=\"mg\", timeu=\"hr\",   # Convert clearance and volume units to molar units (assuming   conversions=data.frame(     PPORRESU=c(\"mg/L\", \"(mg/kg)/(hr*ng/mL)\", \"(mg/kg)/(ng/mL)\"),     PPSTRESU=c(\"mmol/L\", \"mL/hr/kg\", \"mL/kg\"),     # Manual conversion of concentration units from ng/mL to mmol/L (assuming     # a molecular weight of 138.121 g/mol)     conversion_factor=c(1/138.121, NA, NA)   ) ) #> Warning: The following unit conversions were supplied but do not match any units to convert: '(mg/kg)/(hr*ng/mL)', '(mg/kg)/(ng/mL)' #>                PPORRESU             PPTESTCD            PPSTRESU #> 1              unitless            r.squared            unitless #> 2              unitless        adj.r.squared            unitless #> 3              fraction                    f            fraction #> 4              fraction                  ptr            fraction #> 5              fraction                   fe            fraction #> 6              fraction           span.ratio            fraction #> 7                     %             deg.fluc                   % #> 8                     %                swing                   % #> 9                     %       aucivpbextlast                   % #> 10                    %        aucivpbextall                   % #> 11                    %   aucivpbextint.last                   % #> 12                    %    aucivpbextint.all                   % #> 13                    %    aucivpbextinf.obs                   % #> 14                    %   aucivpbextinf.pred                   % #> 15                    %          aucpext.obs                   % #> 16                    %         aucpext.pred                   % #> 17                count           count_conc               count #> 18                count        sparse_auc_df               count #> 19                count    lambda.z.n.points               count #> 20                   hr                start                  hr #> 21                   hr                  end                  hr #> 22                   hr                 tmax                  hr #> 23                   hr                tlast                  hr #> 24                   hr               tfirst                  hr #> 25                   hr             mrt.last                  hr #> 26                   hr          mrt.iv.last                  hr #> 27                   hr                 tlag                  hr #> 28                   hr           time_above                  hr #> 29                   hr            half.life                  hr #> 30                   hr  lambda.z.time.first                  hr #> 31                   hr       thalf.eff.last                  hr #> 32                   hr    thalf.eff.iv.last                  hr #> 33                   hr              mrt.obs                  hr #> 34                   hr             mrt.pred                  hr #> 35                   hr           mrt.iv.obs                  hr #> 36                   hr          mrt.iv.pred                  hr #> 37                   hr           mrt.md.obs                  hr #> 38                   hr          mrt.md.pred                  hr #> 39                   hr        thalf.eff.obs                  hr #> 40                   hr       thalf.eff.pred                  hr #> 41                   hr     thalf.eff.iv.obs                  hr #> 42                   hr    thalf.eff.iv.pred                  hr #> 43                 1/hr             lambda.z                1/hr #> 44                 1/hr             kel.last                1/hr #> 45                 1/hr          kel.iv.last                1/hr #> 46                 1/hr              kel.obs                1/hr #> 47                 1/hr             kel.pred                1/hr #> 48                 1/hr           kel.iv.obs                1/hr #> 49                 1/hr          kel.iv.pred                1/hr #> 50                 mg/L                   c0              mmol/L #> 51                 mg/L                 cmax              mmol/L #> 52                 mg/L                 cmin              mmol/L #> 53                 mg/L            clast.obs              mmol/L #> 54                 mg/L                  cav              mmol/L #> 55                 mg/L         cav.int.last              mmol/L #> 56                 mg/L          cav.int.all              mmol/L #> 57                 mg/L              ctrough              mmol/L #> 58                 mg/L               cstart              mmol/L #> 59                 mg/L                 ceoi              mmol/L #> 60                 mg/L           clast.pred              mmol/L #> 61                 mg/L      cav.int.inf.obs              mmol/L #> 62                 mg/L     cav.int.inf.pred              mmol/L #> 63                   mg                   ae                  mg #> 64                mg/kg              totdose               mg/kg #> 65       (mg/L)/(mg/kg)              cmax.dn      (mg/L)/(mg/kg) #> 66       (mg/L)/(mg/kg)              cmin.dn      (mg/L)/(mg/kg) #> 67       (mg/L)/(mg/kg)         clast.obs.dn      (mg/L)/(mg/kg) #> 68       (mg/L)/(mg/kg)        clast.pred.dn      (mg/L)/(mg/kg) #> 69       (mg/L)/(mg/kg)               cav.dn      (mg/L)/(mg/kg) #> 70       (mg/L)/(mg/kg)           ctrough.dn      (mg/L)/(mg/kg) #> 71       (mg/kg)/(mg/L)             vss.last      (mg/kg)/(mg/L) #> 72       (mg/kg)/(mg/L)          vss.iv.last      (mg/kg)/(mg/L) #> 73       (mg/kg)/(mg/L)               vz.obs      (mg/kg)/(mg/L) #> 74       (mg/kg)/(mg/L)              vz.pred      (mg/kg)/(mg/L) #> 75       (mg/kg)/(mg/L)              vss.obs      (mg/kg)/(mg/L) #> 76       (mg/kg)/(mg/L)             vss.pred      (mg/kg)/(mg/L) #> 77       (mg/kg)/(mg/L)           vss.iv.obs      (mg/kg)/(mg/L) #> 78       (mg/kg)/(mg/L)          vss.iv.pred      (mg/kg)/(mg/L) #> 79       (mg/kg)/(mg/L)           vss.md.obs      (mg/kg)/(mg/L) #> 80       (mg/kg)/(mg/L)          vss.md.pred      (mg/kg)/(mg/L) #> 81              hr*mg/L              auclast             hr*mg/L #> 82              hr*mg/L               aucall             hr*mg/L #> 83              hr*mg/L          aucint.last             hr*mg/L #> 84              hr*mg/L     aucint.last.dose             hr*mg/L #> 85              hr*mg/L           aucint.all             hr*mg/L #> 86              hr*mg/L      aucint.all.dose             hr*mg/L #> 87              hr*mg/L aucabove.predose.all             hr*mg/L #> 88              hr*mg/L  aucabove.trough.all             hr*mg/L #> 89              hr*mg/L       sparse_auclast             hr*mg/L #> 90              hr*mg/L        sparse_auc_se             hr*mg/L #> 91              hr*mg/L            aucivlast             hr*mg/L #> 92              hr*mg/L             aucivall             hr*mg/L #> 93              hr*mg/L        aucivint.last             hr*mg/L #> 94              hr*mg/L         aucivint.all             hr*mg/L #> 95              hr*mg/L           aucinf.obs             hr*mg/L #> 96              hr*mg/L          aucinf.pred             hr*mg/L #> 97              hr*mg/L       aucint.inf.obs             hr*mg/L #> 98              hr*mg/L  aucint.inf.obs.dose             hr*mg/L #> 99              hr*mg/L      aucint.inf.pred             hr*mg/L #> 100             hr*mg/L aucint.inf.pred.dose             hr*mg/L #> 101             hr*mg/L         aucivinf.obs             hr*mg/L #> 102             hr*mg/L        aucivinf.pred             hr*mg/L #> 103           hr^2*mg/L             aumclast           hr^2*mg/L #> 104           hr^2*mg/L              aumcall           hr^2*mg/L #> 105           hr^2*mg/L          aumcinf.obs           hr^2*mg/L #> 106           hr^2*mg/L         aumcinf.pred           hr^2*mg/L #> 107   (hr*mg/L)/(mg/kg)           auclast.dn   (hr*mg/L)/(mg/kg) #> 108   (hr*mg/L)/(mg/kg)            aucall.dn   (hr*mg/L)/(mg/kg) #> 109   (hr*mg/L)/(mg/kg)        aucinf.obs.dn   (hr*mg/L)/(mg/kg) #> 110   (hr*mg/L)/(mg/kg)       aucinf.pred.dn   (hr*mg/L)/(mg/kg) #> 111 (hr^2*mg/L)/(mg/kg)          aumclast.dn (hr^2*mg/L)/(mg/kg) #> 112 (hr^2*mg/L)/(mg/kg)           aumcall.dn (hr^2*mg/L)/(mg/kg) #> 113 (hr^2*mg/L)/(mg/kg)       aumcinf.obs.dn (hr^2*mg/L)/(mg/kg) #> 114 (hr^2*mg/L)/(mg/kg)      aumcinf.pred.dn (hr^2*mg/L)/(mg/kg) #> 115   (mg/kg)/(hr*mg/L)              cl.last   (mg/kg)/(hr*mg/L) #> 116   (mg/kg)/(hr*mg/L)               cl.all   (mg/kg)/(hr*mg/L) #> 117   (mg/kg)/(hr*mg/L)               cl.obs   (mg/kg)/(hr*mg/L) #> 118   (mg/kg)/(hr*mg/L)              cl.pred   (mg/kg)/(hr*mg/L) #> 119        mg/(hr*mg/L)             clr.last        mg/(hr*mg/L) #> 120        mg/(hr*mg/L)              clr.obs        mg/(hr*mg/L) #> 121        mg/(hr*mg/L)             clr.pred        mg/(hr*mg/L) #>     conversion_factor #> 1         1.000000000 #> 2         1.000000000 #> 3         1.000000000 #> 4         1.000000000 #> 5         1.000000000 #> 6         1.000000000 #> 7         1.000000000 #> 8         1.000000000 #> 9         1.000000000 #> 10        1.000000000 #> 11        1.000000000 #> 12        1.000000000 #> 13        1.000000000 #> 14        1.000000000 #> 15        1.000000000 #> 16        1.000000000 #> 17        1.000000000 #> 18        1.000000000 #> 19        1.000000000 #> 20        1.000000000 #> 21        1.000000000 #> 22        1.000000000 #> 23        1.000000000 #> 24        1.000000000 #> 25        1.000000000 #> 26        1.000000000 #> 27        1.000000000 #> 28        1.000000000 #> 29        1.000000000 #> 30        1.000000000 #> 31        1.000000000 #> 32        1.000000000 #> 33        1.000000000 #> 34        1.000000000 #> 35        1.000000000 #> 36        1.000000000 #> 37        1.000000000 #> 38        1.000000000 #> 39        1.000000000 #> 40        1.000000000 #> 41        1.000000000 #> 42        1.000000000 #> 43        1.000000000 #> 44        1.000000000 #> 45        1.000000000 #> 46        1.000000000 #> 47        1.000000000 #> 48        1.000000000 #> 49        1.000000000 #> 50        0.007240029 #> 51        0.007240029 #> 52        0.007240029 #> 53        0.007240029 #> 54        0.007240029 #> 55        0.007240029 #> 56        0.007240029 #> 57        0.007240029 #> 58        0.007240029 #> 59        0.007240029 #> 60        0.007240029 #> 61        0.007240029 #> 62        0.007240029 #> 63        1.000000000 #> 64        1.000000000 #> 65        1.000000000 #> 66        1.000000000 #> 67        1.000000000 #> 68        1.000000000 #> 69        1.000000000 #> 70        1.000000000 #> 71        1.000000000 #> 72        1.000000000 #> 73        1.000000000 #> 74        1.000000000 #> 75        1.000000000 #> 76        1.000000000 #> 77        1.000000000 #> 78        1.000000000 #> 79        1.000000000 #> 80        1.000000000 #> 81        1.000000000 #> 82        1.000000000 #> 83        1.000000000 #> 84        1.000000000 #> 85        1.000000000 #> 86        1.000000000 #> 87        1.000000000 #> 88        1.000000000 #> 89        1.000000000 #> 90        1.000000000 #> 91        1.000000000 #> 92        1.000000000 #> 93        1.000000000 #> 94        1.000000000 #> 95        1.000000000 #> 96        1.000000000 #> 97        1.000000000 #> 98        1.000000000 #> 99        1.000000000 #> 100       1.000000000 #> 101       1.000000000 #> 102       1.000000000 #> 103       1.000000000 #> 104       1.000000000 #> 105       1.000000000 #> 106       1.000000000 #> 107       1.000000000 #> 108       1.000000000 #> 109       1.000000000 #> 110       1.000000000 #> 111       1.000000000 #> 112       1.000000000 #> 113       1.000000000 #> 114       1.000000000 #> 115       1.000000000 #> 116       1.000000000 #> 117       1.000000000 #> 118       1.000000000 #> 119       1.000000000 #> 120       1.000000000 #> 121       1.000000000  # This will make all time-related parameters use \"day\" even though the # original units are \"hr\" pknca_units_table(   concu = \"ng/mL\", doseu = \"mg/kg\", timeu = \"hr\", amountu = \"mg\",   timeu_pref = \"day\" ) #>                 PPORRESU             PPTESTCD              PPSTRESU #> 1               unitless            r.squared              unitless #> 2               unitless        adj.r.squared              unitless #> 3               fraction                    f              fraction #> 4               fraction                  ptr              fraction #> 5               fraction                   fe              fraction #> 6               fraction           span.ratio              fraction #> 7                      %             deg.fluc                     % #> 8                      %                swing                     % #> 9                      %       aucivpbextlast                     % #> 10                     %        aucivpbextall                     % #> 11                     %   aucivpbextint.last                     % #> 12                     %    aucivpbextint.all                     % #> 13                     %    aucivpbextinf.obs                     % #> 14                     %   aucivpbextinf.pred                     % #> 15                     %          aucpext.obs                     % #> 16                     %         aucpext.pred                     % #> 17                 count           count_conc                 count #> 18                 count        sparse_auc_df                 count #> 19                 count    lambda.z.n.points                 count #> 20                    hr                start                   day #> 21                    hr                  end                   day #> 22                    hr                 tmax                   day #> 23                    hr                tlast                   day #> 24                    hr               tfirst                   day #> 25                    hr             mrt.last                   day #> 26                    hr          mrt.iv.last                   day #> 27                    hr                 tlag                   day #> 28                    hr           time_above                   day #> 29                    hr            half.life                   day #> 30                    hr  lambda.z.time.first                   day #> 31                    hr       thalf.eff.last                   day #> 32                    hr    thalf.eff.iv.last                   day #> 33                    hr              mrt.obs                   day #> 34                    hr             mrt.pred                   day #> 35                    hr           mrt.iv.obs                   day #> 36                    hr          mrt.iv.pred                   day #> 37                    hr           mrt.md.obs                   day #> 38                    hr          mrt.md.pred                   day #> 39                    hr        thalf.eff.obs                   day #> 40                    hr       thalf.eff.pred                   day #> 41                    hr     thalf.eff.iv.obs                   day #> 42                    hr    thalf.eff.iv.pred                   day #> 43                  1/hr             lambda.z                 1/day #> 44                  1/hr             kel.last                 1/day #> 45                  1/hr          kel.iv.last                 1/day #> 46                  1/hr              kel.obs                 1/day #> 47                  1/hr             kel.pred                 1/day #> 48                  1/hr           kel.iv.obs                 1/day #> 49                  1/hr          kel.iv.pred                 1/day #> 50                 ng/mL                   c0                 ng/mL #> 51                 ng/mL                 cmax                 ng/mL #> 52                 ng/mL                 cmin                 ng/mL #> 53                 ng/mL            clast.obs                 ng/mL #> 54                 ng/mL                  cav                 ng/mL #> 55                 ng/mL         cav.int.last                 ng/mL #> 56                 ng/mL          cav.int.all                 ng/mL #> 57                 ng/mL              ctrough                 ng/mL #> 58                 ng/mL               cstart                 ng/mL #> 59                 ng/mL                 ceoi                 ng/mL #> 60                 ng/mL           clast.pred                 ng/mL #> 61                 ng/mL      cav.int.inf.obs                 ng/mL #> 62                 ng/mL     cav.int.inf.pred                 ng/mL #> 63                    mg                   ae                    mg #> 64                 mg/kg              totdose                 mg/kg #> 65       (ng/mL)/(mg/kg)              cmax.dn       (ng/mL)/(mg/kg) #> 66       (ng/mL)/(mg/kg)              cmin.dn       (ng/mL)/(mg/kg) #> 67       (ng/mL)/(mg/kg)         clast.obs.dn       (ng/mL)/(mg/kg) #> 68       (ng/mL)/(mg/kg)        clast.pred.dn       (ng/mL)/(mg/kg) #> 69       (ng/mL)/(mg/kg)               cav.dn       (ng/mL)/(mg/kg) #> 70       (ng/mL)/(mg/kg)           ctrough.dn       (ng/mL)/(mg/kg) #> 71       (mg/kg)/(ng/mL)             vss.last       (mg/kg)/(ng/mL) #> 72       (mg/kg)/(ng/mL)          vss.iv.last       (mg/kg)/(ng/mL) #> 73       (mg/kg)/(ng/mL)               vz.obs       (mg/kg)/(ng/mL) #> 74       (mg/kg)/(ng/mL)              vz.pred       (mg/kg)/(ng/mL) #> 75       (mg/kg)/(ng/mL)              vss.obs       (mg/kg)/(ng/mL) #> 76       (mg/kg)/(ng/mL)             vss.pred       (mg/kg)/(ng/mL) #> 77       (mg/kg)/(ng/mL)           vss.iv.obs       (mg/kg)/(ng/mL) #> 78       (mg/kg)/(ng/mL)          vss.iv.pred       (mg/kg)/(ng/mL) #> 79       (mg/kg)/(ng/mL)           vss.md.obs       (mg/kg)/(ng/mL) #> 80       (mg/kg)/(ng/mL)          vss.md.pred       (mg/kg)/(ng/mL) #> 81              hr*ng/mL              auclast             day*ng/mL #> 82              hr*ng/mL               aucall             day*ng/mL #> 83              hr*ng/mL          aucint.last             day*ng/mL #> 84              hr*ng/mL     aucint.last.dose             day*ng/mL #> 85              hr*ng/mL           aucint.all             day*ng/mL #> 86              hr*ng/mL      aucint.all.dose             day*ng/mL #> 87              hr*ng/mL aucabove.predose.all             day*ng/mL #> 88              hr*ng/mL  aucabove.trough.all             day*ng/mL #> 89              hr*ng/mL       sparse_auclast             day*ng/mL #> 90              hr*ng/mL        sparse_auc_se             day*ng/mL #> 91              hr*ng/mL            aucivlast             day*ng/mL #> 92              hr*ng/mL             aucivall             day*ng/mL #> 93              hr*ng/mL        aucivint.last             day*ng/mL #> 94              hr*ng/mL         aucivint.all             day*ng/mL #> 95              hr*ng/mL           aucinf.obs             day*ng/mL #> 96              hr*ng/mL          aucinf.pred             day*ng/mL #> 97              hr*ng/mL       aucint.inf.obs             day*ng/mL #> 98              hr*ng/mL  aucint.inf.obs.dose             day*ng/mL #> 99              hr*ng/mL      aucint.inf.pred             day*ng/mL #> 100             hr*ng/mL aucint.inf.pred.dose             day*ng/mL #> 101             hr*ng/mL         aucivinf.obs             day*ng/mL #> 102             hr*ng/mL        aucivinf.pred             day*ng/mL #> 103           hr^2*ng/mL             aumclast           day^2*ng/mL #> 104           hr^2*ng/mL              aumcall           day^2*ng/mL #> 105           hr^2*ng/mL          aumcinf.obs           day^2*ng/mL #> 106           hr^2*ng/mL         aumcinf.pred           day^2*ng/mL #> 107   (hr*ng/mL)/(mg/kg)           auclast.dn   (day*ng/mL)/(mg/kg) #> 108   (hr*ng/mL)/(mg/kg)            aucall.dn   (day*ng/mL)/(mg/kg) #> 109   (hr*ng/mL)/(mg/kg)        aucinf.obs.dn   (day*ng/mL)/(mg/kg) #> 110   (hr*ng/mL)/(mg/kg)       aucinf.pred.dn   (day*ng/mL)/(mg/kg) #> 111 (hr^2*ng/mL)/(mg/kg)          aumclast.dn (day^2*ng/mL)/(mg/kg) #> 112 (hr^2*ng/mL)/(mg/kg)           aumcall.dn (day^2*ng/mL)/(mg/kg) #> 113 (hr^2*ng/mL)/(mg/kg)       aumcinf.obs.dn (day^2*ng/mL)/(mg/kg) #> 114 (hr^2*ng/mL)/(mg/kg)      aumcinf.pred.dn (day^2*ng/mL)/(mg/kg) #> 115   (mg/kg)/(hr*ng/mL)              cl.last   (mg/kg)/(day*ng/mL) #> 116   (mg/kg)/(hr*ng/mL)               cl.all   (mg/kg)/(day*ng/mL) #> 117   (mg/kg)/(hr*ng/mL)               cl.obs   (mg/kg)/(day*ng/mL) #> 118   (mg/kg)/(hr*ng/mL)              cl.pred   (mg/kg)/(day*ng/mL) #> 119        mg/(hr*ng/mL)             clr.last        mg/(day*ng/mL) #> 120        mg/(hr*ng/mL)              clr.obs        mg/(day*ng/mL) #> 121        mg/(hr*ng/mL)             clr.pred        mg/(day*ng/mL) #>     conversion_factor #> 1         1.000000000 #> 2         1.000000000 #> 3         1.000000000 #> 4         1.000000000 #> 5         1.000000000 #> 6         1.000000000 #> 7         1.000000000 #> 8         1.000000000 #> 9         1.000000000 #> 10        1.000000000 #> 11        1.000000000 #> 12        1.000000000 #> 13        1.000000000 #> 14        1.000000000 #> 15        1.000000000 #> 16        1.000000000 #> 17        1.000000000 #> 18        1.000000000 #> 19        1.000000000 #> 20        0.041666667 #> 21        0.041666667 #> 22        0.041666667 #> 23        0.041666667 #> 24        0.041666667 #> 25        0.041666667 #> 26        0.041666667 #> 27        0.041666667 #> 28        0.041666667 #> 29        0.041666667 #> 30        0.041666667 #> 31        0.041666667 #> 32        0.041666667 #> 33        0.041666667 #> 34        0.041666667 #> 35        0.041666667 #> 36        0.041666667 #> 37        0.041666667 #> 38        0.041666667 #> 39        0.041666667 #> 40        0.041666667 #> 41        0.041666667 #> 42        0.041666667 #> 43       24.000000000 #> 44       24.000000000 #> 45       24.000000000 #> 46       24.000000000 #> 47       24.000000000 #> 48       24.000000000 #> 49       24.000000000 #> 50        1.000000000 #> 51        1.000000000 #> 52        1.000000000 #> 53        1.000000000 #> 54        1.000000000 #> 55        1.000000000 #> 56        1.000000000 #> 57        1.000000000 #> 58        1.000000000 #> 59        1.000000000 #> 60        1.000000000 #> 61        1.000000000 #> 62        1.000000000 #> 63        1.000000000 #> 64        1.000000000 #> 65        1.000000000 #> 66        1.000000000 #> 67        1.000000000 #> 68        1.000000000 #> 69        1.000000000 #> 70        1.000000000 #> 71        1.000000000 #> 72        1.000000000 #> 73        1.000000000 #> 74        1.000000000 #> 75        1.000000000 #> 76        1.000000000 #> 77        1.000000000 #> 78        1.000000000 #> 79        1.000000000 #> 80        1.000000000 #> 81        0.041666667 #> 82        0.041666667 #> 83        0.041666667 #> 84        0.041666667 #> 85        0.041666667 #> 86        0.041666667 #> 87        0.041666667 #> 88        0.041666667 #> 89        0.041666667 #> 90        0.041666667 #> 91        0.041666667 #> 92        0.041666667 #> 93        0.041666667 #> 94        0.041666667 #> 95        0.041666667 #> 96        0.041666667 #> 97        0.041666667 #> 98        0.041666667 #> 99        0.041666667 #> 100       0.041666667 #> 101       0.041666667 #> 102       0.041666667 #> 103       0.001736111 #> 104       0.001736111 #> 105       0.001736111 #> 106       0.001736111 #> 107       0.041666667 #> 108       0.041666667 #> 109       0.041666667 #> 110       0.041666667 #> 111       0.001736111 #> 112       0.001736111 #> 113       0.001736111 #> 114       0.001736111 #> 115      24.000000000 #> 116      24.000000000 #> 117      24.000000000 #> 118      24.000000000 #> 119      24.000000000 #> 120      24.000000000 #> 121      24.000000000"},{"path":"http://billdenney.github.io/pknca/reference/print.PKNCAconc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print and/or summarize a PKNCAconc or PKNCAdose object. — print.PKNCAconc","title":"Print and/or summarize a PKNCAconc or PKNCAdose object. — print.PKNCAconc","text":"Print /summarize PKNCAconc PKNCAdose object.","code":""},{"path":"http://billdenney.github.io/pknca/reference/print.PKNCAconc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print and/or summarize a PKNCAconc or PKNCAdose object. — print.PKNCAconc","text":"","code":"# S3 method for PKNCAconc print(x, n = 6, summarize = FALSE, ...)  # S3 method for PKNCAconc summary(object, n = 0, summarize = TRUE, ...)  # S3 method for PKNCAdose print(x, n = 6, summarize = FALSE, ...)  # S3 method for PKNCAdose summary(object, n = 0, summarize = TRUE, ...)"},{"path":"http://billdenney.github.io/pknca/reference/print.PKNCAconc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print and/or summarize a PKNCAconc or PKNCAdose object. — print.PKNCAconc","text":"x object print n number rows data show (see head()) summarize Summarize nested number groups ... Arguments passed print.formula print.data.frame object object summarize","code":""},{"path":"http://billdenney.github.io/pknca/reference/print.PKNCAdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a PKNCAdata object — print.PKNCAdata","title":"Print a PKNCAdata object — print.PKNCAdata","text":"Print PKNCAdata object","code":""},{"path":"http://billdenney.github.io/pknca/reference/print.PKNCAdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a PKNCAdata object — print.PKNCAdata","text":"","code":"# S3 method for PKNCAdata print(x, ...)"},{"path":"http://billdenney.github.io/pknca/reference/print.PKNCAdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a PKNCAdata object — print.PKNCAdata","text":"x object print ... Arguments passed print.PKNCAconc() print.PKNCAdose()","code":""},{"path":"http://billdenney.github.io/pknca/reference/print.provenance.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the summary of a provenance object — print.provenance","title":"Print the summary of a provenance object — print.provenance","text":"Print summary provenance object","code":""},{"path":"http://billdenney.github.io/pknca/reference/print.provenance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the summary of a provenance object — print.provenance","text":"","code":"# S3 method for provenance print(x, ...)"},{"path":"http://billdenney.github.io/pknca/reference/print.provenance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the summary of a provenance object — print.provenance","text":"x object printed ... Ignored","code":""},{"path":"http://billdenney.github.io/pknca/reference/print.provenance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the summary of a provenance object — print.provenance","text":"invisible text printed information","code":""},{"path":"http://billdenney.github.io/pknca/reference/print.summary_PKNCAresults.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the results summary — print.summary_PKNCAresults","title":"Print the results summary — print.summary_PKNCAresults","text":"Print results summary","code":""},{"path":"http://billdenney.github.io/pknca/reference/print.summary_PKNCAresults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the results summary — print.summary_PKNCAresults","text":"","code":"# S3 method for summary_PKNCAresults print(x, ...)"},{"path":"http://billdenney.github.io/pknca/reference/print.summary_PKNCAresults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the results summary — print.summary_PKNCAresults","text":"x summary_PKNCAresults object ... passed print.data.frame (row.names always set FALSE)","code":""},{"path":"http://billdenney.github.io/pknca/reference/print.summary_PKNCAresults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the results summary — print.summary_PKNCAresults","text":"x invisibly","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr filter, full_join, group_by, inner_join, left_join, mutate, right_join, ungroup nlme getGroups","code":""},{"path":"http://billdenney.github.io/pknca/reference/roundString.html","id":null,"dir":"Reference","previous_headings":"","what":"Round a value to a defined number of digits printing out trailing zeros, if applicable. — roundString","title":"Round a value to a defined number of digits printing out trailing zeros, if applicable. — roundString","text":"Round value defined number digits printing trailing zeros, applicable.","code":""},{"path":"http://billdenney.github.io/pknca/reference/roundString.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round a value to a defined number of digits printing out trailing zeros, if applicable. — roundString","text":"","code":"roundString(x, digits = 0, sci_range = Inf, sci_sep = \"e\", si_range)"},{"path":"http://billdenney.github.io/pknca/reference/roundString.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round a value to a defined number of digits printing out trailing zeros, if applicable. — roundString","text":"x number round digits integer indicating number decimal places sci_range See help signifString() (likely want round signifString want use argument) sci_sep separator use scientific notation strings (typically either \"e\" \"x10^\" computer- human-readable output). si_range Deprecated, please use sci_range","code":""},{"path":"http://billdenney.github.io/pknca/reference/roundString.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round a value to a defined number of digits printing out trailing zeros, if applicable. — roundString","text":"string value","code":""},{"path":"http://billdenney.github.io/pknca/reference/roundString.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Round a value to a defined number of digits printing out trailing zeros, if applicable. — roundString","text":"Values standard numbers like Inf, NA, NaN returned \"Inf\", \"NA\", NaN.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/roundingSummarize.html","id":null,"dir":"Reference","previous_headings":"","what":"During the summarization of PKNCAresults, do the rounding of values based on the instructions given. — roundingSummarize","title":"During the summarization of PKNCAresults, do the rounding of values based on the instructions given. — roundingSummarize","text":"summarization PKNCAresults, rounding values based instructions given.","code":""},{"path":"http://billdenney.github.io/pknca/reference/roundingSummarize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"During the summarization of PKNCAresults, do the rounding of values based on the instructions given. — roundingSummarize","text":"","code":"roundingSummarize(x, name)"},{"path":"http://billdenney.github.io/pknca/reference/roundingSummarize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"During the summarization of PKNCAresults, do the rounding of values based on the instructions given. — roundingSummarize","text":"x values summarize name NCA parameter name (matching parameter name PKNCA.set.summary())","code":""},{"path":"http://billdenney.github.io/pknca/reference/roundingSummarize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"During the summarization of PKNCAresults, do the rounding of values based on the instructions given. — roundingSummarize","text":"string rounded value","code":""},{"path":"http://billdenney.github.io/pknca/reference/setAttributeColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an attribute to an object where the attribute is added as a name to the names of the object. — setAttributeColumn","title":"Add an attribute to an object where the attribute is added as a name to the names of the object. — setAttributeColumn","text":"Add attribute object attribute added name names object.","code":""},{"path":"http://billdenney.github.io/pknca/reference/setAttributeColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an attribute to an object where the attribute is added as a name to the names of the object. — setAttributeColumn","text":"","code":"setAttributeColumn(   object,   attr_name,   col_or_value,   col_name,   default_value,   stop_if_default,   warn_if_default,   message_if_default )"},{"path":"http://billdenney.github.io/pknca/reference/setAttributeColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an attribute to an object where the attribute is added as a name to the names of the object. — setAttributeColumn","text":"object object set attribute column . attr_name attribute name set col_or_value exists column data, used col_name.  , becomes default_value. col_name name column within dataset use (missing, uses attr_name) default_value value fill column column exist (column filled NA exist value provided). stop_if_default, warn_if_default, message_if_default character string provide error, warning, message user default_value used.  tested order (stop, code stops; warning, message ignored; message last).","code":""},{"path":"http://billdenney.github.io/pknca/reference/setAttributeColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an attribute to an object where the attribute is added as a name to the names of the object. — setAttributeColumn","text":"object attribute column added data.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/setDuration.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the duration of dosing or measurement — setDuration.PKNCAconc","title":"Set the duration of dosing or measurement — setDuration.PKNCAconc","text":"Set duration dosing measurement","code":""},{"path":"http://billdenney.github.io/pknca/reference/setDuration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the duration of dosing or measurement — setDuration.PKNCAconc","text":"","code":"# S3 method for PKNCAconc setDuration(object, duration, ...)  setDuration(object, ...)  # S3 method for PKNCAdose setDuration(object, duration, rate, dose, ...)"},{"path":"http://billdenney.github.io/pknca/reference/setDuration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the duration of dosing or measurement — setDuration.PKNCAconc","text":"object object set duration duration value set duration name column data use duration. ... Arguments passed another setDuration function rate (PKNCAdose objects ) rate infusion dose (PKNCAdose objects ) dose amount","code":""},{"path":"http://billdenney.github.io/pknca/reference/setDuration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the duration of dosing or measurement — setDuration.PKNCAconc","text":"object duration set","code":""},{"path":"http://billdenney.github.io/pknca/reference/setExcludeColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the exclude parameter on an object — setExcludeColumn","title":"Set the exclude parameter on an object — setExcludeColumn","text":"function adds exclude column object.  change exclude value, use exclude() function.","code":""},{"path":"http://billdenney.github.io/pknca/reference/setExcludeColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the exclude parameter on an object — setExcludeColumn","text":"","code":"setExcludeColumn(object, exclude, dataname = \"data\")"},{"path":"http://billdenney.github.io/pknca/reference/setExcludeColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the exclude parameter on an object — setExcludeColumn","text":"object object set exclude column . exclude column name set exclude value. dataname name data.frame within object add exclude column .","code":""},{"path":"http://billdenney.github.io/pknca/reference/setExcludeColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the exclude parameter on an object — setExcludeColumn","text":"object exclude column attribute","code":""},{"path":"http://billdenney.github.io/pknca/reference/setRoute.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the dosing route — setRoute","title":"Set the dosing route — setRoute","text":"Set dosing route","code":""},{"path":"http://billdenney.github.io/pknca/reference/setRoute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the dosing route — setRoute","text":"","code":"setRoute(object, ...)  # S3 method for PKNCAdose setRoute(object, route, ...)"},{"path":"http://billdenney.github.io/pknca/reference/setRoute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the dosing route — setRoute","text":"object PKNCAdose object ... Arguments passed another setRoute function route character string indicating one following:  column data indicates route administration, scalar indicating route administration subjects, vector indicating route administration dose dataset.","code":""},{"path":"http://billdenney.github.io/pknca/reference/setRoute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the dosing route — setRoute","text":"object updated route","code":""},{"path":"http://billdenney.github.io/pknca/reference/signifString.html","id":null,"dir":"Reference","previous_headings":"","what":"Round a value to a defined number of significant digits printing out trailing zeros, if applicable. — signifString","title":"Round a value to a defined number of significant digits printing out trailing zeros, if applicable. — signifString","text":"Round value defined number significant digits printing trailing zeros, applicable.","code":""},{"path":"http://billdenney.github.io/pknca/reference/signifString.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round a value to a defined number of significant digits printing out trailing zeros, if applicable. — signifString","text":"","code":"signifString(x, ...)  # S3 method for data.frame signifString(x, ...)  # S3 method for default signifString(x, digits = 6, sci_range = 6, sci_sep = \"e\", si_range, ...)"},{"path":"http://billdenney.github.io/pknca/reference/signifString.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round a value to a defined number of significant digits printing out trailing zeros, if applicable. — signifString","text":"x number round ... Arguments passed methods. digits integer indicating number significant digits sci_range integer (Inf) indicating switch scientific notation instead floating point. Zero indicates always use scientific; Inf indicates never use scientific notation; otherwise, scientific notation used abs(log10(x)) > si_range. sci_sep separator use scientific notation strings (typically either \"e\" \"x10^\" computer- human-readable output). si_range Deprecated, please use sci_range","code":""},{"path":"http://billdenney.github.io/pknca/reference/signifString.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round a value to a defined number of significant digits printing out trailing zeros, if applicable. — signifString","text":"string value","code":""},{"path":"http://billdenney.github.io/pknca/reference/signifString.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Round a value to a defined number of significant digits printing out trailing zeros, if applicable. — signifString","text":"Values standard numbers like Inf, NA, NaN returned \"Inf\", \"NA\", NaN.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/sort.interval.cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort the interval columns by dependencies. — sort.interval.cols","title":"Sort the interval columns by dependencies. — sort.interval.cols","text":"Columns always right columns depend .","code":""},{"path":"http://billdenney.github.io/pknca/reference/sort.interval.cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort the interval columns by dependencies. — sort.interval.cols","text":"","code":"# S3 method for interval.cols sort()"},{"path":"http://billdenney.github.io/pknca/reference/sparse_auc_weight_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the weight for sparse AUC calculation with the linear-trapezoidal rule — sparse_auc_weight_linear","title":"Calculate the weight for sparse AUC calculation with the linear-trapezoidal rule — sparse_auc_weight_linear","text":"weight used \\(w_i\\) parameter pk.calc.sparse_auc()","code":""},{"path":"http://billdenney.github.io/pknca/reference/sparse_auc_weight_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the weight for sparse AUC calculation with the linear-trapezoidal rule — sparse_auc_weight_linear","text":"","code":"sparse_auc_weight_linear(sparse_pk)"},{"path":"http://billdenney.github.io/pknca/reference/sparse_auc_weight_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the weight for sparse AUC calculation with the linear-trapezoidal rule — sparse_auc_weight_linear","text":"sparse_pk sparse_pk object as_sparse_pk()","code":""},{"path":"http://billdenney.github.io/pknca/reference/sparse_auc_weight_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the weight for sparse AUC calculation with the linear-trapezoidal rule — sparse_auc_weight_linear","text":"numeric vector weights sparse AUC calculations length sparse_pk","code":""},{"path":"http://billdenney.github.io/pknca/reference/sparse_auc_weight_linear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the weight for sparse AUC calculation with the linear-trapezoidal rule — sparse_auc_weight_linear","text":"$$w_i = \\frac{\\delta_{time,-1,} + \\delta_{time,,+1}}{2}$$ $$\\delta_{time,,+1} = t_{+1} - t_i$$ : \\(w_i\\) weight time \\(\\delta_{time,-1,}\\) \\(\\delta_{time,,+1}\\) changes time -1 +1 (zero outside time range) \\(t_i\\) time time ","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/sparse_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the mean concentration at all time points for use in sparse NCA calculations — sparse_mean","title":"Calculate the mean concentration at all time points for use in sparse NCA calculations — sparse_mean","text":"Choices method calculation (argument sparse_mean_method) :","code":""},{"path":"http://billdenney.github.io/pknca/reference/sparse_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the mean concentration at all time points for use in sparse NCA calculations — sparse_mean","text":"","code":"sparse_mean(   sparse_pk,   sparse_mean_method = c(\"arithmetic mean, <=50% BLQ\", \"arithmetic mean\") )"},{"path":"http://billdenney.github.io/pknca/reference/sparse_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the mean concentration at all time points for use in sparse NCA calculations — sparse_mean","text":"sparse_pk sparse_pk object as_sparse_pk() sparse_mean_method method used calculate sparse mean (see details)","code":""},{"path":"http://billdenney.github.io/pknca/reference/sparse_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the mean concentration at all time points for use in sparse NCA calculations — sparse_mean","text":"vector length sparse_pk mean concentration times.","code":""},{"path":"http://billdenney.github.io/pknca/reference/sparse_mean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the mean concentration at all time points for use in sparse NCA calculations — sparse_mean","text":"\"arithmetic mean\" Arithmetic mean (ignoring number BLQ samples) \"arithmetic mean, <=50% BLQ\" >= 50% measurements BLQ, zero.  Otherwise, arithmetic mean samples (including BLQ zero).","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/sparse_pk_attribute.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or get a sparse_pk object attribute — sparse_pk_attribute","title":"Set or get a sparse_pk object attribute — sparse_pk_attribute","text":"Set get sparse_pk object attribute","code":""},{"path":"http://billdenney.github.io/pknca/reference/sparse_pk_attribute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or get a sparse_pk object attribute — sparse_pk_attribute","text":"","code":"sparse_pk_attribute(sparse_pk, ...)"},{"path":"http://billdenney.github.io/pknca/reference/sparse_pk_attribute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or get a sparse_pk object attribute — sparse_pk_attribute","text":"sparse_pk sparse_pk object as_sparse_pk() ... Either character string (get value) named vector length sparse_pk set value.","code":""},{"path":"http://billdenney.github.io/pknca/reference/sparse_pk_attribute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set or get a sparse_pk object attribute — sparse_pk_attribute","text":"Either attribute value updated sparse_pk object","code":""},{"path":"http://billdenney.github.io/pknca/reference/sparse_to_dense_pk.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the mean concentration-time profile as a data.frame — sparse_to_dense_pk","title":"Extract the mean concentration-time profile as a data.frame — sparse_to_dense_pk","text":"Extract mean concentration-time profile data.frame","code":""},{"path":"http://billdenney.github.io/pknca/reference/sparse_to_dense_pk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the mean concentration-time profile as a data.frame — sparse_to_dense_pk","text":"","code":"sparse_to_dense_pk(sparse_pk)"},{"path":"http://billdenney.github.io/pknca/reference/sparse_to_dense_pk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the mean concentration-time profile as a data.frame — sparse_to_dense_pk","text":"sparse_pk sparse_pk object as_sparse_pk()","code":""},{"path":"http://billdenney.github.io/pknca/reference/sparse_to_dense_pk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the mean concentration-time profile as a data.frame — sparse_to_dense_pk","text":"data.frame names \"conc\" \"time\"","code":""},{"path":"http://billdenney.github.io/pknca/reference/summary.PKNCAdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a PKNCAdata object showing important details about the concentration, dosing, and interval information. — summary.PKNCAdata","title":"Summarize a PKNCAdata object showing important details about the concentration, dosing, and interval information. — summary.PKNCAdata","text":"Summarize PKNCAdata object showing important details concentration, dosing, interval information.","code":""},{"path":"http://billdenney.github.io/pknca/reference/summary.PKNCAdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a PKNCAdata object showing important details about the concentration, dosing, and interval information. — summary.PKNCAdata","text":"","code":"# S3 method for PKNCAdata summary(object, ...)"},{"path":"http://billdenney.github.io/pknca/reference/summary.PKNCAdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a PKNCAdata object showing important details about the concentration, dosing, and interval information. — summary.PKNCAdata","text":"object PKNCAdata object summarize. ... arguments passed print.PKNCAdata()","code":""},{"path":"http://billdenney.github.io/pknca/reference/summary.PKNCAresults.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize PKNCA results — summary.PKNCAresults","title":"Summarize PKNCA results — summary.PKNCAresults","text":"Summarize PKNCA results","code":""},{"path":"http://billdenney.github.io/pknca/reference/summary.PKNCAresults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize PKNCA results — summary.PKNCAresults","text":"","code":"# S3 method for PKNCAresults summary(   object,   ...,   drop_group = object$data$conc$columns$subject,   drop_param = character(),   summarize_n = NA,   not_requested = \".\",   not_calculated = \"NC\",   drop.group = deprecated(),   summarize.n.per.group = deprecated(),   not.requested.string = deprecated(),   not.calculated.string = deprecated(),   pretty_names = NULL )"},{"path":"http://billdenney.github.io/pknca/reference/summary.PKNCAresults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize PKNCA results — summary.PKNCAresults","text":"object results summarize ... Ignored. drop_group group(s) dropped formula? drop_param parameters excluded summary? summarize_n column N added (TRUE FALSE)? NA means automatically detect adding N data subject column indicated.  Note N maximum number parameter results parameter; parameters requested group, N NA. not_requested character string use parameter summary requested parameter within interval. not_calculated character string use parameter summary requested, point estimate spread calculations (applicable) returned NA. drop.group, summarize.n.per.group, .requested.string, .calculated.string Deprecated use drop_group, not_requested, not_calculated, summarize_n, instead pretty_names pretty names (easier understand report) used?  TRUE yes, FALSE , NULL yes units used units used.","code":""},{"path":"http://billdenney.github.io/pknca/reference/summary.PKNCAresults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize PKNCA results — summary.PKNCAresults","text":"data frame NCA parameter results summarized according summarization settings.","code":""},{"path":"http://billdenney.github.io/pknca/reference/summary.PKNCAresults.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize PKNCA results — summary.PKNCAresults","text":"Excluded results included summary.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/summary.PKNCAresults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize PKNCA results — summary.PKNCAresults","text":"","code":"conc_obj <- PKNCAconc(as.data.frame(datasets::Theoph), conc ~ Time | Subject) d_dose <-   unique(datasets::Theoph[     datasets::Theoph$Time == 0,     c(\"Dose\", \"Time\", \"Subject\")   ]) dose_obj <- PKNCAdose(d_dose, Dose ~ Time | Subject) data_obj_automatic <- PKNCAdata(conc_obj, dose_obj) results_obj_automatic <- pk.nca(data_obj_automatic) # To get standard results run summary summary(results_obj_automatic) #>  start end  N     auclast        cmax               tmax   half.life aucinf.obs #>      0  24 12 74.6 [24.3]           .                  .           .          . #>      0 Inf 12           . 8.65 [17.0] 1.14 [0.630, 3.55] 8.18 [2.12] 115 [28.4] #>  #> Caption: auclast, cmax, aucinf.obs: geometric mean and geometric coefficient of variation; tmax: median and range; half.life: arithmetic mean and standard deviation; N: number of subjects #>  # To enable numeric conversion and extraction, do not give a spread function # and subsequently run as.numeric on the result columns. PKNCA.set.summary(   name = c(\"auclast\", \"cmax\", \"half.life\", \"aucinf.obs\"),   point = business.geomean,   description = \"geometric mean\" ) PKNCA.set.summary(   name = c(\"tmax\"),   point = business.median,   description = \"median\" ) summary(results_obj_automatic, not_requested = \"NA\") #>  start end  N auclast cmax tmax half.life aucinf.obs #>      0  24 12    74.6   NA   NA        NA         NA #>      0 Inf 12      NA 8.65 1.14      7.99        115 #>  #> Caption: auclast, cmax, half.life, aucinf.obs: geometric mean; tmax: median; N: number of subjects #>"},{"path":"http://billdenney.github.io/pknca/reference/superposition.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute noncompartmental superposition for repeated dosing — superposition","title":"Compute noncompartmental superposition for repeated dosing — superposition","text":"Compute noncompartmental superposition repeated dosing","code":""},{"path":"http://billdenney.github.io/pknca/reference/superposition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute noncompartmental superposition for repeated dosing — superposition","text":"","code":"superposition(conc, ...)  # S3 method for PKNCAconc superposition(conc, ...)  # S3 method for numeric superposition(   conc,   time,   dose.input = NULL,   tau,   dose.times = 0,   dose.amount,   n.tau = Inf,   options = list(),   lambda.z,   clast.pred = FALSE,   tlast,   additional.times = numeric(),   check.blq = TRUE,   method = NULL,   auc.type = \"AUCinf\",   steady.state.tol = 0.001,   ... )"},{"path":"http://billdenney.github.io/pknca/reference/superposition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute noncompartmental superposition for repeated dosing — superposition","text":"conc Measured concentrations ... Additional arguments passed half.life function required compute lambda.z. time Time measurement concentrations dose.input dose given generate conc time inputs. missing, output doses assumed equal input dose. tau dosing interval dose.times time dosing within dosing interval. min(dose.times) must >= 0, max(dose.times) must < tau. may one dose times given vector. dose.amount doses given output.  Linear proportionality used input output equal.  length dose.amount must either 1 matching length dose.times. n.tau number tau dosing intervals simulate Inf steady-state. options List changes default PKNCA options (see PKNCA.options()) lambda.z elimination rate (units inverse time) extrapolation clast.pred use predicted opposed observed Clast, either give value clast.pred set true (automatic calculation half-life). tlast time last observed concentration limit quantification.  calculated provided. additional.times Times include final outputs addition standard times (see details).  min(additional.times) must >= 0, max(additional.times) must <= tau. check.blq Must first concentration measurement limit quantification? method method integration (one 'lin /log ', 'lin-log', 'linear') auc.type type AUC compute.  Choices 'AUCinf', 'AUClast', 'AUCall'. steady.state.tol tolerance assessing steady-state achieved (0 1, exclusive).","code":""},{"path":"http://billdenney.github.io/pknca/reference/superposition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute noncompartmental superposition for repeated dosing — superposition","text":"data frame columns named \"conc\" \"time\".","code":""},{"path":"http://billdenney.github.io/pknca/reference/superposition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute noncompartmental superposition for repeated dosing — superposition","text":"returned superposition times include following times: 0 (zero), dose.times, time modulo tau (shifting time dose time well), additional.times, tau.","code":""},{"path":[]},{"path":"http://billdenney.github.io/pknca/reference/time_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Times relative to an event (typically dosing) — time_calc","title":"Times relative to an event (typically dosing) — time_calc","text":"Times relative event (typically dosing)","code":""},{"path":"http://billdenney.github.io/pknca/reference/time_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Times relative to an event (typically dosing) — time_calc","text":"","code":"time_calc(time_event, time_obs, units = NULL)"},{"path":"http://billdenney.github.io/pknca/reference/time_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Times relative to an event (typically dosing) — time_calc","text":"time_event vector times events time_obs vector times observations units Passed base::.numeric.difftime()","code":""},{"path":"http://billdenney.github.io/pknca/reference/time_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Times relative to an event (typically dosing) — time_calc","text":"data.frame columns : event_number_before index time_event last one time_obs NA none . event_number_after index time_event first one time_obs NA none . time_before minimum time current time_obs time_event, 0 least one time_obs == time_event. time_after minimum time current time_obs time_event, 0 least one time_obs == time_event. time_after_first time first event (may negative positive). time_after time_before calculated time dose, equal zero, otherwise, calculated relative dose number event_number_* columns.","code":""},{"path":"http://billdenney.github.io/pknca/reference/tss.monoexponential.generate.formula.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to generate the formula and starting values for the parameters in monoexponential models. — tss.monoexponential.generate.formula","title":"A helper function to generate the formula and starting values for the parameters in monoexponential models. — tss.monoexponential.generate.formula","text":"helper function generate formula starting values parameters monoexponential models.","code":""},{"path":"http://billdenney.github.io/pknca/reference/tss.monoexponential.generate.formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to generate the formula and starting values for the parameters in monoexponential models. — tss.monoexponential.generate.formula","text":"","code":"tss.monoexponential.generate.formula(data)"},{"path":"http://billdenney.github.io/pknca/reference/tss.monoexponential.generate.formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to generate the formula and starting values for the parameters in monoexponential models. — tss.monoexponential.generate.formula","text":"data data used model","code":""},{"path":"http://billdenney.github.io/pknca/reference/tss.monoexponential.generate.formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function to generate the formula and starting values for the parameters in monoexponential models. — tss.monoexponential.generate.formula","text":"list elements variables","code":""},{"path":"http://billdenney.github.io/pknca/reference/var_sparse_auc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the variance for the AUC of sparsely sampled PK — var_sparse_auc","title":"Calculate the variance for the AUC of sparsely sampled PK — var_sparse_auc","text":"Equation 7.vii Nedelman Jia, 1998 used calculation:","code":""},{"path":"http://billdenney.github.io/pknca/reference/var_sparse_auc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the variance for the AUC of sparsely sampled PK — var_sparse_auc","text":"","code":"var_sparse_auc(sparse_pk)"},{"path":"http://billdenney.github.io/pknca/reference/var_sparse_auc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the variance for the AUC of sparsely sampled PK — var_sparse_auc","text":"sparse_pk sparse_pk object as_sparse_pk()","code":""},{"path":"http://billdenney.github.io/pknca/reference/var_sparse_auc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the variance for the AUC of sparsely sampled PK — var_sparse_auc","text":"$$var\\left(\\hat{AUC}\\right) = \\sum\\limits_{=0}^m\\left(\\frac{w_i^2 s_i^2}{r_i}\\right) + 2\\sum\\limits_{<j}\\left(\\frac{w_i w_j r_{ij} s_{ij}}{r_i r_j}\\right)$$ degrees freedom calculated described equation 6 paper.","code":""},{"path":"http://billdenney.github.io/pknca/reference/var_sparse_auc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the variance for the AUC of sparsely sampled PK — var_sparse_auc","text":"Nedelman JR, Jia X. extension Satterthwaite’s approximation applied pharmacokinetics. Journal Biopharmaceutical Statistics. 1998;8(2):317-328. doi:10.1080/10543409808835241","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-01109000","dir":"Changelog","previous_headings":"","what":"PKNCA 0.11.0.9000","title":"PKNCA 0.11.0.9000","text":"Duplicate data checks now account excluded rows. , row duplicated one duplicated rows excluded, error. (#298) Removed native pipes (|>) PKNCA work older versions R (#304).","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-0110","dir":"Changelog","previous_headings":"","what":"PKNCA 0.11.0","title":"PKNCA 0.11.0","text":"CRAN release: 2024-06-19 n == 1, spread statistics longer calculated summary. new AUC integration method, “lin-log”, added using linear method tmax log tmax, required exceptions zeros (fix #23) parameter vd removed (specific like vz vss, effectively duplicate vz). Use vz, instead. count_conc NCA parameter added assist data quality checking. Subject count (“N”) previously counted number rows data, unusual circumstances, number subjects NCA result fewer number rows. Now number subjects counted (fix #223). Extra column intervals argument PKNCAdata() longer cause error (fix #238) Many new assert_* functions added standardize input checking style checkmate library. Interpolation zero concentrations middle set concentrations now extensively supported. PKNCA begun process deprecating dots favor underscores function parameter names. Functions dots instead underscores continue work foreseeable future (version 1.0) warnings. AUCint now extrapolate AUC beyond Tlast using logarithmic extrapolation, regardless method used (fix #203). Imputation now automatically search column named “impute” interval definition (fix #257). Imputation now can look outside concentration-time interval full concentration-time profile group conc.group time.group arguments imputation functions. , PKNCA_impute_method_start_predose() imputation performs reasonably end interval infinite. progress bar now available via PKNCA.options(progress = ) option (fix #193). Additional versions average concentration based AUCint now available (fix #45). new option “keep_interval_cols” added allow keeping column intervals NCA results. Note included summary groups default. new argument “filter_requested” .data.frame.PKNCAresults() allows filter requested results PKNCAresults object. pknca_units_table() now four new arguments allow simplified automatic conversion source units desired reporting units, concu_pref, doseu_pref, amountu_pref, timeu_pref (#197) Extraction PKNCA objects within PKNCA objects now supported various as_PKNCA* functions like as_PKNCAconc() can used extract concentration data within PKNCAdata PKNCAresults object (#278) new “totdose” parameter gives total dose administered interval may exclude parameters summary new drop_param argument summary() PKNCAresults objects. .data.frame() method PKNCAresults objects new filter_excluded argument remove excluded results extracted data.frame. default behavior keep excluded results exclude column indicating reason excluded.","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"bugs-fixed-0-11-0","dir":"Changelog","previous_headings":"","what":"Bugs fixed","title":"PKNCA 0.11.0","text":"superpostion() interp.extrap.conc() family functions now respect interpolation extrapolation types requested rather using default. Concentration extrapolation extrapolate.conc() using “AUCall” method now decreasing instead increasing concentrations (#249). aucint.inf.obs parameter calculated zero concentrations returns zero aucint.inf.pred returns NA_real_ (#253)","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"breaking-changes-0-11-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"PKNCA 0.11.0","text":"arguments interp.method extrap.method replaced method auc.type interp.extrap.conc() family functions consistency rest PKNCA (fix #244) AIC.list() function longer exported (never intended external function). depends argument add.interval.col() must either NULL character vector. names fun.linear, fun.log, fun.inf arguments pk.calc.auxc changed use underscores. (using directly, please reach intended internal arguments, like know use case changing .) check.conc.time() defunct (never intended external function). replaced assert_conc(), assert_time() assert_conc_time(). clast.obs parameter now zero concentrations zero (see #253 part reason). (likely important users.) business... functions (e.g. business.geomean()) now include attribute non-NA results n, number values included statistic.","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"changes-under-the-hood-0-11-0","dir":"Changelog","previous_headings":"","what":"Changes under the hood","title":"PKNCA 0.11.0","text":"Adding dependent parameters required requested parameters now efficient (approx 40% time savings) Sorting interval dependencies happens less often (approx 5% time savings) Determining parameter needed calculation looking across parameters efficient (negligible time savings) internal change made make AUC integration concentration interpolation simpler simplify ability create new AUC integration concentration interpolation methods","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-0102","dir":"Changelog","previous_headings":"","what":"PKNCA 0.10.2","title":"PKNCA 0.10.2","text":"CRAN release: 2023-04-29 minor change pk.calc.aucpext() made now returns NA_real_ instead NaN. minor change made AUC amount excreted (ae) calculations provide exclusion reason result NA. minor new feature makes specification imputation easier. can give imputation without “PKNCA_impute_method_” prefix. , “PKNCA_impute_method_start_predose” “start_predose” equivalent.","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-0101","dir":"Changelog","previous_headings":"","what":"PKNCA 0.10.1","title":"PKNCA 0.10.1","text":"CRAN release: 2023-01-11 new parameter aucabove.trough.added calculate NCA trough concentration. Testing updates made work dplyr version 1.1.0 (fix #198) Internal changes columns identified made, parseFormula function subsequently removed (parseFormula never intended external use).","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-0100","dir":"Changelog","previous_headings":"","what":"PKNCA 0.10.0","title":"PKNCA 0.10.0","text":"CRAN release: 2022-10-16","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"bugs-fixed-0-10-0","dir":"Changelog","previous_headings":"","what":"Bugs Fixed","title":"PKNCA 0.10.0","text":"calculating AUC single concentration measurement, NA now returned instead 0. (fix #176)","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"new-features-0-10-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"PKNCA 0.10.0","text":"Initial support unit assignment conversion added. See units argument PKNCAdata() function function pknca_units_table(). Initial support imputation added. See impute argument PKNCAdata() function Data Imputation vignette. summary() PKNCAresults object shows units column heading. running .data.frame() PKNCAresults object argument .format=\"wide\", standardized units values available, used. unit available, column names. Note pretty names may modified help clarify /shorten names make table heading useful. intend modify column headers programmatically, set pretty_names=FALSE calling summary() function. New, IV AUC calculation methods added. pk.calc.time_above() now uses default AUC calculation method interpolation time . , can use ‘lin /log ’ interpolation. PKNCA can now calculate parameters require extra information adding extra information intervals data.frame. example, add conc_above column intervals allow calculation time_above. change, “conc_above” PKNCA.options() value removed. Added dplyr joins, filter, mutate, group_by, ungroup allow modification PKNCA objects creation. (Note functions make provenance longer match PKNCAresults objects.)","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"breaking-changes-0-10-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"PKNCA 0.10.0","text":"getData() functions removed. getDataName() function PKNCAdata objects removed. interpolate.conc() interp.extrap.conc() now give errors missing (NA) input. affect typical NCA (NA values dropped), may affect direct calls functions .","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"internal-breaking-changes-these-should-not-affect-pknca-users-0-10-0","dir":"Changelog","previous_headings":"","what":"Internal Breaking Changes (these should not affect PKNCA users)","title":"PKNCA 0.10.0","text":"print.parseFormula() removed package.","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-095","dir":"Changelog","previous_headings":"","what":"PKNCA 0.9.5","title":"PKNCA 0.9.5","text":"CRAN release: 2021-10-29 Breaking change: part change, split methods PKNCAconc PKNCAdose objects removed along merge.splitList function. Single-subject (ungrouped) analysis works without creating dummy group (#74) PKNCAconc objects checked earlier valid data (#154) Add time_above parameter calculate time given concentration. Fix numeric BLQ replacement value number different values given first, middle, last (related #145). affects datasets BLQ replaced nonzero value (common scenario). Fix issue intervals tibbles (#141) Fix minor issue first exclusion reason show exclusion column reasons ignored (#113). Note impact bug minimal result excluded summaries first reason found, multiple reasons exclusion subsequent reasons recorded.","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-094","dir":"Changelog","previous_headings":"","what":"PKNCA 0.9.4","title":"PKNCA 0.9.4","text":"CRAN release: 2020-06-01 Additional changes required compatibility dplyr version 1.0 CRAN checks. functionality changed. Minor typographical documentation consistency cleanups throughout.","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-093","dir":"Changelog","previous_headings":"","what":"PKNCA 0.9.3","title":"PKNCA 0.9.3","text":"CRAN release: 2020-04-12 Changes required compatibility dplyr version 1.0. functionality changed.","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-092","dir":"Changelog","previous_headings":"","what":"PKNCA 0.9.2","title":"PKNCA 0.9.2","text":"CRAN release: 2020-02-28 New feature: time_calc() function help convert time values relative events (calculating time doses) Fix issue summarizing results “start” “end” dropped multiple interval rows matched single group. Enable exclusions prevented input arguments suggest exclusion, parameter calculating function may aware better information exclusion. Ensure exclusions maintained earlier parameter excluded initial parameter calculations (Fix #112). Two-point half-life calculation works adjusted r-squared gives warning instead error 2 points (Fix #114). Half-life calculation time decreased using .lm.fit() instead lm() decreasing time full NCA run ~30% (half-life ~50%). R version 4.0, much care taken create factors strings unless required (see https://developer.r-project.org/Blog/public/2020/02/16/stringsasfactors/index.html)","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-091","dir":"Changelog","previous_headings":"","what":"PKNCA 0.9.1","title":"PKNCA 0.9.1","text":"CRAN release: 2019-07-29 Correct vignette building.","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-090","dir":"Changelog","previous_headings":"","what":"PKNCA 0.9.0","title":"PKNCA 0.9.0","text":"Breaking Change: plot.PKNCAconc() moved pknca.reporting package (https://github.com/billdenney/pknca.reporting) Breaking Change: summary.PKNCAresults() now provides caption including summary method parameter. change summary functions using PKNCA.set.summary(), must now use description option set description summary. Breaking Change: ptr now accurately uses ctrough instead cmin (fix #106) Issue fixed aucint* calculations now respect BLQ NA rules like calculations. (#104) half.life calculated due insufficient number points (default < 3), exclusion reason added. (#102) tibbles now work interval argument PKNCAdata() (fix #72) Issue fixed summarization data exclusions. Exclusions now correctly handled missing instead never calculated. parseFormula now internally uses NULL -group formula definitions. signifString roundString now sci_range (deprecating si_range) sci_sep arguments. Documentation improved, especially around selection parameters intervals. Multiple dose data single concentration measurement longer generates error (fixes #84). “start” “end” columns may now dropped summary PKNCAresults objects. PKNCAdata() restrictive unknown arguments issuing error unknown arguments present. intervals argument PKNCAdata() may now tibble (fixes #72). Documentation extensively updated (fixes #81). CRAN changes: Vignettes now better respect loading suggested packages. Tests now permissive timing.","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-085","dir":"Changelog","previous_headings":"","what":"PKNCA 0.8.5","title":"PKNCA 0.8.5","text":"CRAN release: 2018-06-13 Cleaned AUCint names Added dose-count within interval (warn multiple doses within interval) Various documentation updates signifString roundString now default use scientific notation values >=1e6 <=1e-6 Fix bug option handling within pk.nca (Fix #68)","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-084","dir":"Changelog","previous_headings":"","what":"PKNCA 0.8.4","title":"PKNCA 0.8.4","text":"CRAN release: 2018-01-03 Added AUCint flavors Parameter names NCA parameters likely changing next version; code still work, calculation methods therefore results may subtly different. changes fully documented.)","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-082","dir":"Changelog","previous_headings":"","what":"PKNCA 0.8.2","title":"PKNCA 0.8.2","text":"BACKWARD INCOMPATIBILITY: function supplied exclude argument ‘FUN’ now requires two arguments operates level single group rather full object. function can also return reason character string instead logical mask exclude data. BACKWARD INCOMPATIBILITY: Added back-end functionality require one function handle many NCA parameters related (e.g. combine pk.calc.aucpext, pk.calc.aucpext.obs, pk.calc.aucpext.pred, etc.). current code calls specific function (like pk.calc.aucpext.pred), must change using generic function (like pk.calc.aucpext) BACKWARD INCOMPATIBILITY: Functions previously may returned Infinity due dividing zero (e.g. AUC=0 calculating clearance) now return NA. Added Validation vignette. Corrected issue time steady-state single estimate may given one estimated time steady-state. Corrected issue exclude handling now blank string also accepted included (excluded). PKNCAconc now accepts “volume” argument pk.nca can now calculate urine/feces-related parameters (fe, ae, clr) exclude_nca* functions added (Fixes issue #20) Add manual half-life point selection (Fixes issue #18) Improved summary settings (Fixes issue #54) Add parameters Ceoi intravenous MRT Updated vignettes improve clarity Added dose-normalized PK parameters (Fixes issue #41) Added checks confirm concentration time numeric (Fixes feature request #40) Improved test coverage","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-081","dir":"Changelog","previous_headings":"","what":"PKNCA 0.8.1","title":"PKNCA 0.8.1","text":"CRAN release: 2017-02-27 PKNCAdose longer required calculations. Data may now excluded calculations.","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-08","dir":"Changelog","previous_headings":"","what":"PKNCA 0.8","title":"PKNCA 0.8","text":"release backward compatible. switch observed predicted-related NCA parameters (like aucinf.obs aucinf.pred) changed format intervals specification. Remove dependency doBy library Dose-aware interpolation extrapolation added interp.extrap.conc.dose function. Added Clast.pred related NCA calculations Added N summary PKNCAresults Added parameter selection Clast,observed Clast,predicted across parameters Enabled PKNCAdose specified one-sided formula Improved error reporting group time (interval specification) reported addition error. PKNCAdose now allows route administration IV infusion parameters rate/duration specified","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-071","dir":"Changelog","previous_headings":"","what":"PKNCA 0.7.1","title":"PKNCA 0.7.1","text":"CRAN release: 2016-08-15 Updated vignettes Standardize rounding significance missing values signifString roundString Enable wide data output .data.frame(PKNCAresults, .format=“wide”) Correct calculation Vz Various CRAN-related cleanups","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-07","dir":"Changelog","previous_headings":"","what":"PKNCA 0.7","title":"PKNCA 0.7","text":"CRAN release: 2016-04-01 Additional PK parameters support IV dosing added Fix #11, Intervals can specified manually, apply across appropriate parts grouping variables Enable dose dose.time parameters NCA calculations NCA parameters calculated, especially related IV dosing Fix #8, Reporting times time-based parameters now within current interval rather since first dose (e.g. Tmax day 14 0 24 2724+c(0, 24)) Added several vignettes Dosing without concentration probably placebo; warn continue Fix #6, make merge.splitByData work one dosing level Export generic classes previously exported simplify use Superposition extensions lambda.z calculated Significance rounding character strings works rounding moves one order magnitude. Fix #9, summarization parameters calculated show calculated instead missing.","code":""},{"path":"http://billdenney.github.io/pknca/news/index.html","id":"pknca-06","dir":"Changelog","previous_headings":"","what":"PKNCA 0.6","title":"PKNCA 0.6","text":"CRAN release: 2015-11-22 First release targeting CRAN","code":""}]
